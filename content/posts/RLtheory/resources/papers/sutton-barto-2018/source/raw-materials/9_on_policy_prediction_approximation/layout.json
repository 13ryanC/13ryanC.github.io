{
    "pdf_info": [
        {
            "para_blocks": [
                {
                    "bbox": [
                        105,
                        214,
                        220,
                        240
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                105,
                                214,
                                220,
                                240
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        105,
                                        214,
                                        220,
                                        240
                                    ],
                                    "type": "text",
                                    "content": "Chapter 9"
                                }
                            ]
                        }
                    ],
                    "index": 0,
                    "level": 1
                },
                {
                    "bbox": [
                        104,
                        267,
                        459,
                        330
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                267,
                                459,
                                330
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        267,
                                        459,
                                        330
                                    ],
                                    "type": "text",
                                    "content": "On-policy Prediction with Approximation"
                                }
                            ]
                        }
                    ],
                    "index": 1,
                    "level": 1
                },
                {
                    "bbox": [
                        104,
                        372,
                        530,
                        598
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                372,
                                530,
                                598
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "text",
                                    "content": "In this chapter, we begin our study of function approximation in reinforcement learning by considering its use in estimating the state- value function from on- policy data, that is, in approximating "
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "inline_equation",
                                    "content": "v_{\\pi}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "text",
                                    "content": " from experience generated using a known policy "
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\pi"
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "text",
                                    "content": ". The novelty in this chapter is that the approximate value function is represented not as a table but as a parameterized functional form with weight vector "
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w} \\in \\mathbb{R}^{d}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "text",
                                    "content": ". We will write "
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{v} (s, \\mathbf{w}) \\approx v_{\\pi}(s)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "text",
                                    "content": " for the approximate value of state "
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "text",
                                    "content": " given weight vector "
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "text",
                                    "content": ". For example, "
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{v}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "text",
                                    "content": " might be a linear function in features of the state, with "
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "text",
                                    "content": " the vector of feature weights. More generally, "
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{v}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "text",
                                    "content": " might be the function computed by a multi- layer artificial neural network, with "
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "text",
                                    "content": " the vector of connection weights in all the layers. By adjusting the weights, any of a wide range of different functions can be implemented by the network. Or "
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{v}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "text",
                                    "content": " might be the function computed by a decision tree, where "
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "text",
                                    "content": " is all the numbers defining the split points and leaf values of the tree. Typically, the number of weights (the dimensionality of "
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "text",
                                    "content": ") is much less than the number of states "
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "inline_equation",
                                    "content": "(d \\ll |\\mathbf{s}|)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        372,
                                        530,
                                        598
                                    ],
                                    "type": "text",
                                    "content": ", and changing one weight changes the estimated value of many states. Consequently, when a single state is updated, the change generalizes from that state to affect the values of many other states. Such generalization makes the learning potentially more powerful but also potentially more difficult to manage and understand."
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        104,
                        600,
                        530,
                        719
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                600,
                                530,
                                719
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        600,
                                        530,
                                        719
                                    ],
                                    "type": "text",
                                    "content": "Perhaps surprisingly, extending reinforcement learning to function approximation also makes it applicable to partially observable problems, in which the full state is not available to the agent. If the parameterized function form for "
                                },
                                {
                                    "bbox": [
                                        104,
                                        600,
                                        530,
                                        719
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{v}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        600,
                                        530,
                                        719
                                    ],
                                    "type": "text",
                                    "content": " does not allow the estimated value to depend on certain aspects of the state, then it is just as if those aspects are unobservable. In fact, all the theoretical results for methods using function approximation presented in this part of the book apply equally well to cases of partial observability. What function approximation can't do, however, is augment the state representation with memories of past observations. Some such possible further extensions are discussed briefly in Section 17.3."
                                }
                            ]
                        }
                    ],
                    "index": 3
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 0
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        64,
                        137,
                        344,
                        154
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                137,
                                344,
                                154
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        137,
                                        344,
                                        154
                                    ],
                                    "type": "text",
                                    "content": "9.1 Value-function Approximation"
                                }
                            ]
                        }
                    ],
                    "index": 0,
                    "level": 1
                },
                {
                    "bbox": [
                        64,
                        165,
                        490,
                        286
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                165,
                                490,
                                286
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        286
                                    ],
                                    "type": "text",
                                    "content": "All of the prediction methods covered in this book have been described as updates to an estimated value function that shift its value at particular states toward a \"backed- up value,\" or update target, for that state. Let us refer to an individual update by the notation "
                                },
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        286
                                    ],
                                    "type": "inline_equation",
                                    "content": "s\\mapsto u"
                                },
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        286
                                    ],
                                    "type": "text",
                                    "content": " where "
                                },
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        286
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        286
                                    ],
                                    "type": "text",
                                    "content": " is the state updated and "
                                },
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        286
                                    ],
                                    "type": "inline_equation",
                                    "content": "u"
                                },
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        286
                                    ],
                                    "type": "text",
                                    "content": " is the update target that "
                                },
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        286
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        286
                                    ],
                                    "type": "text",
                                    "content": " 's estimated value is shifted toward. For example, the Monte Carlo update for value prediction is "
                                },
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        286
                                    ],
                                    "type": "inline_equation",
                                    "content": "S_{t}\\mapsto G_{t}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        286
                                    ],
                                    "type": "text",
                                    "content": " , the "
                                },
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        286
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathrm{TD}(0)"
                                },
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        286
                                    ],
                                    "type": "text",
                                    "content": " update is "
                                },
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        286
                                    ],
                                    "type": "inline_equation",
                                    "content": "S_{t}\\mapsto R_{t + 1} + \\gamma \\delta (S_{t + 1},\\mathbf{w}_{t})"
                                },
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        286
                                    ],
                                    "type": "text",
                                    "content": " , and the "
                                },
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        286
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        286
                                    ],
                                    "type": "text",
                                    "content": " step TD update is "
                                },
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        286
                                    ],
                                    "type": "inline_equation",
                                    "content": "S_{t}\\mapsto G_{t:t + n}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        286
                                    ],
                                    "type": "text",
                                    "content": " . In the DP (dynamic programming) policy- evaluation update, "
                                },
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        286
                                    ],
                                    "type": "inline_equation",
                                    "content": "s\\mapsto \\mathbb{E}_{\\pi}[R_{t + 1} + \\gamma \\delta (S_{t + 1},\\mathbf{w}_{t})\\mid S_{t} = s]"
                                },
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        286
                                    ],
                                    "type": "text",
                                    "content": " an arbitrary state "
                                },
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        286
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        286
                                    ],
                                    "type": "text",
                                    "content": " is updated, whereas in the other cases the state encountered in actual experience, "
                                },
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        286
                                    ],
                                    "type": "inline_equation",
                                    "content": "S_{t}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        286
                                    ],
                                    "type": "text",
                                    "content": " , is updated."
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        64,
                        287,
                        490,
                        472
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                287,
                                490,
                                472
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        287,
                                        490,
                                        472
                                    ],
                                    "type": "text",
                                    "content": "It is natural to interpret each update as specifying an example of the desired inputoutput behavior of the value function. In a sense, the update "
                                },
                                {
                                    "bbox": [
                                        64,
                                        287,
                                        490,
                                        472
                                    ],
                                    "type": "inline_equation",
                                    "content": "s\\mapsto u"
                                },
                                {
                                    "bbox": [
                                        64,
                                        287,
                                        490,
                                        472
                                    ],
                                    "type": "text",
                                    "content": " means that the estimated value for state "
                                },
                                {
                                    "bbox": [
                                        64,
                                        287,
                                        490,
                                        472
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        64,
                                        287,
                                        490,
                                        472
                                    ],
                                    "type": "text",
                                    "content": " should be more like the update target "
                                },
                                {
                                    "bbox": [
                                        64,
                                        287,
                                        490,
                                        472
                                    ],
                                    "type": "inline_equation",
                                    "content": "u"
                                },
                                {
                                    "bbox": [
                                        64,
                                        287,
                                        490,
                                        472
                                    ],
                                    "type": "text",
                                    "content": " .Up to now, the actual update has been trivial: the table entry for "
                                },
                                {
                                    "bbox": [
                                        64,
                                        287,
                                        490,
                                        472
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        64,
                                        287,
                                        490,
                                        472
                                    ],
                                    "type": "text",
                                    "content": " 's estimated value has simply been shifted a fraction of the way toward "
                                },
                                {
                                    "bbox": [
                                        64,
                                        287,
                                        490,
                                        472
                                    ],
                                    "type": "inline_equation",
                                    "content": "u"
                                },
                                {
                                    "bbox": [
                                        64,
                                        287,
                                        490,
                                        472
                                    ],
                                    "type": "text",
                                    "content": " , and the estimated values of all other states were left unchanged. Now we permit arbitrarily complex and sophisticated methods to implement the update, and updating at "
                                },
                                {
                                    "bbox": [
                                        64,
                                        287,
                                        490,
                                        472
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        64,
                                        287,
                                        490,
                                        472
                                    ],
                                    "type": "text",
                                    "content": " generalizes so that the estimated values of many other states are changed as well. Machine learning methods that learn to mimic input- output examples in this way are called supervised learning methods, and when the outputs are numbers, like "
                                },
                                {
                                    "bbox": [
                                        64,
                                        287,
                                        490,
                                        472
                                    ],
                                    "type": "inline_equation",
                                    "content": "u"
                                },
                                {
                                    "bbox": [
                                        64,
                                        287,
                                        490,
                                        472
                                    ],
                                    "type": "text",
                                    "content": " , the process is often called function approximation. Function approximation methods expect to receive examples of the desired input- output behavior of the function they are trying to approximate. We use these methods for value prediction simply by passing to them the "
                                },
                                {
                                    "bbox": [
                                        64,
                                        287,
                                        490,
                                        472
                                    ],
                                    "type": "inline_equation",
                                    "content": "s\\mapsto u"
                                },
                                {
                                    "bbox": [
                                        64,
                                        287,
                                        490,
                                        472
                                    ],
                                    "type": "text",
                                    "content": " of each update as a training example. We then interpret the approximate function they produce as an estimated value function."
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        64,
                        474,
                        490,
                        699
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                474,
                                490,
                                699
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        474,
                                        490,
                                        699
                                    ],
                                    "type": "text",
                                    "content": "Viewing each update as a conventional training example in this way enables us to use any of a wide range of existing function approximation methods for value prediction. In principle, we can use any method for supervised learning from examples, including artificial neural networks, decision trees, and various kinds of multivariate regression. However, not all function approximation methods are equally well suited for use in reinforcement learning. The most sophisticated artificial neural network and statistical methods all assume a static training set over which multiple passes are made. In reinforcement learning, however, it is important that learning be able to occur online, while the agent interacts with its environment or with a model of its environment. To do this requires methods that are able to learn efficiently from incrementally acquired data. In addition, reinforcement learning generally requires function approximation methods able to handle nonstationary target functions (target functions that change over time). For example, in control methods based on GPI (generalized policy iteration) we often seek to learn "
                                },
                                {
                                    "bbox": [
                                        64,
                                        474,
                                        490,
                                        699
                                    ],
                                    "type": "inline_equation",
                                    "content": "q_{\\pi}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        474,
                                        490,
                                        699
                                    ],
                                    "type": "text",
                                    "content": " while "
                                },
                                {
                                    "bbox": [
                                        64,
                                        474,
                                        490,
                                        699
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\pi"
                                },
                                {
                                    "bbox": [
                                        64,
                                        474,
                                        490,
                                        699
                                    ],
                                    "type": "text",
                                    "content": " changes. Even if the policy remains the same, the target values of training examples are nonstationary if they are generated by bootstrapping methods (DP and TD learning). Methods that cannot easily handle such nonstationarity are less suitable for reinforcement learning."
                                }
                            ]
                        }
                    ],
                    "index": 3
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 1
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        104,
                        136,
                        390,
                        156
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                136,
                                390,
                                156
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        136,
                                        390,
                                        156
                                    ],
                                    "type": "text",
                                    "content": "9.2 The Prediction Objective (VE)"
                                }
                            ]
                        }
                    ],
                    "index": 0,
                    "level": 1
                },
                {
                    "bbox": [
                        104,
                        165,
                        530,
                        339
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                165,
                                530,
                                339
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        165,
                                        530,
                                        339
                                    ],
                                    "type": "text",
                                    "content": "Up to now we have not specified an explicit objective for prediction. In the tabular case a continuous measure of prediction quality was not necessary because the learned value function could come to equal the true value function exactly. Moreover, the learned values at each state were decoupled—an update at one state affected no other. But with genuine approximation, an update at one state affects many others, and it is not possible to get the values of all states exactly correct. By assumption we have far more states than weights, so making one state's estimate more accurate invariably means making others' less accurate. We are obligated then to say which states we care most about. We must specify a state distribution "
                                },
                                {
                                    "bbox": [
                                        104,
                                        165,
                                        530,
                                        339
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mu (s) \\geq 0"
                                },
                                {
                                    "bbox": [
                                        104,
                                        165,
                                        530,
                                        339
                                    ],
                                    "type": "text",
                                    "content": ", "
                                },
                                {
                                    "bbox": [
                                        104,
                                        165,
                                        530,
                                        339
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\sum_{s} \\mu (s) = 1"
                                },
                                {
                                    "bbox": [
                                        104,
                                        165,
                                        530,
                                        339
                                    ],
                                    "type": "text",
                                    "content": ", representing how much we care about the error in each state "
                                },
                                {
                                    "bbox": [
                                        104,
                                        165,
                                        530,
                                        339
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        104,
                                        165,
                                        530,
                                        339
                                    ],
                                    "type": "text",
                                    "content": ". By the error in a state "
                                },
                                {
                                    "bbox": [
                                        104,
                                        165,
                                        530,
                                        339
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        104,
                                        165,
                                        530,
                                        339
                                    ],
                                    "type": "text",
                                    "content": " we mean the square of the difference between the approximate value "
                                },
                                {
                                    "bbox": [
                                        104,
                                        165,
                                        530,
                                        339
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{v} (s, \\mathbf{w})"
                                },
                                {
                                    "bbox": [
                                        104,
                                        165,
                                        530,
                                        339
                                    ],
                                    "type": "text",
                                    "content": " and the true value "
                                },
                                {
                                    "bbox": [
                                        104,
                                        165,
                                        530,
                                        339
                                    ],
                                    "type": "inline_equation",
                                    "content": "v_{\\pi}(s)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        165,
                                        530,
                                        339
                                    ],
                                    "type": "text",
                                    "content": ". Weighting this over the state space by "
                                },
                                {
                                    "bbox": [
                                        104,
                                        165,
                                        530,
                                        339
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mu"
                                },
                                {
                                    "bbox": [
                                        104,
                                        165,
                                        530,
                                        339
                                    ],
                                    "type": "text",
                                    "content": ", we obtain a natural objective function, the mean square value error, denoted "
                                },
                                {
                                    "bbox": [
                                        104,
                                        165,
                                        530,
                                        339
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\overline{\\mathrm{VE}}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        165,
                                        530,
                                        339
                                    ],
                                    "type": "text",
                                    "content": ":"
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        130,
                        343,
                        528,
                        375
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                130,
                                343,
                                528,
                                375
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        130,
                                        343,
                                        528,
                                        375
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\overline{\\mathrm{VE}} (\\mathbf{w}) \\doteq \\sum_{s \\in \\mathcal{S}} \\mu (s) \\left[ v_{\\pi}(s) - \\hat{v} (s, \\mathbf{w}) \\right]^2. \\tag{9.1}",
                                    "image_path": "f71fa3ffe7af1ded222543db1b4cafecdf80f2939226c82a62aa4ec3f801b1ec.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        104,
                        380,
                        530,
                        447
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                380,
                                530,
                                447
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        380,
                                        530,
                                        447
                                    ],
                                    "type": "text",
                                    "content": "The square root of this measure, the root "
                                },
                                {
                                    "bbox": [
                                        104,
                                        380,
                                        530,
                                        447
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\overline{\\mathrm{VE}}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        380,
                                        530,
                                        447
                                    ],
                                    "type": "text",
                                    "content": ", gives a rough measure of how much the approximate values differ from the true values and is often used in plots. Often "
                                },
                                {
                                    "bbox": [
                                        104,
                                        380,
                                        530,
                                        447
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mu (s)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        380,
                                        530,
                                        447
                                    ],
                                    "type": "text",
                                    "content": " is chosen to be the fraction of time spent in "
                                },
                                {
                                    "bbox": [
                                        104,
                                        380,
                                        530,
                                        447
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        104,
                                        380,
                                        530,
                                        447
                                    ],
                                    "type": "text",
                                    "content": ". Under on- policy training this is called the on- policy distribution; we focus entirely on this case in this chapter. In continuing tasks, the on- policy distribution is the stationary distribution under "
                                },
                                {
                                    "bbox": [
                                        104,
                                        380,
                                        530,
                                        447
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\pi"
                                },
                                {
                                    "bbox": [
                                        104,
                                        380,
                                        530,
                                        447
                                    ],
                                    "type": "text",
                                    "content": "."
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        117,
                        455,
                        361,
                        469
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                455,
                                361,
                                469
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        455,
                                        361,
                                        469
                                    ],
                                    "type": "text",
                                    "content": "The on-policy distribution in episodic tasks"
                                }
                            ]
                        }
                    ],
                    "index": 4,
                    "level": 1
                },
                {
                    "bbox": [
                        117,
                        478,
                        517,
                        559
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                478,
                                517,
                                559
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        478,
                                        517,
                                        559
                                    ],
                                    "type": "text",
                                    "content": "In an episodic task, the on- policy distribution is a little different in that it depends on how the initial states of episodes are chosen. Let "
                                },
                                {
                                    "bbox": [
                                        117,
                                        478,
                                        517,
                                        559
                                    ],
                                    "type": "inline_equation",
                                    "content": "h(s)"
                                },
                                {
                                    "bbox": [
                                        117,
                                        478,
                                        517,
                                        559
                                    ],
                                    "type": "text",
                                    "content": " denote the probability that an episode begins in each state "
                                },
                                {
                                    "bbox": [
                                        117,
                                        478,
                                        517,
                                        559
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        117,
                                        478,
                                        517,
                                        559
                                    ],
                                    "type": "text",
                                    "content": ", and let "
                                },
                                {
                                    "bbox": [
                                        117,
                                        478,
                                        517,
                                        559
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\eta (s)"
                                },
                                {
                                    "bbox": [
                                        117,
                                        478,
                                        517,
                                        559
                                    ],
                                    "type": "text",
                                    "content": " denote the number of time steps spent, on average, in state "
                                },
                                {
                                    "bbox": [
                                        117,
                                        478,
                                        517,
                                        559
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        117,
                                        478,
                                        517,
                                        559
                                    ],
                                    "type": "text",
                                    "content": " in a single episode. Time is spent in a state "
                                },
                                {
                                    "bbox": [
                                        117,
                                        478,
                                        517,
                                        559
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        117,
                                        478,
                                        517,
                                        559
                                    ],
                                    "type": "text",
                                    "content": " if episodes start in "
                                },
                                {
                                    "bbox": [
                                        117,
                                        478,
                                        517,
                                        559
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        117,
                                        478,
                                        517,
                                        559
                                    ],
                                    "type": "text",
                                    "content": ", or if transitions are made into "
                                },
                                {
                                    "bbox": [
                                        117,
                                        478,
                                        517,
                                        559
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        117,
                                        478,
                                        517,
                                        559
                                    ],
                                    "type": "text",
                                    "content": " from a preceding state "
                                },
                                {
                                    "bbox": [
                                        117,
                                        478,
                                        517,
                                        559
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\bar{s}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        478,
                                        517,
                                        559
                                    ],
                                    "type": "text",
                                    "content": " in which time is spent:"
                                }
                            ]
                        }
                    ],
                    "index": 5
                },
                {
                    "bbox": [
                        145,
                        567,
                        514,
                        595
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                145,
                                567,
                                514,
                                595
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        145,
                                        567,
                                        514,
                                        595
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\eta (s) = h(s) + \\sum_{s} \\eta (\\bar{s}) \\sum_{a} \\pi (a | \\bar{s}) p(s | \\bar{s}, a), \\quad \\text{for all} s \\in \\mathcal{S}. \\tag{9.2}",
                                    "image_path": "d6b9ccc3eb1776ea0fda3ab12c279fc944d9dafb34454501fa03deb2f03a27ac.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 6
                },
                {
                    "bbox": [
                        117,
                        603,
                        515,
                        643
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                603,
                                515,
                                643
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        603,
                                        515,
                                        643
                                    ],
                                    "type": "text",
                                    "content": "This system of equations can be solved for the expected number of visits "
                                },
                                {
                                    "bbox": [
                                        117,
                                        603,
                                        515,
                                        643
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\eta (s)"
                                },
                                {
                                    "bbox": [
                                        117,
                                        603,
                                        515,
                                        643
                                    ],
                                    "type": "text",
                                    "content": ". The on- policy distribution is then the fraction of time spent in each state normalized to sum to one:"
                                }
                            ]
                        }
                    ],
                    "index": 7
                },
                {
                    "bbox": [
                        145,
                        649,
                        514,
                        678
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                145,
                                649,
                                514,
                                678
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        145,
                                        649,
                                        514,
                                        678
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\mu (s) = \\frac{\\eta(s)}{\\sum_{a'} \\eta(s')} \\quad \\text{for all} s \\in \\mathcal{S}. \\tag{9.3}",
                                    "image_path": "a940699291a7da429475e52bb396efbd6f11e3476e382b16599a2970c09c0250.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 8
                },
                {
                    "bbox": [
                        117,
                        686,
                        515,
                        726
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                686,
                                515,
                                726
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        686,
                                        515,
                                        726
                                    ],
                                    "type": "text",
                                    "content": "This is the natural choice without discounting. If there is discounting "
                                },
                                {
                                    "bbox": [
                                        117,
                                        686,
                                        515,
                                        726
                                    ],
                                    "type": "inline_equation",
                                    "content": "(\\gamma < 1)"
                                },
                                {
                                    "bbox": [
                                        117,
                                        686,
                                        515,
                                        726
                                    ],
                                    "type": "text",
                                    "content": " it should be treated as a form of termination, which can be done simply by including a factor of "
                                },
                                {
                                    "bbox": [
                                        117,
                                        686,
                                        515,
                                        726
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\gamma"
                                },
                                {
                                    "bbox": [
                                        117,
                                        686,
                                        515,
                                        726
                                    ],
                                    "type": "text",
                                    "content": " in the second term of (9.2)."
                                }
                            ]
                        }
                    ],
                    "index": 9
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 2
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        64,
                        141,
                        489,
                        180
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                141,
                                489,
                                180
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        141,
                                        489,
                                        180
                                    ],
                                    "type": "text",
                                    "content": "The two cases, continuing and episodic, behave similarly, but with approximation they must be treated separately in formal analyses, as we will see repeatedly in this part of the book. This completes the specification of the learning objective."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        64,
                        181,
                        489,
                        248
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                181,
                                489,
                                248
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        181,
                                        489,
                                        248
                                    ],
                                    "type": "text",
                                    "content": "It is not completely clear that the "
                                },
                                {
                                    "bbox": [
                                        64,
                                        181,
                                        489,
                                        248
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\overline{\\mathrm{VE}}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        181,
                                        489,
                                        248
                                    ],
                                    "type": "text",
                                    "content": " is the right performance objective for reinforcement learning. Remember that our ultimate purpose—the reason we are learning a value function—is to find a better policy. The best value function for this purpose is not necessarily the best for minimizing "
                                },
                                {
                                    "bbox": [
                                        64,
                                        181,
                                        489,
                                        248
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\overline{\\mathrm{VE}}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        181,
                                        489,
                                        248
                                    ],
                                    "type": "text",
                                    "content": ". Nevertheless, it is not yet clear what a more useful alternative goal for value prediction might be. For now, we will focus on "
                                },
                                {
                                    "bbox": [
                                        64,
                                        181,
                                        489,
                                        248
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\overline{\\mathrm{VE}}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        181,
                                        489,
                                        248
                                    ],
                                    "type": "text",
                                    "content": "."
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        64,
                        249,
                        490,
                        394
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                249,
                                490,
                                394
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        249,
                                        490,
                                        394
                                    ],
                                    "type": "text",
                                    "content": "An ideal goal in terms of "
                                },
                                {
                                    "bbox": [
                                        64,
                                        249,
                                        490,
                                        394
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\overline{\\mathrm{VE}}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        249,
                                        490,
                                        394
                                    ],
                                    "type": "text",
                                    "content": " would be to find a global optimum, a weight vector "
                                },
                                {
                                    "bbox": [
                                        64,
                                        249,
                                        490,
                                        394
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}^{*}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        249,
                                        490,
                                        394
                                    ],
                                    "type": "text",
                                    "content": " for which "
                                },
                                {
                                    "bbox": [
                                        64,
                                        249,
                                        490,
                                        394
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\overline{\\mathrm{VE}} (\\mathbf{w}^{*}) \\leq \\overline{\\mathrm{VE}} (\\mathbf{w})"
                                },
                                {
                                    "bbox": [
                                        64,
                                        249,
                                        490,
                                        394
                                    ],
                                    "type": "text",
                                    "content": " for all possible "
                                },
                                {
                                    "bbox": [
                                        64,
                                        249,
                                        490,
                                        394
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        249,
                                        490,
                                        394
                                    ],
                                    "type": "text",
                                    "content": ". Reaching this goal is sometimes possible for simple function approximators such as linear ones, but is rarely possible for complex function approximators such as artificial neural networks and decision trees. Short of this, complex function approximators may seek to converge instead to a local optimum, a weight vector "
                                },
                                {
                                    "bbox": [
                                        64,
                                        249,
                                        490,
                                        394
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}^{*}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        249,
                                        490,
                                        394
                                    ],
                                    "type": "text",
                                    "content": " for which "
                                },
                                {
                                    "bbox": [
                                        64,
                                        249,
                                        490,
                                        394
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\overline{\\mathrm{VE}} (\\mathbf{w}^{*}) \\leq \\overline{\\mathrm{VE}} (\\mathbf{w})"
                                },
                                {
                                    "bbox": [
                                        64,
                                        249,
                                        490,
                                        394
                                    ],
                                    "type": "text",
                                    "content": " for all "
                                },
                                {
                                    "bbox": [
                                        64,
                                        249,
                                        490,
                                        394
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        249,
                                        490,
                                        394
                                    ],
                                    "type": "text",
                                    "content": " in some neighborhood of "
                                },
                                {
                                    "bbox": [
                                        64,
                                        249,
                                        490,
                                        394
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}^{*}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        249,
                                        490,
                                        394
                                    ],
                                    "type": "text",
                                    "content": ". Although this guarantee is only slightly reassuring, it is typically the best that can be said for nonlinear function approximators, and often it is enough. Still, for many cases of interest in reinforcement learning there is no guarantee of convergence to an optimum, or even to within a bounded distance of an optimum. Some methods may in fact diverge, with their "
                                },
                                {
                                    "bbox": [
                                        64,
                                        249,
                                        490,
                                        394
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\overline{\\mathrm{VE}}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        249,
                                        490,
                                        394
                                    ],
                                    "type": "text",
                                    "content": " approaching infinity in the limit."
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        64,
                        396,
                        489,
                        542
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                396,
                                489,
                                542
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        396,
                                        489,
                                        542
                                    ],
                                    "type": "text",
                                    "content": "In the last two sections we outlined a framework for combining a wide range of reinforcement learning methods for value prediction with a wide range of function approximation methods, using the updates of the former to generate training examples for the latter. We also described a "
                                },
                                {
                                    "bbox": [
                                        64,
                                        396,
                                        489,
                                        542
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\overline{\\mathrm{VE}}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        396,
                                        489,
                                        542
                                    ],
                                    "type": "text",
                                    "content": " performance measure which these methods may aspire to minimize. The range of possible function approximation methods is far too large to cover all, and anyway too little is known about most of them to make a reliable evaluation or recommendation. Of necessity, we consider only a few possibilities. In the rest of this chapter we focus on function approximation methods based on gradient principles, and on linear gradient- descent methods in particular. We focus on these methods in part because we consider them to be particularly promising and because they reveal key theoretical issues, but also because they are simple and our space is limited."
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        64,
                        562,
                        480,
                        580
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                562,
                                480,
                                580
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        562,
                                        480,
                                        580
                                    ],
                                    "type": "text",
                                    "content": "9.3 Stochastic-gradient and Semi-gradient Methods"
                                }
                            ]
                        }
                    ],
                    "index": 4,
                    "level": 1
                },
                {
                    "bbox": [
                        64,
                        591,
                        489,
                        644
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                591,
                                489,
                                644
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        591,
                                        489,
                                        644
                                    ],
                                    "type": "text",
                                    "content": "We now develop in detail one class of learning methods for function approximation in value prediction, those based on stochastic gradient descent (SGD). SGD methods are among the most widely used of all function approximation methods and are particularly well suited to online reinforcement learning."
                                }
                            ]
                        }
                    ],
                    "index": 5
                },
                {
                    "bbox": [
                        64,
                        645,
                        489,
                        699
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                645,
                                489,
                                699
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        645,
                                        489,
                                        699
                                    ],
                                    "type": "text",
                                    "content": "In gradient- descent methods, the weight vector is a column vector with a fixed number of real valued components, "
                                },
                                {
                                    "bbox": [
                                        64,
                                        645,
                                        489,
                                        699
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w} \\doteq (w_{1}, w_{2}, \\ldots , w_{d})^{\\top}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        645,
                                        489,
                                        699
                                    ],
                                    "type": "text",
                                    "content": ", and the approximate value function "
                                },
                                {
                                    "bbox": [
                                        64,
                                        645,
                                        489,
                                        699
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{v} (s, \\mathbf{w})"
                                },
                                {
                                    "bbox": [
                                        64,
                                        645,
                                        489,
                                        699
                                    ],
                                    "type": "text",
                                    "content": " is a differentiable function of "
                                },
                                {
                                    "bbox": [
                                        64,
                                        645,
                                        489,
                                        699
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        645,
                                        489,
                                        699
                                    ],
                                    "type": "text",
                                    "content": " for all "
                                },
                                {
                                    "bbox": [
                                        64,
                                        645,
                                        489,
                                        699
                                    ],
                                    "type": "inline_equation",
                                    "content": "s \\in \\mathbb{S}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        645,
                                        489,
                                        699
                                    ],
                                    "type": "text",
                                    "content": ". We will be updating "
                                },
                                {
                                    "bbox": [
                                        64,
                                        645,
                                        489,
                                        699
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        645,
                                        489,
                                        699
                                    ],
                                    "type": "text",
                                    "content": " at each of a series of discrete time steps, "
                                },
                                {
                                    "bbox": [
                                        64,
                                        645,
                                        489,
                                        699
                                    ],
                                    "type": "inline_equation",
                                    "content": "t = 0, 1, 2, 3, \\ldots"
                                },
                                {
                                    "bbox": [
                                        64,
                                        645,
                                        489,
                                        699
                                    ],
                                    "type": "text",
                                    "content": ", so we will need a notation "
                                },
                                {
                                    "bbox": [
                                        64,
                                        645,
                                        489,
                                        699
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}_{t}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        645,
                                        489,
                                        699
                                    ],
                                    "type": "text",
                                    "content": " for the"
                                }
                            ]
                        }
                    ],
                    "index": 6
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 3
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        104,
                        140,
                        530,
                        248
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                140,
                                530,
                                248
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        140,
                                        530,
                                        248
                                    ],
                                    "type": "text",
                                    "content": "weight vector at each step. For now, let us assume that, on each step, we observe a new example "
                                },
                                {
                                    "bbox": [
                                        104,
                                        140,
                                        530,
                                        248
                                    ],
                                    "type": "inline_equation",
                                    "content": "S_{t} \\mapsto v_{\\pi}(S_{t})"
                                },
                                {
                                    "bbox": [
                                        104,
                                        140,
                                        530,
                                        248
                                    ],
                                    "type": "text",
                                    "content": " consisting of a (possibly randomly selected) state "
                                },
                                {
                                    "bbox": [
                                        104,
                                        140,
                                        530,
                                        248
                                    ],
                                    "type": "inline_equation",
                                    "content": "S_{t}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        140,
                                        530,
                                        248
                                    ],
                                    "type": "text",
                                    "content": " and its true value under the policy. These states might be successive states from an interaction with the environment, but for now we do not assume so. Even though we are given the exact, correct values, "
                                },
                                {
                                    "bbox": [
                                        104,
                                        140,
                                        530,
                                        248
                                    ],
                                    "type": "inline_equation",
                                    "content": "v_{\\pi}(S_{t})"
                                },
                                {
                                    "bbox": [
                                        104,
                                        140,
                                        530,
                                        248
                                    ],
                                    "type": "text",
                                    "content": " for each "
                                },
                                {
                                    "bbox": [
                                        104,
                                        140,
                                        530,
                                        248
                                    ],
                                    "type": "inline_equation",
                                    "content": "S_{t}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        140,
                                        530,
                                        248
                                    ],
                                    "type": "text",
                                    "content": ", there is still a difficult problem because our function approximator has limited resources and thus limited resolution. In particular, there is generally no "
                                },
                                {
                                    "bbox": [
                                        104,
                                        140,
                                        530,
                                        248
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        140,
                                        530,
                                        248
                                    ],
                                    "type": "text",
                                    "content": " that gets all the states, or even all the examples, exactly correct. In addition, we must generalize to all the other states that have not appeared in examples."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        104,
                        248,
                        530,
                        314
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                248,
                                530,
                                314
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        248,
                                        530,
                                        314
                                    ],
                                    "type": "text",
                                    "content": "We assume that states appear in examples with the same distribution, "
                                },
                                {
                                    "bbox": [
                                        104,
                                        248,
                                        530,
                                        314
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mu"
                                },
                                {
                                    "bbox": [
                                        104,
                                        248,
                                        530,
                                        314
                                    ],
                                    "type": "text",
                                    "content": ", over which we are trying to minimize the "
                                },
                                {
                                    "bbox": [
                                        104,
                                        248,
                                        530,
                                        314
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\overline{\\mathbf{V}\\mathbf{E}}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        248,
                                        530,
                                        314
                                    ],
                                    "type": "text",
                                    "content": " as given by (9.1). A good strategy in this case is to try to minimize error on the observed examples. Stochastic gradient- descent (SGD) methods do this by adjusting the weight vector after each example by a small amount in the direction that would most reduce the error on that example:"
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        130,
                        322,
                        528,
                        374
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                130,
                                322,
                                528,
                                374
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        130,
                                        322,
                                        528,
                                        374
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\begin{array}{l}\\mathbf{w}_{t + 1}\\doteq \\mathbf{w}_t - \\frac{1}{2}\\alpha \\nabla \\Big[v_\\pi (S_t) - \\hat{v} (S_t,\\mathbf{w}_t)\\Big]^2\\\\ \\displaystyle = \\mathbf{w}_t + \\alpha \\Big[v_\\pi (S_t) - \\hat{v} (S_t,\\mathbf{w}_t)\\Big]\\nabla \\hat{v} (S_t,\\mathbf{w}_t), \\end{array} \\tag{9.4}",
                                    "image_path": "d6d730af8b8a1ec1e691f2259f5fea460decf0e58478957ffcd1cba99260e642.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        104,
                        382,
                        530,
                        422
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                382,
                                530,
                                422
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        382,
                                        530,
                                        422
                                    ],
                                    "type": "text",
                                    "content": "where "
                                },
                                {
                                    "bbox": [
                                        104,
                                        382,
                                        530,
                                        422
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\alpha"
                                },
                                {
                                    "bbox": [
                                        104,
                                        382,
                                        530,
                                        422
                                    ],
                                    "type": "text",
                                    "content": " is a positive step- size parameter, and "
                                },
                                {
                                    "bbox": [
                                        104,
                                        382,
                                        530,
                                        422
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\nabla f(\\mathbf{w})"
                                },
                                {
                                    "bbox": [
                                        104,
                                        382,
                                        530,
                                        422
                                    ],
                                    "type": "text",
                                    "content": ", for any scalar expression "
                                },
                                {
                                    "bbox": [
                                        104,
                                        382,
                                        530,
                                        422
                                    ],
                                    "type": "inline_equation",
                                    "content": "f(\\mathbf{w})"
                                },
                                {
                                    "bbox": [
                                        104,
                                        382,
                                        530,
                                        422
                                    ],
                                    "type": "text",
                                    "content": " that is a function of a vector (here "
                                },
                                {
                                    "bbox": [
                                        104,
                                        382,
                                        530,
                                        422
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        382,
                                        530,
                                        422
                                    ],
                                    "type": "text",
                                    "content": "), denotes the column vector of partial derivatives of the expression with respect to the components of the vector:"
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        132,
                        431,
                        528,
                        463
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                132,
                                431,
                                528,
                                463
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        132,
                                        431,
                                        528,
                                        463
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\nabla f(\\mathbf{w})\\doteq \\left(\\frac{\\partial f(\\mathbf{w})}{\\partial w_1},\\frac{\\partial f(\\mathbf{w})}{\\partial w_2},\\ldots ,\\frac{\\partial f(\\mathbf{w})}{\\partial w_d}\\right)^\\top . \\tag{9.6}",
                                    "image_path": "0afc70dfbc58167dfc3d5f799eb1041389023d115117776659537e2b1d94aa66.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 4
                },
                {
                    "bbox": [
                        104,
                        472,
                        530,
                        564
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                472,
                                530,
                                564
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        472,
                                        530,
                                        564
                                    ],
                                    "type": "text",
                                    "content": "This derivative vector is the gradient of "
                                },
                                {
                                    "bbox": [
                                        104,
                                        472,
                                        530,
                                        564
                                    ],
                                    "type": "inline_equation",
                                    "content": "f"
                                },
                                {
                                    "bbox": [
                                        104,
                                        472,
                                        530,
                                        564
                                    ],
                                    "type": "text",
                                    "content": " with respect to "
                                },
                                {
                                    "bbox": [
                                        104,
                                        472,
                                        530,
                                        564
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        472,
                                        530,
                                        564
                                    ],
                                    "type": "text",
                                    "content": ". SGD methods are \"gradient descent\" methods because the overall step in "
                                },
                                {
                                    "bbox": [
                                        104,
                                        472,
                                        530,
                                        564
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}_{t}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        472,
                                        530,
                                        564
                                    ],
                                    "type": "text",
                                    "content": " is proportional to the negative gradient of the example's squared error (9.4). This is the direction in which the error falls most rapidly. Gradient descent methods are called \"stochastic\" when the update is done, as here, on only a single example, which might have been selected stochastically. Over many examples, making small steps, the overall effect is to minimize an average performance measure such as the "
                                },
                                {
                                    "bbox": [
                                        104,
                                        472,
                                        530,
                                        564
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\overline{\\mathbf{V}\\mathbf{E}}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        472,
                                        530,
                                        564
                                    ],
                                    "type": "text",
                                    "content": "."
                                }
                            ]
                        }
                    ],
                    "index": 5
                },
                {
                    "bbox": [
                        104,
                        566,
                        531,
                        687
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                566,
                                531,
                                687
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        566,
                                        531,
                                        687
                                    ],
                                    "type": "text",
                                    "content": "It may not be immediately apparent why SGD takes only a small step in the direction of the gradient. Could we not move all the way in this direction and completely eliminate the error on the example? In many cases this could be done, but usually it is not desirable. Remember that we do not seek or expect to find a value function that has zero error for all states, but only an approximation that balances the errors in different states. If we completely corrected each example in one step, then we would not find such a balance. In fact, the convergence results for SGD methods assume that "
                                },
                                {
                                    "bbox": [
                                        104,
                                        566,
                                        531,
                                        687
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\alpha"
                                },
                                {
                                    "bbox": [
                                        104,
                                        566,
                                        531,
                                        687
                                    ],
                                    "type": "text",
                                    "content": " decreases over time. If it decreases in such a way as to satisfy the standard stochastic approximation conditions (2.7), then the SGD method (9.5) is guaranteed to converge to a local optimum."
                                }
                            ]
                        }
                    ],
                    "index": 6
                },
                {
                    "bbox": [
                        105,
                        687,
                        530,
                        740
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                105,
                                687,
                                530,
                                740
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        105,
                                        687,
                                        530,
                                        740
                                    ],
                                    "type": "text",
                                    "content": "We turn now to the case in which the target output, here denoted "
                                },
                                {
                                    "bbox": [
                                        105,
                                        687,
                                        530,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "U_{t} \\in \\mathbb{R}"
                                },
                                {
                                    "bbox": [
                                        105,
                                        687,
                                        530,
                                        740
                                    ],
                                    "type": "text",
                                    "content": ", of the "
                                },
                                {
                                    "bbox": [
                                        105,
                                        687,
                                        530,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "t"
                                },
                                {
                                    "bbox": [
                                        105,
                                        687,
                                        530,
                                        740
                                    ],
                                    "type": "text",
                                    "content": "th training example, "
                                },
                                {
                                    "bbox": [
                                        105,
                                        687,
                                        530,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "S_{t} \\mapsto U_{t}"
                                },
                                {
                                    "bbox": [
                                        105,
                                        687,
                                        530,
                                        740
                                    ],
                                    "type": "text",
                                    "content": ", is not the true value, "
                                },
                                {
                                    "bbox": [
                                        105,
                                        687,
                                        530,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "v_{\\pi}(S_{t})"
                                },
                                {
                                    "bbox": [
                                        105,
                                        687,
                                        530,
                                        740
                                    ],
                                    "type": "text",
                                    "content": ", but some, possibly random, approximation to it. For example, "
                                },
                                {
                                    "bbox": [
                                        105,
                                        687,
                                        530,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "U_{t}"
                                },
                                {
                                    "bbox": [
                                        105,
                                        687,
                                        530,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " might be a noise- corrupted version of "
                                },
                                {
                                    "bbox": [
                                        105,
                                        687,
                                        530,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "v_{\\pi}(S_{t})"
                                },
                                {
                                    "bbox": [
                                        105,
                                        687,
                                        530,
                                        740
                                    ],
                                    "type": "text",
                                    "content": ", or it might be one of the bootstrapping targets using "
                                },
                                {
                                    "bbox": [
                                        105,
                                        687,
                                        530,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{v}"
                                },
                                {
                                    "bbox": [
                                        105,
                                        687,
                                        530,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " mentioned in the previous section. In"
                                }
                            ]
                        }
                    ],
                    "index": 7
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 4
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        64,
                        140,
                        490,
                        181
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                140,
                                490,
                                181
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        490,
                                        181
                                    ],
                                    "type": "text",
                                    "content": "these cases we cannot perform the exact update (9.5) because "
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        490,
                                        181
                                    ],
                                    "type": "inline_equation",
                                    "content": "v_{\\pi}(S_{t})"
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        490,
                                        181
                                    ],
                                    "type": "text",
                                    "content": " is unknown, but we can approximate it by substituting "
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        490,
                                        181
                                    ],
                                    "type": "inline_equation",
                                    "content": "U_{t}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        490,
                                        181
                                    ],
                                    "type": "text",
                                    "content": " in place of "
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        490,
                                        181
                                    ],
                                    "type": "inline_equation",
                                    "content": "v_{\\pi}(S_{t})"
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        490,
                                        181
                                    ],
                                    "type": "text",
                                    "content": ". This yields the following general SGD method for state- value prediction:"
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        91,
                        189,
                        489,
                        211
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                91,
                                189,
                                489,
                                211
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        91,
                                        189,
                                        489,
                                        211
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\mathbf{w}_{t + 1}\\doteq \\mathbf{w}_t + \\alpha \\Big[U_t - \\hat{v} (S_t,\\mathbf{w}_t)\\Big]\\nabla \\hat{v} (S_t,\\mathbf{w}_t). \\tag{9.7}",
                                    "image_path": "20c9722b69b66539ff8158be5afa2f386561501ad42a16ba92dea75a85e0a990.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        64,
                        219,
                        490,
                        261
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                219,
                                490,
                                261
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        219,
                                        490,
                                        261
                                    ],
                                    "type": "text",
                                    "content": "If "
                                },
                                {
                                    "bbox": [
                                        64,
                                        219,
                                        490,
                                        261
                                    ],
                                    "type": "inline_equation",
                                    "content": "U_{t}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        219,
                                        490,
                                        261
                                    ],
                                    "type": "text",
                                    "content": " is an unbiased estimate, that is, if "
                                },
                                {
                                    "bbox": [
                                        64,
                                        219,
                                        490,
                                        261
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbb{E}[U_t|S_t = s] = v_{\\pi}(s)"
                                },
                                {
                                    "bbox": [
                                        64,
                                        219,
                                        490,
                                        261
                                    ],
                                    "type": "text",
                                    "content": ", for each "
                                },
                                {
                                    "bbox": [
                                        64,
                                        219,
                                        490,
                                        261
                                    ],
                                    "type": "inline_equation",
                                    "content": "t"
                                },
                                {
                                    "bbox": [
                                        64,
                                        219,
                                        490,
                                        261
                                    ],
                                    "type": "text",
                                    "content": ", then "
                                },
                                {
                                    "bbox": [
                                        64,
                                        219,
                                        490,
                                        261
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}_t"
                                },
                                {
                                    "bbox": [
                                        64,
                                        219,
                                        490,
                                        261
                                    ],
                                    "type": "text",
                                    "content": " is guaranteed to converge to a local optimum under the usual stochastic approximation conditions (2.7) for decreasing "
                                },
                                {
                                    "bbox": [
                                        64,
                                        219,
                                        490,
                                        261
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\alpha"
                                },
                                {
                                    "bbox": [
                                        64,
                                        219,
                                        490,
                                        261
                                    ],
                                    "type": "text",
                                    "content": "."
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        64,
                        261,
                        490,
                        355
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                261,
                                490,
                                355
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        261,
                                        490,
                                        355
                                    ],
                                    "type": "text",
                                    "content": "For example, suppose the states in the examples are the states generated by interaction (or simulated interaction) with the environment using policy "
                                },
                                {
                                    "bbox": [
                                        64,
                                        261,
                                        490,
                                        355
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\pi"
                                },
                                {
                                    "bbox": [
                                        64,
                                        261,
                                        490,
                                        355
                                    ],
                                    "type": "text",
                                    "content": ". Because the true value of a state is the expected value of the return following it, the Monte Carlo target "
                                },
                                {
                                    "bbox": [
                                        64,
                                        261,
                                        490,
                                        355
                                    ],
                                    "type": "inline_equation",
                                    "content": "U_{t}\\doteq G_{t}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        261,
                                        490,
                                        355
                                    ],
                                    "type": "text",
                                    "content": " is by definition an unbiased estimate of "
                                },
                                {
                                    "bbox": [
                                        64,
                                        261,
                                        490,
                                        355
                                    ],
                                    "type": "inline_equation",
                                    "content": "v_{\\pi}(S_{t})"
                                },
                                {
                                    "bbox": [
                                        64,
                                        261,
                                        490,
                                        355
                                    ],
                                    "type": "text",
                                    "content": ". With this choice, the general SGD method (9.7) converges to a locally optimal approximation to "
                                },
                                {
                                    "bbox": [
                                        64,
                                        261,
                                        490,
                                        355
                                    ],
                                    "type": "inline_equation",
                                    "content": "v_{\\pi}(S_{t})"
                                },
                                {
                                    "bbox": [
                                        64,
                                        261,
                                        490,
                                        355
                                    ],
                                    "type": "text",
                                    "content": ". Thus, the gradient- descent version of Monte Carlo state- value prediction is guaranteed to find a locally optimal solution. Pseudocode for a complete algorithm is shown in the box below."
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        78,
                        368,
                        386,
                        382
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                78,
                                368,
                                386,
                                382
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        78,
                                        368,
                                        386,
                                        382
                                    ],
                                    "type": "text",
                                    "content": "Gradient Monte Carlo Algorithm for Estimating "
                                },
                                {
                                    "bbox": [
                                        78,
                                        368,
                                        386,
                                        382
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{v}\\approx v_{\\pi}"
                                }
                            ]
                        }
                    ],
                    "index": 4,
                    "level": 1
                },
                {
                    "bbox": [
                        77,
                        391,
                        393,
                        445
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                77,
                                391,
                                393,
                                445
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        77,
                                        391,
                                        393,
                                        445
                                    ],
                                    "type": "text",
                                    "content": "Input: the policy "
                                },
                                {
                                    "bbox": [
                                        77,
                                        391,
                                        393,
                                        445
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\pi"
                                },
                                {
                                    "bbox": [
                                        77,
                                        391,
                                        393,
                                        445
                                    ],
                                    "type": "text",
                                    "content": " to be evaluated  Input: a differentiable function "
                                },
                                {
                                    "bbox": [
                                        77,
                                        391,
                                        393,
                                        445
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{v}:\\mathcal{S}\\times \\mathbb{R}^{d}\\rightarrow \\mathbb{R}"
                                },
                                {
                                    "bbox": [
                                        77,
                                        391,
                                        393,
                                        445
                                    ],
                                    "type": "text",
                                    "content": "  Algorithm parameter: step size "
                                },
                                {
                                    "bbox": [
                                        77,
                                        391,
                                        393,
                                        445
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\alpha >0"
                                },
                                {
                                    "bbox": [
                                        77,
                                        391,
                                        393,
                                        445
                                    ],
                                    "type": "text",
                                    "content": "  Initialize value- function weights "
                                },
                                {
                                    "bbox": [
                                        77,
                                        391,
                                        393,
                                        445
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}\\in \\mathbb{R}^{d}"
                                },
                                {
                                    "bbox": [
                                        77,
                                        391,
                                        393,
                                        445
                                    ],
                                    "type": "text",
                                    "content": " arbitrarily (e.g., "
                                },
                                {
                                    "bbox": [
                                        77,
                                        391,
                                        393,
                                        445
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w} = \\mathbf{0}"
                                }
                            ]
                        }
                    ],
                    "index": 5
                },
                {
                    "bbox": [
                        78,
                        451,
                        233,
                        463
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                78,
                                451,
                                233,
                                463
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        78,
                                        451,
                                        233,
                                        463
                                    ],
                                    "type": "text",
                                    "content": "Loop forever (for each episode):"
                                }
                            ]
                        }
                    ],
                    "index": 6
                },
                {
                    "bbox": [
                        90,
                        464,
                        376,
                        506
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                90,
                                464,
                                376,
                                506
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        90,
                                        464,
                                        376,
                                        506
                                    ],
                                    "type": "text",
                                    "content": "Generate an episode "
                                },
                                {
                                    "bbox": [
                                        90,
                                        464,
                                        376,
                                        506
                                    ],
                                    "type": "inline_equation",
                                    "content": "S_{0},A_{0},R_{1},S_{1},A_{1},\\ldots ,R_{T},S_{T}"
                                },
                                {
                                    "bbox": [
                                        90,
                                        464,
                                        376,
                                        506
                                    ],
                                    "type": "text",
                                    "content": " using "
                                },
                                {
                                    "bbox": [
                                        90,
                                        464,
                                        376,
                                        506
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\pi"
                                },
                                {
                                    "bbox": [
                                        90,
                                        464,
                                        376,
                                        506
                                    ],
                                    "type": "text",
                                    "content": "  Loop for each step of episode, "
                                },
                                {
                                    "bbox": [
                                        90,
                                        464,
                                        376,
                                        506
                                    ],
                                    "type": "inline_equation",
                                    "content": "t = 0,1,\\ldots ,T - 1"
                                },
                                {
                                    "bbox": [
                                        90,
                                        464,
                                        376,
                                        506
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}\\leftarrow \\mathbf{w} + \\alpha \\big[G_t - \\hat{v} (S_t,\\mathbf{w})\\big]\\nabla \\hat{v} (S_t,\\mathbf{w})"
                                }
                            ]
                        }
                    ],
                    "index": 7
                },
                {
                    "bbox": [
                        64,
                        526,
                        490,
                        672
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                526,
                                490,
                                672
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        526,
                                        490,
                                        672
                                    ],
                                    "type": "text",
                                    "content": "One does not obtain the same guarantees if a bootstrapping estimate of "
                                },
                                {
                                    "bbox": [
                                        64,
                                        526,
                                        490,
                                        672
                                    ],
                                    "type": "inline_equation",
                                    "content": "v_{\\pi}(S_{t})"
                                },
                                {
                                    "bbox": [
                                        64,
                                        526,
                                        490,
                                        672
                                    ],
                                    "type": "text",
                                    "content": " is used as the target "
                                },
                                {
                                    "bbox": [
                                        64,
                                        526,
                                        490,
                                        672
                                    ],
                                    "type": "inline_equation",
                                    "content": "U_{t}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        526,
                                        490,
                                        672
                                    ],
                                    "type": "text",
                                    "content": " in (9.7). Bootstrapping targets such as "
                                },
                                {
                                    "bbox": [
                                        64,
                                        526,
                                        490,
                                        672
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        64,
                                        526,
                                        490,
                                        672
                                    ],
                                    "type": "text",
                                    "content": "- step returns "
                                },
                                {
                                    "bbox": [
                                        64,
                                        526,
                                        490,
                                        672
                                    ],
                                    "type": "inline_equation",
                                    "content": "G_{t:t + n}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        526,
                                        490,
                                        672
                                    ],
                                    "type": "text",
                                    "content": " or the DP target "
                                },
                                {
                                    "bbox": [
                                        64,
                                        526,
                                        490,
                                        672
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\sum_{a,s',r}\\pi (a|S_t)p(s',r|S_t,a)[r + \\gamma \\hat{v} (s',\\mathbf{w}_t)]"
                                },
                                {
                                    "bbox": [
                                        64,
                                        526,
                                        490,
                                        672
                                    ],
                                    "type": "text",
                                    "content": " all depend on the current value of the weight vector "
                                },
                                {
                                    "bbox": [
                                        64,
                                        526,
                                        490,
                                        672
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}_t"
                                },
                                {
                                    "bbox": [
                                        64,
                                        526,
                                        490,
                                        672
                                    ],
                                    "type": "text",
                                    "content": ", which implies that they will be biased and that they will not produce a true gradient- descent method. One way to look at this is that the key step from (9.4) to (9.5) relies on the target being independent of "
                                },
                                {
                                    "bbox": [
                                        64,
                                        526,
                                        490,
                                        672
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}_t"
                                },
                                {
                                    "bbox": [
                                        64,
                                        526,
                                        490,
                                        672
                                    ],
                                    "type": "text",
                                    "content": ". This step would not be valid if a bootstrapping estimate were used in place of "
                                },
                                {
                                    "bbox": [
                                        64,
                                        526,
                                        490,
                                        672
                                    ],
                                    "type": "inline_equation",
                                    "content": "v_{\\pi}(S_{t})"
                                },
                                {
                                    "bbox": [
                                        64,
                                        526,
                                        490,
                                        672
                                    ],
                                    "type": "text",
                                    "content": ". Bootstrapping methods are not in fact instances of true gradient descent (Barnard, 1993). They take into account the effect of changing the weight vector "
                                },
                                {
                                    "bbox": [
                                        64,
                                        526,
                                        490,
                                        672
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}_t"
                                },
                                {
                                    "bbox": [
                                        64,
                                        526,
                                        490,
                                        672
                                    ],
                                    "type": "text",
                                    "content": " on the estimate, but ignore its effect on the target. They include only a part of the gradient and, accordingly, we call them semi- gradient methods."
                                }
                            ]
                        }
                    ],
                    "index": 8
                },
                {
                    "bbox": [
                        64,
                        673,
                        490,
                        740
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                673,
                                490,
                                740
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        673,
                                        490,
                                        740
                                    ],
                                    "type": "text",
                                    "content": "Although semi- gradient (bootstrapping) methods do not converge as robustly as gradient methods, they do converge reliably in important cases such as the linear case discussed in the next section. Moreover, they offer important advantages that make them often clearly preferred. One reason for this is that they typically enable significantly faster learning, as we have seen in Chapters 6 and 7. Another is that they enable learning to"
                                }
                            ]
                        }
                    ],
                    "index": 9
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 5
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        104,
                        140,
                        530,
                        194
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                140,
                                530,
                                194
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        140,
                                        530,
                                        194
                                    ],
                                    "type": "text",
                                    "content": "be continual and online, without waiting for the end of an episode. This enables them to be used on continuing problems and provides computational advantages. A prototypical semi- gradient method is semi- gradient TD(0), which uses "
                                },
                                {
                                    "bbox": [
                                        104,
                                        140,
                                        530,
                                        194
                                    ],
                                    "type": "inline_equation",
                                    "content": "U_{t} \\doteq R_{t + 1} + \\gamma \\hat{v} (S_{t + 1},\\mathbf{w})"
                                },
                                {
                                    "bbox": [
                                        104,
                                        140,
                                        530,
                                        194
                                    ],
                                    "type": "text",
                                    "content": " as its target. Complete pseudocode for this method is given in the box below."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        117,
                        206,
                        354,
                        221
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                206,
                                354,
                                221
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        206,
                                        354,
                                        221
                                    ],
                                    "type": "text",
                                    "content": "Semi-gradient TD(0) for estimating "
                                },
                                {
                                    "bbox": [
                                        117,
                                        206,
                                        354,
                                        221
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{v} \\approx v_{\\pi}"
                                }
                            ]
                        }
                    ],
                    "index": 1,
                    "level": 1
                },
                {
                    "bbox": [
                        117,
                        230,
                        292,
                        244
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                230,
                                292,
                                244
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        230,
                                        292,
                                        244
                                    ],
                                    "type": "text",
                                    "content": "Input: the policy "
                                },
                                {
                                    "bbox": [
                                        117,
                                        230,
                                        292,
                                        244
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\pi"
                                },
                                {
                                    "bbox": [
                                        117,
                                        230,
                                        292,
                                        244
                                    ],
                                    "type": "text",
                                    "content": " to be evaluated"
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        117,
                        244,
                        489,
                        257
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                244,
                                489,
                                257
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        244,
                                        489,
                                        257
                                    ],
                                    "type": "text",
                                    "content": "Input: a differentiable function "
                                },
                                {
                                    "bbox": [
                                        117,
                                        244,
                                        489,
                                        257
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{v}: S^{+} \\times \\mathbb{R}^{d} \\to \\mathbb{R}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        244,
                                        489,
                                        257
                                    ],
                                    "type": "text",
                                    "content": " such that "
                                },
                                {
                                    "bbox": [
                                        117,
                                        244,
                                        489,
                                        257
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{v} (\\text{terminal}, \\cdot) = 0"
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        117,
                        257,
                        309,
                        270
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                257,
                                309,
                                270
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        257,
                                        309,
                                        270
                                    ],
                                    "type": "text",
                                    "content": "Algorithm parameter: step size "
                                },
                                {
                                    "bbox": [
                                        117,
                                        257,
                                        309,
                                        270
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\alpha > 0"
                                }
                            ]
                        }
                    ],
                    "index": 4
                },
                {
                    "bbox": [
                        117,
                        270,
                        432,
                        284
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                270,
                                432,
                                284
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        270,
                                        432,
                                        284
                                    ],
                                    "type": "text",
                                    "content": "Initialize value- function weights "
                                },
                                {
                                    "bbox": [
                                        117,
                                        270,
                                        432,
                                        284
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w} \\in \\mathbb{R}^{d}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        270,
                                        432,
                                        284
                                    ],
                                    "type": "text",
                                    "content": " arbitrarily (e.g., "
                                },
                                {
                                    "bbox": [
                                        117,
                                        270,
                                        432,
                                        284
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w} = \\mathbf{0}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        270,
                                        432,
                                        284
                                    ],
                                    "type": "text",
                                    "content": ")"
                                }
                            ]
                        }
                    ],
                    "index": 5
                },
                {
                    "bbox": [
                        117,
                        290,
                        228,
                        303
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                290,
                                228,
                                303
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        290,
                                        228,
                                        303
                                    ],
                                    "type": "text",
                                    "content": "Loop for each episode:"
                                }
                            ]
                        }
                    ],
                    "index": 6
                },
                {
                    "bbox": [
                        129,
                        304,
                        186,
                        316
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                129,
                                304,
                                186,
                                316
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        129,
                                        304,
                                        186,
                                        316
                                    ],
                                    "type": "text",
                                    "content": "Initialize "
                                },
                                {
                                    "bbox": [
                                        129,
                                        304,
                                        186,
                                        316
                                    ],
                                    "type": "inline_equation",
                                    "content": "S"
                                }
                            ]
                        }
                    ],
                    "index": 7
                },
                {
                    "bbox": [
                        132,
                        318,
                        277,
                        330
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                132,
                                318,
                                277,
                                330
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        132,
                                        318,
                                        277,
                                        330
                                    ],
                                    "type": "text",
                                    "content": "Loop for each step of episode:"
                                }
                            ]
                        }
                    ],
                    "index": 8
                },
                {
                    "bbox": [
                        148,
                        330,
                        239,
                        343
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                148,
                                330,
                                239,
                                343
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        148,
                                        330,
                                        239,
                                        343
                                    ],
                                    "type": "text",
                                    "content": "Choose "
                                },
                                {
                                    "bbox": [
                                        148,
                                        330,
                                        239,
                                        343
                                    ],
                                    "type": "inline_equation",
                                    "content": "A \\sim \\pi (\\cdot |S)"
                                }
                            ]
                        }
                    ],
                    "index": 9
                },
                {
                    "bbox": [
                        148,
                        344,
                        286,
                        356
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                148,
                                344,
                                286,
                                356
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        148,
                                        344,
                                        286,
                                        356
                                    ],
                                    "type": "text",
                                    "content": "Take action "
                                },
                                {
                                    "bbox": [
                                        148,
                                        344,
                                        286,
                                        356
                                    ],
                                    "type": "inline_equation",
                                    "content": "A"
                                },
                                {
                                    "bbox": [
                                        148,
                                        344,
                                        286,
                                        356
                                    ],
                                    "type": "text",
                                    "content": ", observe "
                                },
                                {
                                    "bbox": [
                                        148,
                                        344,
                                        286,
                                        356
                                    ],
                                    "type": "inline_equation",
                                    "content": "R, S'"
                                }
                            ]
                        }
                    ],
                    "index": 10
                },
                {
                    "bbox": [
                        147,
                        357,
                        370,
                        371
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                147,
                                357,
                                370,
                                371
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        147,
                                        357,
                                        370,
                                        371
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\mathbf{w} \\leftarrow \\mathbf{w} + \\alpha \\big[R + \\gamma \\hat{v} (S', \\mathbf{w}) - \\hat{v} (S, \\mathbf{w})\\big] \\nabla \\hat{v} (S, \\mathbf{w})",
                                    "image_path": "c548e66abda4666c81af77f2392b6ad64bca8039db803d866f9cba06a5aa003f.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 11
                },
                {
                    "bbox": [
                        142,
                        371,
                        185,
                        382
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                142,
                                371,
                                185,
                                382
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        142,
                                        371,
                                        185,
                                        382
                                    ],
                                    "type": "inline_equation",
                                    "content": "S \\leftarrow S'"
                                }
                            ]
                        }
                    ],
                    "index": 12
                },
                {
                    "bbox": [
                        132,
                        383,
                        223,
                        395
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                132,
                                383,
                                223,
                                395
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        132,
                                        383,
                                        223,
                                        395
                                    ],
                                    "type": "text",
                                    "content": "until "
                                },
                                {
                                    "bbox": [
                                        132,
                                        383,
                                        223,
                                        395
                                    ],
                                    "type": "inline_equation",
                                    "content": "S"
                                },
                                {
                                    "bbox": [
                                        132,
                                        383,
                                        223,
                                        395
                                    ],
                                    "type": "text",
                                    "content": " is terminal"
                                }
                            ]
                        }
                    ],
                    "index": 13
                },
                {
                    "bbox": [
                        104,
                        417,
                        530,
                        496
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                417,
                                530,
                                496
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        417,
                                        530,
                                        496
                                    ],
                                    "type": "text",
                                    "content": "State aggregation is a simple form of generalizing function approximation in which states are grouped together, with one estimated value (one component of the weight vector "
                                },
                                {
                                    "bbox": [
                                        104,
                                        417,
                                        530,
                                        496
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        417,
                                        530,
                                        496
                                    ],
                                    "type": "text",
                                    "content": ") for each group. The value of a state is estimated as its group's component, and when the state is updated, that component alone is updated. State aggregation is a special case of SGD (9.7) in which the gradient, "
                                },
                                {
                                    "bbox": [
                                        104,
                                        417,
                                        530,
                                        496
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\nabla \\hat{v} (S_{t}, \\mathbf{w}_{t})"
                                },
                                {
                                    "bbox": [
                                        104,
                                        417,
                                        530,
                                        496
                                    ],
                                    "type": "text",
                                    "content": ", is 1 for "
                                },
                                {
                                    "bbox": [
                                        104,
                                        417,
                                        530,
                                        496
                                    ],
                                    "type": "inline_equation",
                                    "content": "S_{t}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        417,
                                        530,
                                        496
                                    ],
                                    "type": "text",
                                    "content": "'s group's component and 0 for the other components."
                                }
                            ]
                        }
                    ],
                    "index": 14
                },
                {
                    "bbox": [
                        104,
                        500,
                        530,
                        659
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                500,
                                530,
                                659
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        500,
                                        530,
                                        659
                                    ],
                                    "type": "text",
                                    "content": "Example 9.1: State Aggregation on the 1000- state Random Walk Consider a 1000- state version of the random walk task (Examples 6.2 and 7.1 on pages 125 and 144). The states are numbered from 1 to 1000, left to right, and all episodes begin near the center, in state 500. State transitions are from the current state to one of the 100 neighboring states to its left, or to one of the 100 neighboring states to its right, all with equal probability. Of course, if the current state is near an edge, then there may be fewer than 100 neighbors on that side of it. In this case, all the probability that would have gone into those missing neighbors goes into the probability of terminating on that side (thus, state 1 has a 0.5 chance of terminating on the left, and state 950 has a 0.25 chance of terminating on the right). As usual, termination on the left produces a reward of "
                                },
                                {
                                    "bbox": [
                                        104,
                                        500,
                                        530,
                                        659
                                    ],
                                    "type": "inline_equation",
                                    "content": "- 1"
                                },
                                {
                                    "bbox": [
                                        104,
                                        500,
                                        530,
                                        659
                                    ],
                                    "type": "text",
                                    "content": ", and termination on the right produces a reward of "
                                },
                                {
                                    "bbox": [
                                        104,
                                        500,
                                        530,
                                        659
                                    ],
                                    "type": "inline_equation",
                                    "content": "+1"
                                },
                                {
                                    "bbox": [
                                        104,
                                        500,
                                        530,
                                        659
                                    ],
                                    "type": "text",
                                    "content": ". All other transitions have a reward of zero. We use this task as a running example throughout this section."
                                }
                            ]
                        }
                    ],
                    "index": 15
                },
                {
                    "bbox": [
                        104,
                        660,
                        530,
                        740
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                660,
                                530,
                                740
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        660,
                                        530,
                                        740
                                    ],
                                    "type": "text",
                                    "content": "Figure 9.1 shows the true value function "
                                },
                                {
                                    "bbox": [
                                        104,
                                        660,
                                        530,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "v_{\\pi}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        660,
                                        530,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " for this task. It is nearly a straight line, curving very slightly toward the horizontal for the last 100 states at each end. Also shown is the final approximate value function learned by the gradient Monte- Carlo algorithm with state aggregation after 100,000 episodes with a step size of "
                                },
                                {
                                    "bbox": [
                                        104,
                                        660,
                                        530,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\alpha = 2 \\times 10^{- 5}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        660,
                                        530,
                                        740
                                    ],
                                    "type": "text",
                                    "content": ". For the state aggregation, the 1000 states were partitioned into 10 groups of 100 states each (i.e., states 1- 100 were one group, states 101- 200 were another, and so on). The staircase effect"
                                }
                            ]
                        }
                    ],
                    "index": 16
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 6
        },
        {
            "para_blocks": [
                {
                    "type": "image",
                    "bbox": [
                        121,
                        143,
                        431,
                        303
                    ],
                    "blocks": [
                        {
                            "bbox": [
                                121,
                                143,
                                431,
                                303
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        121,
                                        143,
                                        431,
                                        303
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                121,
                                                143,
                                                431,
                                                303
                                            ],
                                            "type": "image",
                                            "image_path": "2d3826af6a73d40a1b1a3f6ac9c4c0073c42b94e5f57e5c8d3ea7f4e44ba041a.jpg"
                                        }
                                    ]
                                }
                            ],
                            "index": 0,
                            "type": "image_body"
                        },
                        {
                            "bbox": [
                                64,
                                314,
                                490,
                                338
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        64,
                                        314,
                                        490,
                                        338
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                64,
                                                314,
                                                490,
                                                338
                                            ],
                                            "type": "text",
                                            "content": "Figure 9.1: Function approximation by state aggregation on the 1000-state random walk task, using the gradient Monte Carlo algorithm (page 202)."
                                        }
                                    ]
                                }
                            ],
                            "index": 1,
                            "type": "image_caption"
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        64,
                        377,
                        489,
                        416
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                377,
                                489,
                                416
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        377,
                                        489,
                                        416
                                    ],
                                    "type": "text",
                                    "content": "shown in the figure is typical of state aggregation; within each group, the approximate value is constant, and it changes abruptly from one group to the next. These approximate values are close to the global minimum of the "
                                },
                                {
                                    "bbox": [
                                        64,
                                        377,
                                        489,
                                        416
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\overline{\\mathrm{VE}}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        377,
                                        489,
                                        416
                                    ],
                                    "type": "text",
                                    "content": " (9.1)."
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        64,
                        418,
                        490,
                        603
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                418,
                                490,
                                603
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        603
                                    ],
                                    "type": "text",
                                    "content": "Some of the details of the approximate values are best appreciated by reference to the state distribution "
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        603
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mu"
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        603
                                    ],
                                    "type": "text",
                                    "content": " for this task, shown in the lower portion of the figure with a right- side scale. State 500, in the center, is the first state of every episode, but is rarely visited again. On average, about "
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        603
                                    ],
                                    "type": "inline_equation",
                                    "content": "1.37\\%"
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        603
                                    ],
                                    "type": "text",
                                    "content": " of the time steps are spent in the start state. The states reachable in one step from the start state are the second most visited, with about "
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        603
                                    ],
                                    "type": "inline_equation",
                                    "content": "0.17\\%"
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        603
                                    ],
                                    "type": "text",
                                    "content": " of the time steps being spent in each of them. From there "
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        603
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mu"
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        603
                                    ],
                                    "type": "text",
                                    "content": " falls off almost linearly, reaching about "
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        603
                                    ],
                                    "type": "inline_equation",
                                    "content": "0.0147\\%"
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        603
                                    ],
                                    "type": "text",
                                    "content": " at the extreme states 1 and 1000. The most visible effect of the distribution is on the leftmost groups, whose values are clearly shifted higher than the unweighted average of the true values of states within the group, and on the rightmost groups, whose values are clearly shifted lower. This is due to the states in these areas having the greatest asymmetry in their weightings by "
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        603
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mu"
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        603
                                    ],
                                    "type": "text",
                                    "content": ". For example, in the leftmost group, state 100 is weighted more than 3 times more strongly than state 1. Thus the estimate for the group is based toward the true value of state 100, which is higher than the true value of state 1."
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        64,
                        652,
                        231,
                        669
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                652,
                                231,
                                669
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        652,
                                        231,
                                        669
                                    ],
                                    "type": "text",
                                    "content": "9.4 Linear Methods"
                                }
                            ]
                        }
                    ],
                    "index": 4,
                    "level": 1
                },
                {
                    "bbox": [
                        64,
                        687,
                        489,
                        740
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                687,
                                489,
                                740
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        687,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": "One of the most important special cases of function approximation is that in which the approximate function, "
                                },
                                {
                                    "bbox": [
                                        64,
                                        687,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{v} (\\cdot ,\\mathbf{w})"
                                },
                                {
                                    "bbox": [
                                        64,
                                        687,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": ", is a linear function of the weight vector, "
                                },
                                {
                                    "bbox": [
                                        64,
                                        687,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        687,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": ". Corresponding to every state "
                                },
                                {
                                    "bbox": [
                                        64,
                                        687,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        64,
                                        687,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": ", there is a real- valued vector "
                                },
                                {
                                    "bbox": [
                                        64,
                                        687,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{x}(s) \\doteq (x_{1}(s), x_{2}(s), \\ldots , x_{d}(s))^{\\top}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        687,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": ", with the same number of components as "
                                },
                                {
                                    "bbox": [
                                        64,
                                        687,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        687,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": ". Linear methods approximate the state- value function"
                                }
                            ]
                        }
                    ],
                    "index": 5
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 7
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        103,
                        140,
                        311,
                        154
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                103,
                                140,
                                311,
                                154
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        103,
                                        140,
                                        311,
                                        154
                                    ],
                                    "type": "text",
                                    "content": "by the inner product between "
                                },
                                {
                                    "bbox": [
                                        103,
                                        140,
                                        311,
                                        154
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}"
                                },
                                {
                                    "bbox": [
                                        103,
                                        140,
                                        311,
                                        154
                                    ],
                                    "type": "text",
                                    "content": " and "
                                },
                                {
                                    "bbox": [
                                        103,
                                        140,
                                        311,
                                        154
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{x}(s)"
                                },
                                {
                                    "bbox": [
                                        103,
                                        140,
                                        311,
                                        154
                                    ],
                                    "type": "text",
                                    "content": ":"
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        132,
                        159,
                        528,
                        197
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                132,
                                159,
                                528,
                                197
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        132,
                                        159,
                                        528,
                                        197
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\hat{v} (s,\\mathbf{w})\\doteq \\mathbf{w}^{\\top}\\mathbf{x}(s)\\doteq \\sum_{i = 1}^{d}w_{i}x_{i}(s). \\tag{9.8}",
                                    "image_path": "34e468409b79cd5e298c489d2165d4fabc803abcbe2e3669a38da8bf8d024304.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        103,
                        202,
                        529,
                        229
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                103,
                                202,
                                529,
                                229
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        103,
                                        202,
                                        529,
                                        229
                                    ],
                                    "type": "text",
                                    "content": "In this case the approximate value function is said to be linear in the weights, or simply linear."
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        104,
                        230,
                        530,
                        323
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                230,
                                530,
                                323
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        230,
                                        530,
                                        323
                                    ],
                                    "type": "text",
                                    "content": "The vector "
                                },
                                {
                                    "bbox": [
                                        104,
                                        230,
                                        530,
                                        323
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{x}(s)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        230,
                                        530,
                                        323
                                    ],
                                    "type": "text",
                                    "content": " is called a feature vector representing state "
                                },
                                {
                                    "bbox": [
                                        104,
                                        230,
                                        530,
                                        323
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        104,
                                        230,
                                        530,
                                        323
                                    ],
                                    "type": "text",
                                    "content": ". Each component "
                                },
                                {
                                    "bbox": [
                                        104,
                                        230,
                                        530,
                                        323
                                    ],
                                    "type": "inline_equation",
                                    "content": "x_{i}(s)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        230,
                                        530,
                                        323
                                    ],
                                    "type": "text",
                                    "content": " of "
                                },
                                {
                                    "bbox": [
                                        104,
                                        230,
                                        530,
                                        323
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{x}(s)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        230,
                                        530,
                                        323
                                    ],
                                    "type": "text",
                                    "content": " is the value of a function "
                                },
                                {
                                    "bbox": [
                                        104,
                                        230,
                                        530,
                                        323
                                    ],
                                    "type": "inline_equation",
                                    "content": "x_{i}:\\mathcal{S}\\rightarrow \\mathbb{R}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        230,
                                        530,
                                        323
                                    ],
                                    "type": "text",
                                    "content": ". We think of a feature as the entirety of one of these functions, and we call its value for a state "
                                },
                                {
                                    "bbox": [
                                        104,
                                        230,
                                        530,
                                        323
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        104,
                                        230,
                                        530,
                                        323
                                    ],
                                    "type": "text",
                                    "content": " a feature of "
                                },
                                {
                                    "bbox": [
                                        104,
                                        230,
                                        530,
                                        323
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        104,
                                        230,
                                        530,
                                        323
                                    ],
                                    "type": "text",
                                    "content": ". For linear methods, features are basis functions because they form a linear basis for the set of approximate functions. Constructing "
                                },
                                {
                                    "bbox": [
                                        104,
                                        230,
                                        530,
                                        323
                                    ],
                                    "type": "inline_equation",
                                    "content": "d"
                                },
                                {
                                    "bbox": [
                                        104,
                                        230,
                                        530,
                                        323
                                    ],
                                    "type": "text",
                                    "content": "- dimensional feature vectors to represent states is the same as selecting a set of "
                                },
                                {
                                    "bbox": [
                                        104,
                                        230,
                                        530,
                                        323
                                    ],
                                    "type": "inline_equation",
                                    "content": "d"
                                },
                                {
                                    "bbox": [
                                        104,
                                        230,
                                        530,
                                        323
                                    ],
                                    "type": "text",
                                    "content": " basis functions. Features may be defined in many different ways; we cover a few possibilities in the next sections."
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        103,
                        324,
                        530,
                        351
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                103,
                                324,
                                530,
                                351
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        103,
                                        324,
                                        530,
                                        351
                                    ],
                                    "type": "text",
                                    "content": "It is natural to use SGD updates with linear function approximation. The gradient of the approximate value function with respect to "
                                },
                                {
                                    "bbox": [
                                        103,
                                        324,
                                        530,
                                        351
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}"
                                },
                                {
                                    "bbox": [
                                        103,
                                        324,
                                        530,
                                        351
                                    ],
                                    "type": "text",
                                    "content": " in this case is"
                                }
                            ]
                        }
                    ],
                    "index": 4
                },
                {
                    "bbox": [
                        132,
                        359,
                        211,
                        372
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                132,
                                359,
                                211,
                                372
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        132,
                                        359,
                                        211,
                                        372
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\nabla \\hat{v} (s,\\mathbf{w}) = \\mathbf{x}(s).",
                                    "image_path": "572b06cbc591ba2c68590f09d634f5a174128270f6a22c76c240864139e129f9.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 5
                },
                {
                    "bbox": [
                        103,
                        378,
                        529,
                        405
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                103,
                                378,
                                529,
                                405
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        103,
                                        378,
                                        529,
                                        405
                                    ],
                                    "type": "text",
                                    "content": "Thus, in the linear case the general SGD update (9.7) reduces to a particularly simple form:"
                                }
                            ]
                        }
                    ],
                    "index": 6
                },
                {
                    "bbox": [
                        133,
                        410,
                        311,
                        431
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                133,
                                410,
                                311,
                                431
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        133,
                                        410,
                                        311,
                                        431
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\mathbf{w}_{t + 1}\\doteq \\mathbf{w}_t + \\alpha \\Big[U_t - \\epsilon (S_t,\\mathbf{w}_t)\\Big]\\mathbf{x}(S_t).",
                                    "image_path": "cd4efd95e305bd416b80e511c9b4ce9c6a9e13209ef15d198a36b3ccfde11686.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 7
                },
                {
                    "bbox": [
                        104,
                        436,
                        530,
                        476
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                436,
                                530,
                                476
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        436,
                                        530,
                                        476
                                    ],
                                    "type": "text",
                                    "content": "Because it is so simple, the linear SGD case is one of the most favorable for mathematical analysis. Almost all useful convergence results for learning systems of all kinds are for linear (or simpler) function approximation methods."
                                }
                            ]
                        }
                    ],
                    "index": 8
                },
                {
                    "bbox": [
                        104,
                        477,
                        530,
                        556
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                477,
                                530,
                                556
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        477,
                                        530,
                                        556
                                    ],
                                    "type": "text",
                                    "content": "In particular, in the linear case there is only one optimum (or, in degenerate cases, one set of equally good optima), and thus any method that is guaranteed to converge to or near a local optimum is automatically guaranteed to converge to or near the global optimum. For example, the gradient Monte Carlo algorithm presented in the previous section converges to the global optimum of the "
                                },
                                {
                                    "bbox": [
                                        104,
                                        477,
                                        530,
                                        556
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\overline{\\mathrm{VE}}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        477,
                                        530,
                                        556
                                    ],
                                    "type": "text",
                                    "content": " under linear function approximation if "
                                },
                                {
                                    "bbox": [
                                        104,
                                        477,
                                        530,
                                        556
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\alpha"
                                },
                                {
                                    "bbox": [
                                        104,
                                        477,
                                        530,
                                        556
                                    ],
                                    "type": "text",
                                    "content": " is reduced over time according to the usual conditions."
                                }
                            ]
                        }
                    ],
                    "index": 9
                },
                {
                    "bbox": [
                        104,
                        557,
                        530,
                        637
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                557,
                                530,
                                637
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        557,
                                        530,
                                        637
                                    ],
                                    "type": "text",
                                    "content": "The semi- gradient "
                                },
                                {
                                    "bbox": [
                                        104,
                                        557,
                                        530,
                                        637
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathrm{TD}(0)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        557,
                                        530,
                                        637
                                    ],
                                    "type": "text",
                                    "content": " algorithm presented in the previous section also converges under linear function approximation, but this does not follow from general results on SGD; a separate theorem is necessary. The weight vector converged to is also not the global optimum, but rather a point near the local optimum. It is useful to consider this important case in more detail, specifically for the continuing case. The update at each time "
                                },
                                {
                                    "bbox": [
                                        104,
                                        557,
                                        530,
                                        637
                                    ],
                                    "type": "inline_equation",
                                    "content": "t"
                                },
                                {
                                    "bbox": [
                                        104,
                                        557,
                                        530,
                                        637
                                    ],
                                    "type": "text",
                                    "content": " is"
                                }
                            ]
                        }
                    ],
                    "index": 10
                },
                {
                    "bbox": [
                        130,
                        639,
                        528,
                        689
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                130,
                                639,
                                528,
                                689
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        130,
                                        639,
                                        528,
                                        689
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\begin{array}{rl} & {\\mathbf{w}_{t + 1}\\doteq \\mathbf{w}_t + \\alpha \\Big(R_{t + 1} + \\gamma \\mathbf{w}_t^{\\top}\\mathbf{x}_{t + 1} - \\mathbf{w}_t^{\\top}\\mathbf{x}_t\\Big)\\mathbf{x}_t}\\\\ & {\\qquad = \\mathbf{w}_t + \\alpha \\Big(R_{t + 1}\\mathbf{x}_t - \\mathbf{x}_t\\big(\\mathbf{x}_t - \\gamma \\mathbf{x}_{t + 1}\\big)^{\\top}\\mathbf{w}_t\\Big),} \\end{array} \\tag{9.9}",
                                    "image_path": "7a1a750a7d36217b6f6c38c0dbdc53e4c3cead97951362a2621423e88989c97e.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 11
                },
                {
                    "bbox": [
                        102,
                        692,
                        530,
                        719
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                102,
                                692,
                                530,
                                719
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        102,
                                        692,
                                        530,
                                        719
                                    ],
                                    "type": "text",
                                    "content": "where here we have used the notational shorthand "
                                },
                                {
                                    "bbox": [
                                        102,
                                        692,
                                        530,
                                        719
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{x}_t = \\mathbf{x}(S_t)"
                                },
                                {
                                    "bbox": [
                                        102,
                                        692,
                                        530,
                                        719
                                    ],
                                    "type": "text",
                                    "content": ". Once the system has reached steady state, for any given "
                                },
                                {
                                    "bbox": [
                                        102,
                                        692,
                                        530,
                                        719
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}_t"
                                },
                                {
                                    "bbox": [
                                        102,
                                        692,
                                        530,
                                        719
                                    ],
                                    "type": "text",
                                    "content": ", the expected next weight vector can be written"
                                }
                            ]
                        }
                    ],
                    "index": 12
                },
                {
                    "bbox": [
                        131,
                        726,
                        528,
                        740
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                131,
                                726,
                                528,
                                740
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        131,
                                        726,
                                        528,
                                        740
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\mathbb{E}[\\mathbf{w}_{t + 1}|\\mathbf{w}_t] = \\mathbf{w}_t + \\alpha (\\mathbf{b} - \\mathbf{A}\\mathbf{w}_t), \\tag{9.10}",
                                    "image_path": "9906dbb71c39f10c4d07e5e5ed069baaec78f7057a7c6a9e395f00ae355b064e.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 13
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 8
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        63,
                        141,
                        94,
                        153
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                63,
                                141,
                                94,
                                153
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        63,
                                        141,
                                        94,
                                        153
                                    ],
                                    "type": "text",
                                    "content": "where"
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        91,
                        157,
                        489,
                        181
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                91,
                                157,
                                489,
                                181
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        91,
                                        157,
                                        489,
                                        181
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\mathbf{b} \\doteq \\mathbb{E}[R_{t + 1} \\mathbf{x}_t] \\in \\mathbb{R}^d \\quad \\text{and} \\quad \\mathbf{A} \\doteq \\mathbb{E}\\left[\\mathbf{x}_t \\left(\\mathbf{x}_t - \\gamma \\mathbf{x}_{t + 1}\\right)^\\top \\right] \\in \\mathbb{R}^{d \\times d} \\tag{9.11}",
                                    "image_path": "f0cf9dbaece6bd18909d1bc2100d66591b45d822c64e414da82ab24be941cf01.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        63,
                        187,
                        489,
                        213
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                63,
                                187,
                                489,
                                213
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        63,
                                        187,
                                        489,
                                        213
                                    ],
                                    "type": "text",
                                    "content": "From (9.10) it is clear that, if the system converges, it must converge to the weight vector "
                                },
                                {
                                    "bbox": [
                                        63,
                                        187,
                                        489,
                                        213
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}_{\\mathrm{TD}}"
                                },
                                {
                                    "bbox": [
                                        63,
                                        187,
                                        489,
                                        213
                                    ],
                                    "type": "text",
                                    "content": " at which"
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        93,
                        218,
                        488,
                        267
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                93,
                                218,
                                488,
                                267
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        93,
                                        218,
                                        488,
                                        267
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\begin{array}{r l} & {\\mathbf{b} - \\mathbf{A}\\mathbf{w}_{\\mathrm{TD}} = \\mathbf{0}}\\\\ & {\\Rightarrow \\mathbf{b} = \\mathbf{A}\\mathbf{w}_{\\mathrm{TD}}}\\\\ & {\\Rightarrow \\mathbf{w}_{\\mathrm{TD}}\\doteq \\mathbf{A}^{-1}\\mathbf{b}.} \\end{array} \\tag{9.12}",
                                    "image_path": "5910f0768e0034717d59746cbc3cb889dfacfb026a915962a94df74a8c1804da.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        64,
                        271,
                        489,
                        313
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                271,
                                489,
                                313
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        271,
                                        489,
                                        313
                                    ],
                                    "type": "text",
                                    "content": "This quantity is called the "
                                },
                                {
                                    "bbox": [
                                        64,
                                        271,
                                        489,
                                        313
                                    ],
                                    "type": "inline_equation",
                                    "content": "TD"
                                },
                                {
                                    "bbox": [
                                        64,
                                        271,
                                        489,
                                        313
                                    ],
                                    "type": "text",
                                    "content": " fixed point. In fact linear semi- gradient "
                                },
                                {
                                    "bbox": [
                                        64,
                                        271,
                                        489,
                                        313
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathrm{TD}(0)"
                                },
                                {
                                    "bbox": [
                                        64,
                                        271,
                                        489,
                                        313
                                    ],
                                    "type": "text",
                                    "content": " converges to this point. Some of the theory proving its convergence, and the existence of the inverse above, is given in the box."
                                }
                            ]
                        }
                    ],
                    "index": 4
                },
                {
                    "bbox": [
                        76,
                        327,
                        292,
                        341
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                76,
                                327,
                                292,
                                341
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        76,
                                        327,
                                        292,
                                        341
                                    ],
                                    "type": "text",
                                    "content": "Proof of Convergence of Linear "
                                },
                                {
                                    "bbox": [
                                        76,
                                        327,
                                        292,
                                        341
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathrm{TD}(0)"
                                }
                            ]
                        }
                    ],
                    "index": 5,
                    "level": 1
                },
                {
                    "bbox": [
                        77,
                        352,
                        477,
                        379
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                77,
                                352,
                                477,
                                379
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        77,
                                        352,
                                        477,
                                        379
                                    ],
                                    "type": "text",
                                    "content": "What properties assure convergence of the linear "
                                },
                                {
                                    "bbox": [
                                        77,
                                        352,
                                        477,
                                        379
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathrm{TD}(0)"
                                },
                                {
                                    "bbox": [
                                        77,
                                        352,
                                        477,
                                        379
                                    ],
                                    "type": "text",
                                    "content": " algorithm (9.9)? Some insight can be gained by rewriting (9.10) as"
                                }
                            ]
                        }
                    ],
                    "index": 6
                },
                {
                    "bbox": [
                        105,
                        385,
                        474,
                        399
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                105,
                                385,
                                474,
                                399
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        105,
                                        385,
                                        474,
                                        399
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\mathbb{E}[\\mathbf{w}_{t + 1}|\\mathbf{w}_t] = (\\mathbf{I} - \\alpha \\mathbf{A})\\mathbf{w}_t + \\alpha \\mathbf{b}. \\tag{9.13}",
                                    "image_path": "4be6793fb1090376728fcef553c403d4ae0cce0d1785ed9d1665910ef94974e7.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 7
                },
                {
                    "bbox": [
                        77,
                        405,
                        476,
                        552
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                77,
                                405,
                                476,
                                552
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "text",
                                    "content": "Note that the matrix "
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{A}"
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "text",
                                    "content": " multiplies the weight vector "
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}_t"
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "text",
                                    "content": " and not "
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{b}"
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "text",
                                    "content": "; only "
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{A}"
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "text",
                                    "content": " is important to convergence. To develop intuition, consider the special case in which "
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{A}"
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "text",
                                    "content": " is a diagonal matrix. If any of the diagonal elements are negative, then the corresponding diagonal element of "
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{I} - \\alpha \\mathbf{A}"
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "text",
                                    "content": " will be greater than one, and the corresponding component of "
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}_t"
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "text",
                                    "content": " will be amplified, which will lead to divergence if continued. On the other hand, if the diagonal elements of "
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{A}"
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "text",
                                    "content": " are all positive, then "
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\alpha"
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "text",
                                    "content": " can be chosen smaller than one over the largest of them, such that "
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{I} - \\alpha \\mathbf{A}"
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "text",
                                    "content": " is diagonal with all diagonal elements between 0 and 1. In this case the first term of the update tends to shrink "
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}_t"
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "text",
                                    "content": ", and stability is assured. In general, "
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}_t"
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "text",
                                    "content": " will be reduced toward zero whenever "
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{A}"
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "text",
                                    "content": " is positive definite, meaning "
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "inline_equation",
                                    "content": "y^\\top \\mathbf{A}y > 0"
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "text",
                                    "content": " for any real vector "
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "inline_equation",
                                    "content": "y \\neq 0"
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "text",
                                    "content": ". Positive definiteness also ensures that the inverse "
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{A}^{- 1}"
                                },
                                {
                                    "bbox": [
                                        77,
                                        405,
                                        476,
                                        552
                                    ],
                                    "type": "text",
                                    "content": " exists."
                                }
                            ]
                        }
                    ],
                    "index": 8
                },
                {
                    "bbox": [
                        77,
                        552,
                        476,
                        578
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                77,
                                552,
                                476,
                                578
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        77,
                                        552,
                                        476,
                                        578
                                    ],
                                    "type": "text",
                                    "content": "For linear "
                                },
                                {
                                    "bbox": [
                                        77,
                                        552,
                                        476,
                                        578
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathrm{TD}(0)"
                                },
                                {
                                    "bbox": [
                                        77,
                                        552,
                                        476,
                                        578
                                    ],
                                    "type": "text",
                                    "content": ", in the continuing case with "
                                },
                                {
                                    "bbox": [
                                        77,
                                        552,
                                        476,
                                        578
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\gamma < 1"
                                },
                                {
                                    "bbox": [
                                        77,
                                        552,
                                        476,
                                        578
                                    ],
                                    "type": "text",
                                    "content": ", the "
                                },
                                {
                                    "bbox": [
                                        77,
                                        552,
                                        476,
                                        578
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{A}"
                                },
                                {
                                    "bbox": [
                                        77,
                                        552,
                                        476,
                                        578
                                    ],
                                    "type": "text",
                                    "content": " matrix (9.11) can be written"
                                }
                            ]
                        }
                    ],
                    "index": 9
                },
                {
                    "bbox": [
                        105,
                        581,
                        394,
                        693
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                105,
                                581,
                                394,
                                693
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        105,
                                        581,
                                        394,
                                        693
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\begin{array}{l}{{\\bf A} = \\sum_{s}\\mu (s)\\sum_{a}\\pi (a|s)\\sum_{r,s^{\\prime}}p(r,s^{\\prime}|s,a){\\bf x}(s)\\big({\\bf x}(s) - \\gamma{\\bf x}(s^{\\prime})\\big)^{\\top}}\\\\ {= \\sum_{s}\\mu (s)\\sum_{s^{\\prime}}p(s^{\\prime}|s){\\bf x}(s)\\big({\\bf x}(s) - \\gamma{\\bf x}(s^{\\prime})\\big)^{\\top}}\\\\ {= \\sum_{s}\\mu (s){\\bf x}(s)\\bigg({\\bf x}(s) - \\gamma \\sum_{s^{\\prime}}p(s^{\\prime}|s){\\bf x}(s^{\\prime})\\bigg)^{\\top}}\\\\ {= {\\bf X}^{\\top}{\\bf D}({\\bf I} - \\gamma{\\bf P}){\\bf X},} \\end{array}",
                                    "image_path": "13c1b8b20004b5fb026bbc3a4ee5e5f2f126519f1ee5953c1707cf1625c8d3a0.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 10
                },
                {
                    "bbox": [
                        77,
                        699,
                        477,
                        727
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                77,
                                699,
                                477,
                                727
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        77,
                                        699,
                                        477,
                                        727
                                    ],
                                    "type": "text",
                                    "content": "where "
                                },
                                {
                                    "bbox": [
                                        77,
                                        699,
                                        477,
                                        727
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mu (s)"
                                },
                                {
                                    "bbox": [
                                        77,
                                        699,
                                        477,
                                        727
                                    ],
                                    "type": "text",
                                    "content": " is the stationary distribution under "
                                },
                                {
                                    "bbox": [
                                        77,
                                        699,
                                        477,
                                        727
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\pi"
                                },
                                {
                                    "bbox": [
                                        77,
                                        699,
                                        477,
                                        727
                                    ],
                                    "type": "text",
                                    "content": ", "
                                },
                                {
                                    "bbox": [
                                        77,
                                        699,
                                        477,
                                        727
                                    ],
                                    "type": "inline_equation",
                                    "content": "p(s' | s)"
                                },
                                {
                                    "bbox": [
                                        77,
                                        699,
                                        477,
                                        727
                                    ],
                                    "type": "text",
                                    "content": " is the probability of transition from "
                                },
                                {
                                    "bbox": [
                                        77,
                                        699,
                                        477,
                                        727
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        77,
                                        699,
                                        477,
                                        727
                                    ],
                                    "type": "text",
                                    "content": " to "
                                },
                                {
                                    "bbox": [
                                        77,
                                        699,
                                        477,
                                        727
                                    ],
                                    "type": "inline_equation",
                                    "content": "s'"
                                },
                                {
                                    "bbox": [
                                        77,
                                        699,
                                        477,
                                        727
                                    ],
                                    "type": "text",
                                    "content": " under policy "
                                },
                                {
                                    "bbox": [
                                        77,
                                        699,
                                        477,
                                        727
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\pi"
                                },
                                {
                                    "bbox": [
                                        77,
                                        699,
                                        477,
                                        727
                                    ],
                                    "type": "text",
                                    "content": ", "
                                },
                                {
                                    "bbox": [
                                        77,
                                        699,
                                        477,
                                        727
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{P}"
                                },
                                {
                                    "bbox": [
                                        77,
                                        699,
                                        477,
                                        727
                                    ],
                                    "type": "text",
                                    "content": " is the "
                                },
                                {
                                    "bbox": [
                                        77,
                                        699,
                                        477,
                                        727
                                    ],
                                    "type": "inline_equation",
                                    "content": "|S| \\times |S|"
                                },
                                {
                                    "bbox": [
                                        77,
                                        699,
                                        477,
                                        727
                                    ],
                                    "type": "text",
                                    "content": " matrix of these probabilities,"
                                }
                            ]
                        }
                    ],
                    "index": 11
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 9
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        117,
                        145,
                        517,
                        186
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                145,
                                517,
                                186
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        145,
                                        517,
                                        186
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{D}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        145,
                                        517,
                                        186
                                    ],
                                    "type": "text",
                                    "content": " is the "
                                },
                                {
                                    "bbox": [
                                        117,
                                        145,
                                        517,
                                        186
                                    ],
                                    "type": "inline_equation",
                                    "content": "|\\mathcal{S}|\\times |\\mathcal{S}|"
                                },
                                {
                                    "bbox": [
                                        117,
                                        145,
                                        517,
                                        186
                                    ],
                                    "type": "text",
                                    "content": " diagonal matrix with the "
                                },
                                {
                                    "bbox": [
                                        117,
                                        145,
                                        517,
                                        186
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mu (s)"
                                },
                                {
                                    "bbox": [
                                        117,
                                        145,
                                        517,
                                        186
                                    ],
                                    "type": "text",
                                    "content": " on its diagonal, and "
                                },
                                {
                                    "bbox": [
                                        117,
                                        145,
                                        517,
                                        186
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{X}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        145,
                                        517,
                                        186
                                    ],
                                    "type": "text",
                                    "content": " is the "
                                },
                                {
                                    "bbox": [
                                        117,
                                        145,
                                        517,
                                        186
                                    ],
                                    "type": "inline_equation",
                                    "content": "|\\mathcal{S}|\\times d"
                                },
                                {
                                    "bbox": [
                                        117,
                                        145,
                                        517,
                                        186
                                    ],
                                    "type": "text",
                                    "content": " matrix with "
                                },
                                {
                                    "bbox": [
                                        117,
                                        145,
                                        517,
                                        186
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{x}(s)"
                                },
                                {
                                    "bbox": [
                                        117,
                                        145,
                                        517,
                                        186
                                    ],
                                    "type": "text",
                                    "content": " as its rows. From here it is clear that the inner matrix "
                                },
                                {
                                    "bbox": [
                                        117,
                                        145,
                                        517,
                                        186
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{D}(\\mathbf{I} - \\gamma \\mathbf{P})"
                                },
                                {
                                    "bbox": [
                                        117,
                                        145,
                                        517,
                                        186
                                    ],
                                    "type": "text",
                                    "content": " is key to determining the positive definiteness of "
                                },
                                {
                                    "bbox": [
                                        117,
                                        145,
                                        517,
                                        186
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{A}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        145,
                                        517,
                                        186
                                    ],
                                    "type": "text",
                                    "content": "."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        117,
                        186,
                        516,
                        399
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                186,
                                516,
                                399
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "text",
                                    "content": "For a key matrix of this form, positive definiteness is assured if all of its columns sum to a nonnegative number. This was shown by Sutton (1988, p. 27) based on two previously established theorems. One theorem says that any matrix "
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{M}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "text",
                                    "content": " is positive definite if and only if the symmetric matrix "
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{S} = \\mathbf{M} + \\mathbf{M}^{\\top}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "text",
                                    "content": " is positive definite (Sutton 1988, appendix). The second theorem says that any symmetric real matrix "
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{S}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "text",
                                    "content": " is positive definite if all of its diagonal entries are positive and greater than the sum of the absolute values of the corresponding off- diagonal entries (Varga 1962, p. 23). For our key matrix, "
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{D}(\\mathbf{I} - \\gamma \\mathbf{P})"
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "text",
                                    "content": ", the diagonal entries are positive and the off- diagonal entries are negative, so all we have to show is that each row sum plus the corresponding column sum is positive. The row sums are all positive because "
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{P}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "text",
                                    "content": " is a stochastic matrix and "
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\gamma < 1"
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "text",
                                    "content": ". Thus it only remains to show that the column sums are nonnegative. Note that the row vector of the column sums of any matrix "
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{M}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "text",
                                    "content": " can be written as "
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{1}^{\\top}\\mathbf{M}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "text",
                                    "content": ", where "
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{1}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "text",
                                    "content": " is the column vector with all components equal to 1. Let "
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mu"
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "text",
                                    "content": " denote the "
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "inline_equation",
                                    "content": "|\\mathcal{S}|"
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "text",
                                    "content": "- vector of the "
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mu (s)"
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "text",
                                    "content": ", where "
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mu = \\mathbf{P}^{\\top}\\mu"
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "text",
                                    "content": " by virtue of "
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mu"
                                },
                                {
                                    "bbox": [
                                        117,
                                        186,
                                        516,
                                        399
                                    ],
                                    "type": "text",
                                    "content": " being the stationary distribution. The column sums of our key matrix, then, are:"
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        145,
                        407,
                        516,
                        481
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                145,
                                407,
                                516,
                                481
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        145,
                                        407,
                                        516,
                                        481
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\begin{array}{rl}\\mathbf{1}^{\\top}\\mathbf{D}(\\mathbf{I} - \\gamma \\mathbf{P}) = \\pmb{\\mu}^{\\top}(\\mathbf{I} - \\gamma \\mathbf{P}) & \\\\ = \\pmb{\\mu}^{\\top} - \\gamma \\pmb{\\mu}^{\\top}\\mathbf{P} & \\\\ = \\pmb{\\mu}^{\\top} - \\gamma \\pmb{\\mu}^{\\top} & \\mathrm{(because~}\\pmb {\\mu}\\mathrm{~is~the~stationary~distribution)}\\\\ = (1 - \\gamma)\\pmb{\\mu}^{\\top}, & \\end{array}",
                                    "image_path": "a29cf3131adc34566d1e08c32860437d2d4fea3dfbb6779353e62092a56f4770.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        117,
                        489,
                        517,
                        543
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                489,
                                517,
                                543
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        489,
                                        517,
                                        543
                                    ],
                                    "type": "text",
                                    "content": "all components of which are positive. Thus, the key matrix and its "
                                },
                                {
                                    "bbox": [
                                        117,
                                        489,
                                        517,
                                        543
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{A}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        489,
                                        517,
                                        543
                                    ],
                                    "type": "text",
                                    "content": " matrix are positive definite, and on- policy "
                                },
                                {
                                    "bbox": [
                                        117,
                                        489,
                                        517,
                                        543
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathrm{TD}(0)"
                                },
                                {
                                    "bbox": [
                                        117,
                                        489,
                                        517,
                                        543
                                    ],
                                    "type": "text",
                                    "content": " is stable. (Additional conditions and a schedule for reducing "
                                },
                                {
                                    "bbox": [
                                        117,
                                        489,
                                        517,
                                        543
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\alpha"
                                },
                                {
                                    "bbox": [
                                        117,
                                        489,
                                        517,
                                        543
                                    ],
                                    "type": "text",
                                    "content": " over time are needed to prove convergence with probability one.)"
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        105,
                        563,
                        530,
                        591
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                105,
                                563,
                                530,
                                591
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        105,
                                        563,
                                        530,
                                        591
                                    ],
                                    "type": "text",
                                    "content": "At the TD fixed point, it has also been proven (in the continuing case) that the "
                                },
                                {
                                    "bbox": [
                                        105,
                                        563,
                                        530,
                                        591
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\overline{\\mathrm{VE}}"
                                },
                                {
                                    "bbox": [
                                        105,
                                        563,
                                        530,
                                        591
                                    ],
                                    "type": "text",
                                    "content": " is within a bounded expansion of the lowest possible error:"
                                }
                            ]
                        }
                    ],
                    "index": 4
                },
                {
                    "bbox": [
                        130,
                        598,
                        528,
                        627
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                130,
                                598,
                                528,
                                627
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        130,
                                        598,
                                        528,
                                        627
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\overline{\\mathrm{VE}} (\\mathbf{w}_{\\mathrm{TD}})\\leq \\frac{1}{1 - \\gamma}\\min_{\\mathbf{w}}\\overline{\\mathrm{VE}} (\\mathbf{w}). \\tag{9.14}",
                                    "image_path": "3feceec1639ee895013880606e0e8354307a12a79a87a294d5155efcd5513824.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 5
                },
                {
                    "bbox": [
                        104,
                        636,
                        530,
                        731
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                636,
                                530,
                                731
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        636,
                                        530,
                                        731
                                    ],
                                    "type": "text",
                                    "content": "That is, the asymptotic error of the TD method is no more than "
                                },
                                {
                                    "bbox": [
                                        104,
                                        636,
                                        530,
                                        731
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\frac{1}{1 - \\gamma}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        636,
                                        530,
                                        731
                                    ],
                                    "type": "text",
                                    "content": " times the smallest possible error, that attained in the limit by the Monte Carlo method. Because "
                                },
                                {
                                    "bbox": [
                                        104,
                                        636,
                                        530,
                                        731
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\gamma"
                                },
                                {
                                    "bbox": [
                                        104,
                                        636,
                                        530,
                                        731
                                    ],
                                    "type": "text",
                                    "content": " is often near one, this expansion factor can be quite large, so there is substantial potential loss in asymptotic performance with the TD method. On the other hand, recall that the TD methods are often of vastly reduced variance compared to Monte Carlo methods, and thus faster, as we saw in Chapters 6 and 7. Which method will be best depends on the nature of the approximation and problem, and on how long learning continues."
                                }
                            ]
                        }
                    ],
                    "index": 6
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 10
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        64,
                        141,
                        490,
                        260
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                141,
                                490,
                                260
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        141,
                                        490,
                                        260
                                    ],
                                    "type": "text",
                                    "content": "A bound analogous to (9.14) applies to other on- policy bootstrapping methods as well. For example, linear semi- gradient DP (Eq. 9.7 with "
                                },
                                {
                                    "bbox": [
                                        64,
                                        141,
                                        490,
                                        260
                                    ],
                                    "type": "inline_equation",
                                    "content": "U_{t} \\doteq \\sum_{a} \\pi (a|S_{t}) \\sum_{s^{\\prime} s} p(s^{\\prime}, r|S_{t}, a) [r + \\gamma \\hat{v} (s^{\\prime}, \\mathbf{w}_{t})]"
                                },
                                {
                                    "bbox": [
                                        64,
                                        141,
                                        490,
                                        260
                                    ],
                                    "type": "text",
                                    "content": ") with updates according to the on- policy distribution will also converge to the TD fixed point. One- step semi- gradient action- value methods, such as semi- gradient Sarsa(0) covered in the next chapter converge to an analogous fixed point and an analogous bound. For episodic tasks, there is a slightly different but related bound (see Bertsekas and Tsitsiklis, 1996). There are also a few technical conditions on the rewards, features, and decrease in the step- size parameter, which we have omitted here. The full details can be found in the original paper (Tsitsiklis and Van Roy, 1997)."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        64,
                        261,
                        490,
                        314
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                261,
                                490,
                                314
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        261,
                                        490,
                                        314
                                    ],
                                    "type": "text",
                                    "content": "Critical to these convergence results is that states are updated according to the on- policy distribution. For other update distributions, bootstrapping methods using function approximation may actually diverge to infinity. Examples of this and a discussion of possible solution methods are given in Chapter 11."
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        64,
                        319,
                        489,
                        412
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                319,
                                489,
                                412
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        319,
                                        489,
                                        412
                                    ],
                                    "type": "text",
                                    "content": "Example 9.2: Bootstrapping on the 1000- state Random Walk State aggregation is a special case of linear function approximation, so let's return to the 1000- state random walk to illustrate some of the observations made in this chapter. The left panel of Figure 9.2 shows the final value function learned by the semi- gradient TD(0) algorithm (page 203) using the same state aggregation as in Example 9.1. We see that the near- asymptotic TD approximation is indeed farther from the true values than the Monte Carlo approximation shown in Figure 9.1."
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        64,
                        414,
                        489,
                        506
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                414,
                                489,
                                506
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        414,
                                        489,
                                        506
                                    ],
                                    "type": "text",
                                    "content": "Nevertheless, TD methods retain large potential advantages in learning rate, and generalize Monte Carlo methods, as we investigated fully with "
                                },
                                {
                                    "bbox": [
                                        64,
                                        414,
                                        489,
                                        506
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        64,
                                        414,
                                        489,
                                        506
                                    ],
                                    "type": "text",
                                    "content": "- step TD methods in Chapter 7. The right panel of Figure 9.2 shows results with an "
                                },
                                {
                                    "bbox": [
                                        64,
                                        414,
                                        489,
                                        506
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        64,
                                        414,
                                        489,
                                        506
                                    ],
                                    "type": "text",
                                    "content": "- step semi- gradient TD method using state aggregation on the 1000- state random walk that are strikingly similar to those we obtained earlier with tabular methods and the 19- state random walk (Figure 7.2). To obtain such quantitatively similar results we switched the state aggregation to 20 groups of 50 states each. The 20 groups were then quantitatively close"
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "type": "image",
                    "bbox": [
                        63,
                        531,
                        493,
                        677
                    ],
                    "blocks": [
                        {
                            "bbox": [
                                63,
                                531,
                                493,
                                677
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        63,
                                        531,
                                        493,
                                        677
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                63,
                                                531,
                                                493,
                                                677
                                            ],
                                            "type": "image",
                                            "image_path": "d7fa49c6f7935e1955be9287592542bf8334ee1702a3f2c528b196875704c50a.jpg"
                                        }
                                    ]
                                }
                            ],
                            "index": 4,
                            "type": "image_body"
                        },
                        {
                            "bbox": [
                                64,
                                687,
                                490,
                                736
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        64,
                                        687,
                                        490,
                                        736
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                64,
                                                687,
                                                490,
                                                736
                                            ],
                                            "type": "text",
                                            "content": "Figure 9.2: Bootstrapping with state aggregation on the 1000-state random walk task. Left: Asymptotic values of semi-gradient TD are worse than the asymptotic Monte Carlo values in Figure 9.1. Right: Performance of "
                                        },
                                        {
                                            "bbox": [
                                                64,
                                                687,
                                                490,
                                                736
                                            ],
                                            "type": "inline_equation",
                                            "content": "n"
                                        },
                                        {
                                            "bbox": [
                                                64,
                                                687,
                                                490,
                                                736
                                            ],
                                            "type": "text",
                                            "content": "-step methods with state-aggregation are strikingly similar to those with tabular representations (cf. Figure 7.2). These data are averages over 100 runs."
                                        }
                                    ]
                                }
                            ],
                            "index": 5,
                            "type": "image_caption"
                        }
                    ],
                    "index": 4
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 11
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        104,
                        140,
                        530,
                        234
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                140,
                                530,
                                234
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        140,
                                        530,
                                        234
                                    ],
                                    "type": "text",
                                    "content": "to the 19 states of the tabular problem. In particular, recall that state transitions were up to 100 states to the left or right. A typical transition would then be of 50 states to the right or left, which is quantitatively analogous to the single- state state transitions of the 19- state tabular system. To complete the match, we use here the same performance measure—an unweighted average of the RMS error over all states and over the first 10 episodes—rather than a VE objective as is otherwise more appropriate when using function approximation."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        104,
                        243,
                        529,
                        283
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                243,
                                529,
                                283
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        243,
                                        529,
                                        283
                                    ],
                                    "type": "text",
                                    "content": "The semi- gradient "
                                },
                                {
                                    "bbox": [
                                        104,
                                        243,
                                        529,
                                        283
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        104,
                                        243,
                                        529,
                                        283
                                    ],
                                    "type": "text",
                                    "content": "- step TD algorithm used in the example above is the natural extension of the tabular "
                                },
                                {
                                    "bbox": [
                                        104,
                                        243,
                                        529,
                                        283
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        104,
                                        243,
                                        529,
                                        283
                                    ],
                                    "type": "text",
                                    "content": "- step TD algorithm presented in Chapter 7 to semi- gradient function approximation. Pseudocode is given in the box below."
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        117,
                        296,
                        374,
                        309
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                296,
                                374,
                                309
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        296,
                                        374,
                                        309
                                    ],
                                    "type": "text",
                                    "content": ""
                                },
                                {
                                    "bbox": [
                                        117,
                                        296,
                                        374,
                                        309
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        117,
                                        296,
                                        374,
                                        309
                                    ],
                                    "type": "text",
                                    "content": "-step semi-gradient TD for estimating "
                                },
                                {
                                    "bbox": [
                                        117,
                                        296,
                                        374,
                                        309
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{v} \\approx v_{\\pi}"
                                }
                            ]
                        }
                    ],
                    "index": 2,
                    "level": 1
                },
                {
                    "bbox": [
                        117,
                        319,
                        291,
                        331
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                319,
                                291,
                                331
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        319,
                                        291,
                                        331
                                    ],
                                    "type": "text",
                                    "content": "Input: the policy "
                                },
                                {
                                    "bbox": [
                                        117,
                                        319,
                                        291,
                                        331
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\pi"
                                },
                                {
                                    "bbox": [
                                        117,
                                        319,
                                        291,
                                        331
                                    ],
                                    "type": "text",
                                    "content": " to be evaluated"
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        117,
                        332,
                        488,
                        345
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                332,
                                488,
                                345
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        332,
                                        488,
                                        345
                                    ],
                                    "type": "text",
                                    "content": "Input: a differentiable function "
                                },
                                {
                                    "bbox": [
                                        117,
                                        332,
                                        488,
                                        345
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{v}: \\mathbb{S}^{+} \\times \\mathbb{R}^{d} \\to \\mathbb{R}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        332,
                                        488,
                                        345
                                    ],
                                    "type": "text",
                                    "content": " such that "
                                },
                                {
                                    "bbox": [
                                        117,
                                        332,
                                        488,
                                        345
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{v} (\\text{terminal}, \\cdot) = 0"
                                }
                            ]
                        }
                    ],
                    "index": 4
                },
                {
                    "bbox": [
                        117,
                        346,
                        407,
                        358
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                346,
                                407,
                                358
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        346,
                                        407,
                                        358
                                    ],
                                    "type": "text",
                                    "content": "Algorithm parameters: step size "
                                },
                                {
                                    "bbox": [
                                        117,
                                        346,
                                        407,
                                        358
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\alpha > 0"
                                },
                                {
                                    "bbox": [
                                        117,
                                        346,
                                        407,
                                        358
                                    ],
                                    "type": "text",
                                    "content": ", a positive integer "
                                },
                                {
                                    "bbox": [
                                        117,
                                        346,
                                        407,
                                        358
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                }
                            ]
                        }
                    ],
                    "index": 5
                },
                {
                    "bbox": [
                        117,
                        359,
                        406,
                        372
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                359,
                                406,
                                372
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        359,
                                        406,
                                        372
                                    ],
                                    "type": "text",
                                    "content": "Initialize value- function weights "
                                },
                                {
                                    "bbox": [
                                        117,
                                        359,
                                        406,
                                        372
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        359,
                                        406,
                                        372
                                    ],
                                    "type": "text",
                                    "content": " arbitrarily (e.g., "
                                },
                                {
                                    "bbox": [
                                        117,
                                        359,
                                        406,
                                        372
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w} = \\mathbf{0}"
                                }
                            ]
                        }
                    ],
                    "index": 6
                },
                {
                    "bbox": [
                        117,
                        373,
                        485,
                        385
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                373,
                                485,
                                385
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        373,
                                        485,
                                        385
                                    ],
                                    "type": "text",
                                    "content": "All store and access operations ("
                                },
                                {
                                    "bbox": [
                                        117,
                                        373,
                                        485,
                                        385
                                    ],
                                    "type": "inline_equation",
                                    "content": "S_{t}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        373,
                                        485,
                                        385
                                    ],
                                    "type": "text",
                                    "content": " and "
                                },
                                {
                                    "bbox": [
                                        117,
                                        373,
                                        485,
                                        385
                                    ],
                                    "type": "inline_equation",
                                    "content": "R_{t}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        373,
                                        485,
                                        385
                                    ],
                                    "type": "text",
                                    "content": ") can take their index mod "
                                },
                                {
                                    "bbox": [
                                        117,
                                        373,
                                        485,
                                        385
                                    ],
                                    "type": "inline_equation",
                                    "content": "n + 1"
                                }
                            ]
                        }
                    ],
                    "index": 7
                },
                {
                    "bbox": [
                        117,
                        393,
                        227,
                        405
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                393,
                                227,
                                405
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        393,
                                        227,
                                        405
                                    ],
                                    "type": "text",
                                    "content": "Loop for each episode:"
                                }
                            ]
                        }
                    ],
                    "index": 8
                },
                {
                    "bbox": [
                        130,
                        406,
                        295,
                        419
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                130,
                                406,
                                295,
                                419
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        130,
                                        406,
                                        295,
                                        419
                                    ],
                                    "type": "text",
                                    "content": "Initialize and store "
                                },
                                {
                                    "bbox": [
                                        130,
                                        406,
                                        295,
                                        419
                                    ],
                                    "type": "inline_equation",
                                    "content": "S_{0} \\neq"
                                },
                                {
                                    "bbox": [
                                        130,
                                        406,
                                        295,
                                        419
                                    ],
                                    "type": "text",
                                    "content": " terminal"
                                }
                            ]
                        }
                    ],
                    "index": 9
                },
                {
                    "bbox": [
                        132,
                        420,
                        171,
                        430
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                132,
                                420,
                                171,
                                430
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        132,
                                        420,
                                        171,
                                        430
                                    ],
                                    "type": "inline_equation",
                                    "content": "T \\leftarrow \\infty"
                                }
                            ]
                        }
                    ],
                    "index": 10
                },
                {
                    "bbox": [
                        132,
                        432,
                        248,
                        444
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                132,
                                432,
                                248,
                                444
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        132,
                                        432,
                                        248,
                                        444
                                    ],
                                    "type": "text",
                                    "content": "Loop for "
                                },
                                {
                                    "bbox": [
                                        132,
                                        432,
                                        248,
                                        444
                                    ],
                                    "type": "inline_equation",
                                    "content": "t = 0, 1, 2, \\ldots"
                                }
                            ]
                        }
                    ],
                    "index": 11
                },
                {
                    "bbox": [
                        132,
                        446,
                        217,
                        458
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                132,
                                446,
                                217,
                                458
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        132,
                                        446,
                                        217,
                                        458
                                    ],
                                    "type": "text",
                                    "content": "If "
                                },
                                {
                                    "bbox": [
                                        132,
                                        446,
                                        217,
                                        458
                                    ],
                                    "type": "inline_equation",
                                    "content": "t < T"
                                },
                                {
                                    "bbox": [
                                        132,
                                        446,
                                        217,
                                        458
                                    ],
                                    "type": "text",
                                    "content": ", then:"
                                }
                            ]
                        }
                    ],
                    "index": 12
                },
                {
                    "bbox": [
                        161,
                        459,
                        332,
                        471
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                161,
                                459,
                                332,
                                471
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        161,
                                        459,
                                        332,
                                        471
                                    ],
                                    "type": "text",
                                    "content": "Take an action according to "
                                },
                                {
                                    "bbox": [
                                        161,
                                        459,
                                        332,
                                        471
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\pi (\\cdot | S_{t})"
                                }
                            ]
                        }
                    ],
                    "index": 13
                },
                {
                    "bbox": [
                        161,
                        473,
                        502,
                        484
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                161,
                                473,
                                502,
                                484
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        161,
                                        473,
                                        502,
                                        484
                                    ],
                                    "type": "text",
                                    "content": "Observe and store the next reward as "
                                },
                                {
                                    "bbox": [
                                        161,
                                        473,
                                        502,
                                        484
                                    ],
                                    "type": "inline_equation",
                                    "content": "R_{t + 1}"
                                },
                                {
                                    "bbox": [
                                        161,
                                        473,
                                        502,
                                        484
                                    ],
                                    "type": "text",
                                    "content": " and the next state as "
                                },
                                {
                                    "bbox": [
                                        161,
                                        473,
                                        502,
                                        484
                                    ],
                                    "type": "inline_equation",
                                    "content": "S_{t + 1}"
                                }
                            ]
                        }
                    ],
                    "index": 14
                },
                {
                    "bbox": [
                        161,
                        485,
                        331,
                        497
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                161,
                                485,
                                331,
                                497
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        161,
                                        485,
                                        331,
                                        497
                                    ],
                                    "type": "text",
                                    "content": "If "
                                },
                                {
                                    "bbox": [
                                        161,
                                        485,
                                        331,
                                        497
                                    ],
                                    "type": "inline_equation",
                                    "content": "S_{t + 1}"
                                },
                                {
                                    "bbox": [
                                        161,
                                        485,
                                        331,
                                        497
                                    ],
                                    "type": "text",
                                    "content": " is terminal, then "
                                },
                                {
                                    "bbox": [
                                        161,
                                        485,
                                        331,
                                        497
                                    ],
                                    "type": "inline_equation",
                                    "content": "T \\leftarrow t + 1"
                                }
                            ]
                        }
                    ],
                    "index": 15
                },
                {
                    "bbox": [
                        132,
                        499,
                        495,
                        511
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                132,
                                499,
                                495,
                                511
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        132,
                                        499,
                                        495,
                                        511
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\tau \\leftarrow t - n + 1"
                                },
                                {
                                    "bbox": [
                                        132,
                                        499,
                                        495,
                                        511
                                    ],
                                    "type": "text",
                                    "content": " ("
                                },
                                {
                                    "bbox": [
                                        132,
                                        499,
                                        495,
                                        511
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\tau"
                                },
                                {
                                    "bbox": [
                                        132,
                                        499,
                                        495,
                                        511
                                    ],
                                    "type": "text",
                                    "content": " is the time whose state's estimate is being updated)"
                                }
                            ]
                        }
                    ],
                    "index": 16
                },
                {
                    "bbox": [
                        132,
                        512,
                        190,
                        523
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                132,
                                512,
                                190,
                                523
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        132,
                                        512,
                                        190,
                                        523
                                    ],
                                    "type": "text",
                                    "content": "If "
                                },
                                {
                                    "bbox": [
                                        132,
                                        512,
                                        190,
                                        523
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\tau \\geq 0"
                                }
                            ]
                        }
                    ],
                    "index": 17
                },
                {
                    "bbox": [
                        161,
                        525,
                        296,
                        540
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                161,
                                525,
                                296,
                                540
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        161,
                                        525,
                                        296,
                                        540
                                    ],
                                    "type": "interline_equation",
                                    "content": "G \\leftarrow \\sum_{i = \\tau + 1}^{\\min (\\tau + n, T)} \\gamma^{i - \\tau - 1} R_{i}",
                                    "image_path": "1d494f8a1ea7f0ae42967bae87c1ca76951a42b58c076e7b28985106501728c1.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 18
                },
                {
                    "bbox": [
                        161,
                        541,
                        371,
                        554
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                161,
                                541,
                                371,
                                554
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        161,
                                        541,
                                        371,
                                        554
                                    ],
                                    "type": "text",
                                    "content": "If "
                                },
                                {
                                    "bbox": [
                                        161,
                                        541,
                                        371,
                                        554
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\tau + n < T"
                                },
                                {
                                    "bbox": [
                                        161,
                                        541,
                                        371,
                                        554
                                    ],
                                    "type": "text",
                                    "content": ", then: "
                                },
                                {
                                    "bbox": [
                                        161,
                                        541,
                                        371,
                                        554
                                    ],
                                    "type": "inline_equation",
                                    "content": "G \\leftarrow G + \\gamma^{n} \\hat{v} (S_{\\tau + n}, \\mathbf{w})"
                                }
                            ]
                        }
                    ],
                    "index": 19
                },
                {
                    "bbox": [
                        161,
                        554,
                        339,
                        567
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                161,
                                554,
                                339,
                                567
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        161,
                                        554,
                                        339,
                                        567
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w} \\leftarrow \\mathbf{w} + \\alpha \\left[ G - \\hat{v} (S_{\\tau}, \\mathbf{w}) \\right] \\nabla \\hat{v} (S_{\\tau}, \\mathbf{w})"
                                }
                            ]
                        }
                    ],
                    "index": 20
                },
                {
                    "bbox": [
                        132,
                        567,
                        208,
                        579
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                132,
                                567,
                                208,
                                579
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        132,
                                        567,
                                        208,
                                        579
                                    ],
                                    "type": "text",
                                    "content": "Until "
                                },
                                {
                                    "bbox": [
                                        132,
                                        567,
                                        208,
                                        579
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\tau = T - 1"
                                }
                            ]
                        }
                    ],
                    "index": 21
                },
                {
                    "bbox": [
                        115,
                        601,
                        395,
                        615
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                115,
                                601,
                                395,
                                615
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        115,
                                        601,
                                        395,
                                        615
                                    ],
                                    "type": "text",
                                    "content": "The key equation of this algorithm, analogous to (7.2), is"
                                }
                            ]
                        }
                    ],
                    "index": 22
                },
                {
                    "bbox": [
                        128,
                        627,
                        528,
                        643
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                128,
                                627,
                                528,
                                643
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        128,
                                        627,
                                        528,
                                        643
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\mathbf{w}_{t + n} \\doteq \\mathbf{w}_{t + n - 1} + \\alpha \\left[ G_{t:t + n} - \\hat{v} (S_{t}, \\mathbf{w}_{t + n - 1}) \\right] \\nabla \\hat{v} (S_{t}, \\mathbf{w}_{t + n - 1}), \\qquad 0 \\leq t < T, \\tag{9.15}",
                                    "image_path": "68fccfe7da133291e1e21705a0b7e8ba50be2cc82e65a9beca226740a795ea21.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 23
                },
                {
                    "bbox": [
                        103,
                        654,
                        355,
                        668
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                103,
                                654,
                                355,
                                668
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        103,
                                        654,
                                        355,
                                        668
                                    ],
                                    "type": "text",
                                    "content": "where the "
                                },
                                {
                                    "bbox": [
                                        103,
                                        654,
                                        355,
                                        668
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        103,
                                        654,
                                        355,
                                        668
                                    ],
                                    "type": "text",
                                    "content": "- step return is generalized from (7.1) to"
                                }
                            ]
                        }
                    ],
                    "index": 24
                },
                {
                    "bbox": [
                        119,
                        680,
                        528,
                        695
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                119,
                                680,
                                528,
                                695
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        119,
                                        680,
                                        528,
                                        695
                                    ],
                                    "type": "interline_equation",
                                    "content": "G_{t:t + n} \\doteq R_{t + 1} + \\gamma R_{t + 2} + \\dots + \\gamma^{n - 1} R_{t + n} + \\gamma^{n} \\hat{v} (S_{t + n}, \\mathbf{w}_{t + n - 1}), \\quad 0 \\leq t \\leq T - n. \\tag{9.16}",
                                    "image_path": "888758578d52dfc1aac11542de583043a172b37da1931ce15653ad15552d6097.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 25
                },
                {
                    "bbox": [
                        102,
                        713,
                        529,
                        740
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                102,
                                713,
                                529,
                                740
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        102,
                                        713,
                                        529,
                                        740
                                    ],
                                    "type": "text",
                                    "content": "Exercise 9.1 Show that tabular methods such as presented in Part I of this book are a special case of linear function approximation. What would the feature vectors be?"
                                }
                            ]
                        }
                    ],
                    "index": 26
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 12
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        64,
                        137,
                        431,
                        154
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                137,
                                431,
                                154
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        137,
                                        431,
                                        154
                                    ],
                                    "type": "text",
                                    "content": "9.5 Feature Construction for Linear Methods"
                                }
                            ]
                        }
                    ],
                    "index": 0,
                    "level": 1
                },
                {
                    "bbox": [
                        64,
                        165,
                        490,
                        298
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                165,
                                490,
                                298
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        298
                                    ],
                                    "type": "text",
                                    "content": "Linear methods are interesting because of their convergence guarantees, but also because in practice they can be very efficient in terms of both data and computation. Whether or not this is so depends critically on how the states are represented in terms of features, which we investigate in this large section. Choosing features appropriate to the task is an important way of adding prior domain knowledge to reinforcement learning systems. Intuitively, the features should correspond to the aspects of the state space along which generalization may be appropriate. If we are valuing geometric objects, for example, we might want to have features for each possible shape, color, size, or function. If we are valuing states of a mobile robot, then we might want to have features for locations, degrees of remaining battery power, recent sonar readings, and so on."
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        64,
                        300,
                        489,
                        432
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                300,
                                489,
                                432
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        300,
                                        489,
                                        432
                                    ],
                                    "type": "text",
                                    "content": "A limitation of the linear form is that it cannot take into account any interactions between features, such as the presence of feature "
                                },
                                {
                                    "bbox": [
                                        64,
                                        300,
                                        489,
                                        432
                                    ],
                                    "type": "inline_equation",
                                    "content": "i"
                                },
                                {
                                    "bbox": [
                                        64,
                                        300,
                                        489,
                                        432
                                    ],
                                    "type": "text",
                                    "content": " being good only in the absence of feature "
                                },
                                {
                                    "bbox": [
                                        64,
                                        300,
                                        489,
                                        432
                                    ],
                                    "type": "inline_equation",
                                    "content": "j"
                                },
                                {
                                    "bbox": [
                                        64,
                                        300,
                                        489,
                                        432
                                    ],
                                    "type": "text",
                                    "content": " . For example, in the pole- balancing task (Example 3.4), high angular velocity can be either good or bad depending on the angle. If the angle is high, then high angular velocity means an imminent danger of falling a bad state- whereas if the angle is low, then high angular velocity means the pole is righting itself a good state. A linear value function could not represent this if its features coded separately for the angle and the angular velocity. It needs instead, or in addition, features for combinations of these two underlying state dimensions. In the following subsections we consider a variety of general ways of doing this."
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        64,
                        450,
                        189,
                        465
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                450,
                                189,
                                465
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        450,
                                        189,
                                        465
                                    ],
                                    "type": "text",
                                    "content": "9.5.1 Polynomials"
                                }
                            ]
                        }
                    ],
                    "index": 3,
                    "level": 1
                },
                {
                    "bbox": [
                        64,
                        474,
                        489,
                        606
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                474,
                                489,
                                606
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        474,
                                        489,
                                        606
                                    ],
                                    "type": "text",
                                    "content": "The states of many problems are initially expressed as numbers, such as positions and velocities in the pole- balancing task (Example 3.4), the number of cars in each lot in the Jack's car rental problem (Example 4.2), or the gambler's capital in the gambler problem (Example 4.3). In these types of problems, function approximation for reinforcement learning has much in common with the familiar tasks of interpolation and regression. Various families of features commonly used for interpolation and regression can also be used in reinforcement learning. Polynomials make up one of the simplest families of features used for interpolation and regression. While the basic polynomial features we discuss here do not work as well as other types of features in reinforcement learning, they serve as a good introduction because they are simple and familiar."
                                }
                            ]
                        }
                    ],
                    "index": 4
                },
                {
                    "bbox": [
                        64,
                        607,
                        489,
                        740
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                607,
                                489,
                                740
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        607,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": "As an example, suppose a reinforcement learning problem has states with two numerical dimensions. For a single representative state "
                                },
                                {
                                    "bbox": [
                                        64,
                                        607,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        64,
                                        607,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " , let its two numbers be "
                                },
                                {
                                    "bbox": [
                                        64,
                                        607,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "s_{1}\\in \\mathbb{R}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        607,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " and "
                                },
                                {
                                    "bbox": [
                                        64,
                                        607,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "s_{2}\\in \\mathbb{R}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        607,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " You might choose to represent "
                                },
                                {
                                    "bbox": [
                                        64,
                                        607,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        64,
                                        607,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " simply by its two state dimensions, so that "
                                },
                                {
                                    "bbox": [
                                        64,
                                        607,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{x}(s) ="
                                },
                                {
                                    "bbox": [
                                        64,
                                        607,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "(s_{1},s_{2})^{\\top}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        607,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " , but then you would not be able to take into account any interactions between these dimensions. In addition, if both "
                                },
                                {
                                    "bbox": [
                                        64,
                                        607,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "s_{1}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        607,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " and "
                                },
                                {
                                    "bbox": [
                                        64,
                                        607,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "s_{2}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        607,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " were zero, then the approximate value would have to also be zero. Both limitations can be overcome by instead representing "
                                },
                                {
                                    "bbox": [
                                        64,
                                        607,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        64,
                                        607,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " by the four- dimensional feature vector "
                                },
                                {
                                    "bbox": [
                                        64,
                                        607,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{x}(s) = (1,s_{1},s_{2},s_{1}s_{2})^{\\top}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        607,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " . The initial 1 feature allows the representation of affine functions in the original state numbers, and the final product feature, "
                                },
                                {
                                    "bbox": [
                                        64,
                                        607,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "s_{1}s_{2}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        607,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " , enables interactions to be taken into account. Or you might choose to use higher- dimensional feature vectors like "
                                },
                                {
                                    "bbox": [
                                        64,
                                        607,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{x}(s) = (1,s_{1},s_{2},s_{1}s_{2},s_{1}^{2},s_{2}^{2},s_{1}s_{2}^{2},s_{1}^{2}s_{2},s_{1}^{2}s_{2}^{2})^{\\top}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        607,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " to"
                                }
                            ]
                        }
                    ],
                    "index": 5
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 13
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        104,
                        140,
                        530,
                        207
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                140,
                                530,
                                207
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        140,
                                        530,
                                        207
                                    ],
                                    "type": "text",
                                    "content": "take more complex interactions into account. Such feature vectors enable approximations as arbitrary quadratic functions of the state numbers—even though the approximation is still linear in the weights that have to be learned. Generalizing this example from two to "
                                },
                                {
                                    "bbox": [
                                        104,
                                        140,
                                        530,
                                        207
                                    ],
                                    "type": "inline_equation",
                                    "content": "k"
                                },
                                {
                                    "bbox": [
                                        104,
                                        140,
                                        530,
                                        207
                                    ],
                                    "type": "text",
                                    "content": " numbers, we can represent highly- complex interactions among a problem's state dimensions:"
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        116,
                        222,
                        517,
                        262
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                116,
                                222,
                                517,
                                262
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        116,
                                        222,
                                        517,
                                        262
                                    ],
                                    "type": "text",
                                    "content": "Suppose each state "
                                },
                                {
                                    "bbox": [
                                        116,
                                        222,
                                        517,
                                        262
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        116,
                                        222,
                                        517,
                                        262
                                    ],
                                    "type": "text",
                                    "content": " corresponds to "
                                },
                                {
                                    "bbox": [
                                        116,
                                        222,
                                        517,
                                        262
                                    ],
                                    "type": "inline_equation",
                                    "content": "k"
                                },
                                {
                                    "bbox": [
                                        116,
                                        222,
                                        517,
                                        262
                                    ],
                                    "type": "text",
                                    "content": " numbers, "
                                },
                                {
                                    "bbox": [
                                        116,
                                        222,
                                        517,
                                        262
                                    ],
                                    "type": "inline_equation",
                                    "content": "s_1, s_2, \\ldots , s_k"
                                },
                                {
                                    "bbox": [
                                        116,
                                        222,
                                        517,
                                        262
                                    ],
                                    "type": "text",
                                    "content": ", with each "
                                },
                                {
                                    "bbox": [
                                        116,
                                        222,
                                        517,
                                        262
                                    ],
                                    "type": "inline_equation",
                                    "content": "s_i \\in \\mathbb{R}"
                                },
                                {
                                    "bbox": [
                                        116,
                                        222,
                                        517,
                                        262
                                    ],
                                    "type": "text",
                                    "content": ". For this "
                                },
                                {
                                    "bbox": [
                                        116,
                                        222,
                                        517,
                                        262
                                    ],
                                    "type": "inline_equation",
                                    "content": "k"
                                },
                                {
                                    "bbox": [
                                        116,
                                        222,
                                        517,
                                        262
                                    ],
                                    "type": "text",
                                    "content": "- dimensional state space, each order- "
                                },
                                {
                                    "bbox": [
                                        116,
                                        222,
                                        517,
                                        262
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        116,
                                        222,
                                        517,
                                        262
                                    ],
                                    "type": "text",
                                    "content": " polynomial- basis feature "
                                },
                                {
                                    "bbox": [
                                        116,
                                        222,
                                        517,
                                        262
                                    ],
                                    "type": "inline_equation",
                                    "content": "x_i"
                                },
                                {
                                    "bbox": [
                                        116,
                                        222,
                                        517,
                                        262
                                    ],
                                    "type": "text",
                                    "content": " can be written as"
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        145,
                        271,
                        514,
                        289
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                145,
                                271,
                                514,
                                289
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        145,
                                        271,
                                        514,
                                        289
                                    ],
                                    "type": "interline_equation",
                                    "content": "x_{i}(s) = \\Pi_{j = 1}^{k}s_{j}^{c_{i,j}}, \\tag{9.17}",
                                    "image_path": "c52122fe0545ce01b9f06d62a6039bc635d149b726a94f381ffdde634a55a817.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        116,
                        298,
                        515,
                        337
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                116,
                                298,
                                515,
                                337
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        116,
                                        298,
                                        515,
                                        337
                                    ],
                                    "type": "text",
                                    "content": "where each "
                                },
                                {
                                    "bbox": [
                                        116,
                                        298,
                                        515,
                                        337
                                    ],
                                    "type": "inline_equation",
                                    "content": "c_{i,j}"
                                },
                                {
                                    "bbox": [
                                        116,
                                        298,
                                        515,
                                        337
                                    ],
                                    "type": "text",
                                    "content": " is an integer in the set "
                                },
                                {
                                    "bbox": [
                                        116,
                                        298,
                                        515,
                                        337
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\{0,1,\\ldots ,n\\}"
                                },
                                {
                                    "bbox": [
                                        116,
                                        298,
                                        515,
                                        337
                                    ],
                                    "type": "text",
                                    "content": " for an integer "
                                },
                                {
                                    "bbox": [
                                        116,
                                        298,
                                        515,
                                        337
                                    ],
                                    "type": "inline_equation",
                                    "content": "n\\geq 0"
                                },
                                {
                                    "bbox": [
                                        116,
                                        298,
                                        515,
                                        337
                                    ],
                                    "type": "text",
                                    "content": " . These features make up the order- "
                                },
                                {
                                    "bbox": [
                                        116,
                                        298,
                                        515,
                                        337
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        116,
                                        298,
                                        515,
                                        337
                                    ],
                                    "type": "text",
                                    "content": " polynomial basis for dimension "
                                },
                                {
                                    "bbox": [
                                        116,
                                        298,
                                        515,
                                        337
                                    ],
                                    "type": "inline_equation",
                                    "content": "k"
                                },
                                {
                                    "bbox": [
                                        116,
                                        298,
                                        515,
                                        337
                                    ],
                                    "type": "text",
                                    "content": " , which contains "
                                },
                                {
                                    "bbox": [
                                        116,
                                        298,
                                        515,
                                        337
                                    ],
                                    "type": "inline_equation",
                                    "content": "(n + 1)^{k}"
                                },
                                {
                                    "bbox": [
                                        116,
                                        298,
                                        515,
                                        337
                                    ],
                                    "type": "text",
                                    "content": " different features."
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        104,
                        352,
                        530,
                        446
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                352,
                                530,
                                446
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        352,
                                        530,
                                        446
                                    ],
                                    "type": "text",
                                    "content": "Higher- order polynomial bases allow for more accurate approximations of more complicated functions. But because the number of features in an order- "
                                },
                                {
                                    "bbox": [
                                        104,
                                        352,
                                        530,
                                        446
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        104,
                                        352,
                                        530,
                                        446
                                    ],
                                    "type": "text",
                                    "content": " polynomial basis grows exponentially with the dimension "
                                },
                                {
                                    "bbox": [
                                        104,
                                        352,
                                        530,
                                        446
                                    ],
                                    "type": "inline_equation",
                                    "content": "k"
                                },
                                {
                                    "bbox": [
                                        104,
                                        352,
                                        530,
                                        446
                                    ],
                                    "type": "text",
                                    "content": " of the natural state space (if "
                                },
                                {
                                    "bbox": [
                                        104,
                                        352,
                                        530,
                                        446
                                    ],
                                    "type": "inline_equation",
                                    "content": "n > 0"
                                },
                                {
                                    "bbox": [
                                        104,
                                        352,
                                        530,
                                        446
                                    ],
                                    "type": "text",
                                    "content": "), it is generally necessary to select a subset of them for function approximation. This can be done using prior beliefs about the nature of the function to be approximated, and some automated selection methods developed for polynomial regression can be adapted to deal with the incremental and nonstationary nature of reinforcement learning."
                                }
                            ]
                        }
                    ],
                    "index": 4
                },
                {
                    "bbox": [
                        104,
                        449,
                        493,
                        464
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                449,
                                493,
                                464
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        449,
                                        493,
                                        464
                                    ],
                                    "type": "text",
                                    "content": "Exercise 9.2 Why does (9.17) define "
                                },
                                {
                                    "bbox": [
                                        104,
                                        449,
                                        493,
                                        464
                                    ],
                                    "type": "inline_equation",
                                    "content": "(n + 1)^k"
                                },
                                {
                                    "bbox": [
                                        104,
                                        449,
                                        493,
                                        464
                                    ],
                                    "type": "text",
                                    "content": " distinct features for dimension "
                                },
                                {
                                    "bbox": [
                                        104,
                                        449,
                                        493,
                                        464
                                    ],
                                    "type": "inline_equation",
                                    "content": "k"
                                },
                                {
                                    "bbox": [
                                        104,
                                        449,
                                        493,
                                        464
                                    ],
                                    "type": "text",
                                    "content": "?"
                                }
                            ]
                        }
                    ],
                    "index": 5
                },
                {
                    "bbox": [
                        104,
                        468,
                        530,
                        496
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                468,
                                530,
                                496
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        468,
                                        530,
                                        496
                                    ],
                                    "type": "text",
                                    "content": "Exercise 9.3 What "
                                },
                                {
                                    "bbox": [
                                        104,
                                        468,
                                        530,
                                        496
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        104,
                                        468,
                                        530,
                                        496
                                    ],
                                    "type": "text",
                                    "content": " and "
                                },
                                {
                                    "bbox": [
                                        104,
                                        468,
                                        530,
                                        496
                                    ],
                                    "type": "inline_equation",
                                    "content": "c_{i,j}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        468,
                                        530,
                                        496
                                    ],
                                    "type": "text",
                                    "content": " produce the feature vectors "
                                },
                                {
                                    "bbox": [
                                        104,
                                        468,
                                        530,
                                        496
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{x}(s) = (1, s_1, s_2, s_1 s_2, s_1^2, s_2^2, s_1 s_2^2, s_1^2 s_2, s_1^2 s_2^2)^\\top"
                                },
                                {
                                    "bbox": [
                                        104,
                                        468,
                                        530,
                                        496
                                    ],
                                    "type": "text",
                                    "content": "?"
                                }
                            ]
                        }
                    ],
                    "index": 6
                },
                {
                    "bbox": [
                        104,
                        516,
                        237,
                        531
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                516,
                                237,
                                531
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        516,
                                        237,
                                        531
                                    ],
                                    "type": "text",
                                    "content": "9.5.2 Fourier Basis"
                                }
                            ]
                        }
                    ],
                    "index": 7,
                    "level": 1
                },
                {
                    "bbox": [
                        104,
                        539,
                        530,
                        672
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                539,
                                530,
                                672
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        539,
                                        530,
                                        672
                                    ],
                                    "type": "text",
                                    "content": "Another linear function approximation method is based on the time- honored Fourier series, which expresses periodic functions as weighted sums of sine and cosine basis functions (features) of different frequencies. (A function "
                                },
                                {
                                    "bbox": [
                                        104,
                                        539,
                                        530,
                                        672
                                    ],
                                    "type": "inline_equation",
                                    "content": "f"
                                },
                                {
                                    "bbox": [
                                        104,
                                        539,
                                        530,
                                        672
                                    ],
                                    "type": "text",
                                    "content": " is periodic if "
                                },
                                {
                                    "bbox": [
                                        104,
                                        539,
                                        530,
                                        672
                                    ],
                                    "type": "inline_equation",
                                    "content": "f(x) = f(x + \\tau)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        539,
                                        530,
                                        672
                                    ],
                                    "type": "text",
                                    "content": " for all "
                                },
                                {
                                    "bbox": [
                                        104,
                                        539,
                                        530,
                                        672
                                    ],
                                    "type": "inline_equation",
                                    "content": "x"
                                },
                                {
                                    "bbox": [
                                        104,
                                        539,
                                        530,
                                        672
                                    ],
                                    "type": "text",
                                    "content": " and some period "
                                },
                                {
                                    "bbox": [
                                        104,
                                        539,
                                        530,
                                        672
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\tau"
                                },
                                {
                                    "bbox": [
                                        104,
                                        539,
                                        530,
                                        672
                                    ],
                                    "type": "text",
                                    "content": ".) The Fourier series and the more general Fourier transform are widely used in applied sciences in part because if a function to be approximated is known, then the basis function weights are given by simple formulae and, further, with enough basis functions essentially any function can be approximated as accurately as desired. In reinforcement learning, where the functions to be approximated are unknown, Fourier basis functions are of interest because they are easy to use and can perform well in a range of reinforcement learning problems."
                                }
                            ]
                        }
                    ],
                    "index": 8
                },
                {
                    "bbox": [
                        104,
                        673,
                        530,
                        740
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                673,
                                530,
                                740
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        673,
                                        530,
                                        740
                                    ],
                                    "type": "text",
                                    "content": "First consider the one- dimensional case. The usual Fourier series representation of a function of one dimension having period "
                                },
                                {
                                    "bbox": [
                                        104,
                                        673,
                                        530,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\tau"
                                },
                                {
                                    "bbox": [
                                        104,
                                        673,
                                        530,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " represents the function as a linear combination of sine and cosine functions that are each periodic with periods that evenly divide "
                                },
                                {
                                    "bbox": [
                                        104,
                                        673,
                                        530,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\tau"
                                },
                                {
                                    "bbox": [
                                        104,
                                        673,
                                        530,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " (in other words, whose frequencies are integer multiples of a fundamental frequency "
                                },
                                {
                                    "bbox": [
                                        104,
                                        673,
                                        530,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "1 / \\tau"
                                },
                                {
                                    "bbox": [
                                        104,
                                        673,
                                        530,
                                        740
                                    ],
                                    "type": "text",
                                    "content": "). But if you are interested in approximating an aperiodic function defined over a bounded"
                                }
                            ]
                        }
                    ],
                    "index": 9
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 14
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        64,
                        140,
                        489,
                        180
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                140,
                                489,
                                180
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        180
                                    ],
                                    "type": "text",
                                    "content": "interval, then you can use these Fourier basis features with "
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        180
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\tau"
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        180
                                    ],
                                    "type": "text",
                                    "content": " set to the length of the interval. The function of interest is then just one period of the periodic linear combination of the sine and cosine features."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        64,
                        181,
                        490,
                        354
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                181,
                                490,
                                354
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        181,
                                        490,
                                        354
                                    ],
                                    "type": "text",
                                    "content": "Furthermore, if you set "
                                },
                                {
                                    "bbox": [
                                        64,
                                        181,
                                        490,
                                        354
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\tau"
                                },
                                {
                                    "bbox": [
                                        64,
                                        181,
                                        490,
                                        354
                                    ],
                                    "type": "text",
                                    "content": " to twice the length of the interval of interest and restrict attention to the approximation over the half interval "
                                },
                                {
                                    "bbox": [
                                        64,
                                        181,
                                        490,
                                        354
                                    ],
                                    "type": "inline_equation",
                                    "content": "[0, \\tau /2]"
                                },
                                {
                                    "bbox": [
                                        64,
                                        181,
                                        490,
                                        354
                                    ],
                                    "type": "text",
                                    "content": ", then you can use just the cosine features. This is possible because you can represent any even function, that is, any function that is symmetric about the origin, with just the cosine basis. So any function over the half- period "
                                },
                                {
                                    "bbox": [
                                        64,
                                        181,
                                        490,
                                        354
                                    ],
                                    "type": "inline_equation",
                                    "content": "[0, \\tau /2]"
                                },
                                {
                                    "bbox": [
                                        64,
                                        181,
                                        490,
                                        354
                                    ],
                                    "type": "text",
                                    "content": " can be approximated as closely as desired with enough cosine features. (Saying \"any function\" is not exactly correct because the function has to be mathematically well- behaved, but we skip this technicality here.) Alternatively, it is possible to use just sine features, linear combinations of which are always odd functions, that is functions that are anti- symmetric about the origin. But it is generally better to keep just the cosine features because \"half- even\" functions tend to be easier to approximate than \"half- odd\" functions because the latter are often discontinuous at the origin. Of course, this does not rule out using both sine and cosine features to approximate over the interval "
                                },
                                {
                                    "bbox": [
                                        64,
                                        181,
                                        490,
                                        354
                                    ],
                                    "type": "inline_equation",
                                    "content": "[0, \\tau /2]"
                                },
                                {
                                    "bbox": [
                                        64,
                                        181,
                                        490,
                                        354
                                    ],
                                    "type": "text",
                                    "content": ", which might be advantageous in some circumstances."
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        64,
                        355,
                        489,
                        394
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                355,
                                489,
                                394
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        355,
                                        489,
                                        394
                                    ],
                                    "type": "text",
                                    "content": "Following this logic and letting "
                                },
                                {
                                    "bbox": [
                                        64,
                                        355,
                                        489,
                                        394
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\tau = 2"
                                },
                                {
                                    "bbox": [
                                        64,
                                        355,
                                        489,
                                        394
                                    ],
                                    "type": "text",
                                    "content": " so that the features are defined over the half- "
                                },
                                {
                                    "bbox": [
                                        64,
                                        355,
                                        489,
                                        394
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\tau"
                                },
                                {
                                    "bbox": [
                                        64,
                                        355,
                                        489,
                                        394
                                    ],
                                    "type": "text",
                                    "content": " interval "
                                },
                                {
                                    "bbox": [
                                        64,
                                        355,
                                        489,
                                        394
                                    ],
                                    "type": "inline_equation",
                                    "content": "[0,1]"
                                },
                                {
                                    "bbox": [
                                        64,
                                        355,
                                        489,
                                        394
                                    ],
                                    "type": "text",
                                    "content": ", the one- dimensional order- "
                                },
                                {
                                    "bbox": [
                                        64,
                                        355,
                                        489,
                                        394
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        64,
                                        355,
                                        489,
                                        394
                                    ],
                                    "type": "text",
                                    "content": " Fourier cosine basis consists of the "
                                },
                                {
                                    "bbox": [
                                        64,
                                        355,
                                        489,
                                        394
                                    ],
                                    "type": "inline_equation",
                                    "content": "n + 1"
                                },
                                {
                                    "bbox": [
                                        64,
                                        355,
                                        489,
                                        394
                                    ],
                                    "type": "text",
                                    "content": " features"
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        92,
                        404,
                        226,
                        416
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                92,
                                404,
                                226,
                                416
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        92,
                                        404,
                                        226,
                                        416
                                    ],
                                    "type": "interline_equation",
                                    "content": "x_{i}(s) = \\cos (i\\pi s), s \\in [0,1],",
                                    "image_path": "7fbd344218e68342e398cc5eb7188a5bc5dfa6155534e3fa81d8b38d25ec2792.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        63,
                        421,
                        489,
                        448
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                63,
                                421,
                                489,
                                448
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        63,
                                        421,
                                        489,
                                        448
                                    ],
                                    "type": "text",
                                    "content": "for "
                                },
                                {
                                    "bbox": [
                                        63,
                                        421,
                                        489,
                                        448
                                    ],
                                    "type": "inline_equation",
                                    "content": "i = 0, \\ldots , n"
                                },
                                {
                                    "bbox": [
                                        63,
                                        421,
                                        489,
                                        448
                                    ],
                                    "type": "text",
                                    "content": ". Figure 9.3 shows one- dimensional Fourier cosine features "
                                },
                                {
                                    "bbox": [
                                        63,
                                        421,
                                        489,
                                        448
                                    ],
                                    "type": "inline_equation",
                                    "content": "x_{i}"
                                },
                                {
                                    "bbox": [
                                        63,
                                        421,
                                        489,
                                        448
                                    ],
                                    "type": "text",
                                    "content": ", for "
                                },
                                {
                                    "bbox": [
                                        63,
                                        421,
                                        489,
                                        448
                                    ],
                                    "type": "inline_equation",
                                    "content": "i = 1, 2, 3, 4"
                                },
                                {
                                    "bbox": [
                                        63,
                                        421,
                                        489,
                                        448
                                    ],
                                    "type": "text",
                                    "content": "; "
                                },
                                {
                                    "bbox": [
                                        63,
                                        421,
                                        489,
                                        448
                                    ],
                                    "type": "inline_equation",
                                    "content": "x_{0}"
                                },
                                {
                                    "bbox": [
                                        63,
                                        421,
                                        489,
                                        448
                                    ],
                                    "type": "text",
                                    "content": " is a constant function."
                                }
                            ]
                        }
                    ],
                    "index": 4
                },
                {
                    "type": "image",
                    "bbox": [
                        64,
                        458,
                        489,
                        540
                    ],
                    "blocks": [
                        {
                            "bbox": [
                                64,
                                458,
                                489,
                                540
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        64,
                                        458,
                                        489,
                                        540
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                64,
                                                458,
                                                489,
                                                540
                                            ],
                                            "type": "image",
                                            "image_path": "bbb6f994be5eeb334fa805c5180b9b008e5e428d117ca39705020fade2ac9d58.jpg"
                                        }
                                    ]
                                }
                            ],
                            "index": 5,
                            "type": "image_body"
                        },
                        {
                            "bbox": [
                                64,
                                554,
                                489,
                                580
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        64,
                                        554,
                                        489,
                                        580
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                64,
                                                554,
                                                489,
                                                580
                                            ],
                                            "type": "text",
                                            "content": "Figure 9.3: One-dimensional Fourier cosine-basis features "
                                        },
                                        {
                                            "bbox": [
                                                64,
                                                554,
                                                489,
                                                580
                                            ],
                                            "type": "inline_equation",
                                            "content": "x_{i}"
                                        },
                                        {
                                            "bbox": [
                                                64,
                                                554,
                                                489,
                                                580
                                            ],
                                            "type": "text",
                                            "content": ", "
                                        },
                                        {
                                            "bbox": [
                                                64,
                                                554,
                                                489,
                                                580
                                            ],
                                            "type": "inline_equation",
                                            "content": "i = 1, 2, 3, 4"
                                        },
                                        {
                                            "bbox": [
                                                64,
                                                554,
                                                489,
                                                580
                                            ],
                                            "type": "text",
                                            "content": ", for approximating functions over the interval "
                                        },
                                        {
                                            "bbox": [
                                                64,
                                                554,
                                                489,
                                                580
                                            ],
                                            "type": "inline_equation",
                                            "content": "[0, 1]"
                                        },
                                        {
                                            "bbox": [
                                                64,
                                                554,
                                                489,
                                                580
                                            ],
                                            "type": "text",
                                            "content": ". After Konidaris et al. (2011)."
                                        }
                                    ]
                                }
                            ],
                            "index": 6,
                            "type": "image_caption"
                        }
                    ],
                    "index": 5
                },
                {
                    "bbox": [
                        65,
                        592,
                        489,
                        618
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                65,
                                592,
                                489,
                                618
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        65,
                                        592,
                                        489,
                                        618
                                    ],
                                    "type": "text",
                                    "content": "This same reasoning applies to the Fourier cosine series approximation in the multidimensional case as described in the box below."
                                }
                            ]
                        }
                    ],
                    "index": 7
                },
                {
                    "bbox": [
                        76,
                        633,
                        477,
                        673
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                76,
                                633,
                                477,
                                673
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        76,
                                        633,
                                        477,
                                        673
                                    ],
                                    "type": "text",
                                    "content": "Suppose each state "
                                },
                                {
                                    "bbox": [
                                        76,
                                        633,
                                        477,
                                        673
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        76,
                                        633,
                                        477,
                                        673
                                    ],
                                    "type": "text",
                                    "content": " corresponds to a vector of "
                                },
                                {
                                    "bbox": [
                                        76,
                                        633,
                                        477,
                                        673
                                    ],
                                    "type": "inline_equation",
                                    "content": "k"
                                },
                                {
                                    "bbox": [
                                        76,
                                        633,
                                        477,
                                        673
                                    ],
                                    "type": "text",
                                    "content": " numbers, "
                                },
                                {
                                    "bbox": [
                                        76,
                                        633,
                                        477,
                                        673
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{s} = (s_{1}, s_{2}, \\ldots , s_{k})^{\\top}"
                                },
                                {
                                    "bbox": [
                                        76,
                                        633,
                                        477,
                                        673
                                    ],
                                    "type": "text",
                                    "content": ", with each "
                                },
                                {
                                    "bbox": [
                                        76,
                                        633,
                                        477,
                                        673
                                    ],
                                    "type": "inline_equation",
                                    "content": "s_{i} \\in [0, 1]"
                                },
                                {
                                    "bbox": [
                                        76,
                                        633,
                                        477,
                                        673
                                    ],
                                    "type": "text",
                                    "content": ". The "
                                },
                                {
                                    "bbox": [
                                        76,
                                        633,
                                        477,
                                        673
                                    ],
                                    "type": "inline_equation",
                                    "content": "i"
                                },
                                {
                                    "bbox": [
                                        76,
                                        633,
                                        477,
                                        673
                                    ],
                                    "type": "text",
                                    "content": "th feature in the order- "
                                },
                                {
                                    "bbox": [
                                        76,
                                        633,
                                        477,
                                        673
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        76,
                                        633,
                                        477,
                                        673
                                    ],
                                    "type": "text",
                                    "content": " Fourier cosine basis can then be written"
                                }
                            ]
                        }
                    ],
                    "index": 8
                },
                {
                    "bbox": [
                        105,
                        676,
                        474,
                        692
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                105,
                                676,
                                474,
                                692
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        105,
                                        676,
                                        474,
                                        692
                                    ],
                                    "type": "interline_equation",
                                    "content": "x_{i}(s) = \\cos \\left(\\pi \\mathbf{s}^{\\top} \\mathbf{c}^{i}\\right), \\tag{9.18}",
                                    "image_path": "c7080369ad3400df9bce2eb51fa05ddfd96ad9d9b0f6a3911a91bc88cee30e9e.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 9
                },
                {
                    "bbox": [
                        77,
                        698,
                        477,
                        726
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                77,
                                698,
                                477,
                                726
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        77,
                                        698,
                                        477,
                                        726
                                    ],
                                    "type": "text",
                                    "content": "where "
                                },
                                {
                                    "bbox": [
                                        77,
                                        698,
                                        477,
                                        726
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{c}^{i} = (c_{1}^{i}, \\ldots , c_{k}^{i})^{\\top}"
                                },
                                {
                                    "bbox": [
                                        77,
                                        698,
                                        477,
                                        726
                                    ],
                                    "type": "text",
                                    "content": ", with "
                                },
                                {
                                    "bbox": [
                                        77,
                                        698,
                                        477,
                                        726
                                    ],
                                    "type": "inline_equation",
                                    "content": "c_{j}^{i} \\in \\{0, \\ldots , n\\}"
                                },
                                {
                                    "bbox": [
                                        77,
                                        698,
                                        477,
                                        726
                                    ],
                                    "type": "text",
                                    "content": " for "
                                },
                                {
                                    "bbox": [
                                        77,
                                        698,
                                        477,
                                        726
                                    ],
                                    "type": "inline_equation",
                                    "content": "j = 1, \\ldots , k"
                                },
                                {
                                    "bbox": [
                                        77,
                                        698,
                                        477,
                                        726
                                    ],
                                    "type": "text",
                                    "content": " and "
                                },
                                {
                                    "bbox": [
                                        77,
                                        698,
                                        477,
                                        726
                                    ],
                                    "type": "inline_equation",
                                    "content": "i = 1, \\ldots , (n + 1)^{k}"
                                },
                                {
                                    "bbox": [
                                        77,
                                        698,
                                        477,
                                        726
                                    ],
                                    "type": "text",
                                    "content": ". This defines a feature for each of the "
                                },
                                {
                                    "bbox": [
                                        77,
                                        698,
                                        477,
                                        726
                                    ],
                                    "type": "inline_equation",
                                    "content": "(n + 1)^{k}"
                                },
                                {
                                    "bbox": [
                                        77,
                                        698,
                                        477,
                                        726
                                    ],
                                    "type": "text",
                                    "content": " possible integer vectors "
                                },
                                {
                                    "bbox": [
                                        77,
                                        698,
                                        477,
                                        726
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{c}^{i}"
                                },
                                {
                                    "bbox": [
                                        77,
                                        698,
                                        477,
                                        726
                                    ],
                                    "type": "text",
                                    "content": ". The inner"
                                }
                            ]
                        }
                    ],
                    "index": 10
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 15
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        117,
                        147,
                        516,
                        201
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                147,
                                516,
                                201
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        147,
                                        516,
                                        201
                                    ],
                                    "type": "text",
                                    "content": "product "
                                },
                                {
                                    "bbox": [
                                        117,
                                        147,
                                        516,
                                        201
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{s}^{\\top}\\mathbf{c}^{i}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        147,
                                        516,
                                        201
                                    ],
                                    "type": "text",
                                    "content": " has the effect of assigning an integer in "
                                },
                                {
                                    "bbox": [
                                        117,
                                        147,
                                        516,
                                        201
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\{0,\\ldots ,n\\}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        147,
                                        516,
                                        201
                                    ],
                                    "type": "text",
                                    "content": " to each dimension of "
                                },
                                {
                                    "bbox": [
                                        117,
                                        147,
                                        516,
                                        201
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{s}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        147,
                                        516,
                                        201
                                    ],
                                    "type": "text",
                                    "content": ". As in the one- dimensional case, this integer determines the feature's frequency along that dimension. The features can of course be shifted and scaled to suit the bounded state space of a particular application."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        104,
                        214,
                        530,
                        347
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                214,
                                530,
                                347
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "text",
                                    "content": "As an example, consider the "
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "inline_equation",
                                    "content": "k = 2"
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "text",
                                    "content": " case in which "
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{s} = (s_{1},s_{2})^{\\top}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "text",
                                    "content": ", where each "
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{c}^{i} = (c_{1}^{i},c_{2}^{i})^{\\top}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "text",
                                    "content": ". Figure 9.4 shows a selection of six Fourier cosine features, each labeled by the vector "
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{c}^{i}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "text",
                                    "content": " that defines it ("
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "inline_equation",
                                    "content": "s_{1}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "text",
                                    "content": " is the horizontal axis and "
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{c}^{i}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "text",
                                    "content": " is shown as a row vector with the index "
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "inline_equation",
                                    "content": "i"
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "text",
                                    "content": " omitted). Any zero in "
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{c}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "text",
                                    "content": " means the feature is constant along that state dimension. So if "
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{c} = (0,0)^{\\top}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "text",
                                    "content": ", the feature is constant over both dimensions; if "
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{c} = (c_{1},0)^{\\top}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "text",
                                    "content": " the feature is constant over the second dimension and varies over the first with frequency depending on "
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "inline_equation",
                                    "content": "c_{1}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "text",
                                    "content": "; and similarly, for "
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{c} = (0,c_{2})^{\\top}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "text",
                                    "content": ". When "
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{c} = (c_{1},c_{2})^{\\top}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "text",
                                    "content": " with neither "
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "inline_equation",
                                    "content": "c_{j} = 0"
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "text",
                                    "content": ", the feature varies along both dimensions and represents an interaction between the two state variables. The values of "
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "inline_equation",
                                    "content": "c_{1}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "text",
                                    "content": " and "
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "inline_equation",
                                    "content": "c_{2}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        214,
                                        530,
                                        347
                                    ],
                                    "type": "text",
                                    "content": " determine the frequency along each dimension, and their ratio gives the direction of the interaction."
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "type": "image",
                    "bbox": [
                        94,
                        357,
                        537,
                        600
                    ],
                    "blocks": [
                        {
                            "bbox": [
                                94,
                                357,
                                537,
                                600
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        94,
                                        357,
                                        537,
                                        600
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                94,
                                                357,
                                                537,
                                                600
                                            ],
                                            "type": "image",
                                            "image_path": "9dfe97f08c679c4760d7d1d54df02d97f963e272882543584139a105b2197d56.jpg"
                                        }
                                    ]
                                }
                            ],
                            "index": 2,
                            "type": "image_body"
                        },
                        {
                            "bbox": [
                                104,
                                608,
                                530,
                                645
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        104,
                                        608,
                                        530,
                                        645
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                104,
                                                608,
                                                530,
                                                645
                                            ],
                                            "type": "text",
                                            "content": "Figure 9.4: A selection of six two-dimensional Fourier cosine features, each labeled by the vector "
                                        },
                                        {
                                            "bbox": [
                                                104,
                                                608,
                                                530,
                                                645
                                            ],
                                            "type": "inline_equation",
                                            "content": "\\mathbf{c}^{i}"
                                        },
                                        {
                                            "bbox": [
                                                104,
                                                608,
                                                530,
                                                645
                                            ],
                                            "type": "text",
                                            "content": " that defines it ("
                                        },
                                        {
                                            "bbox": [
                                                104,
                                                608,
                                                530,
                                                645
                                            ],
                                            "type": "inline_equation",
                                            "content": "s_{1}"
                                        },
                                        {
                                            "bbox": [
                                                104,
                                                608,
                                                530,
                                                645
                                            ],
                                            "type": "text",
                                            "content": " is the horizontal axis, and "
                                        },
                                        {
                                            "bbox": [
                                                104,
                                                608,
                                                530,
                                                645
                                            ],
                                            "type": "inline_equation",
                                            "content": "\\mathbf{c}^{i}"
                                        },
                                        {
                                            "bbox": [
                                                104,
                                                608,
                                                530,
                                                645
                                            ],
                                            "type": "text",
                                            "content": " is shown with the index "
                                        },
                                        {
                                            "bbox": [
                                                104,
                                                608,
                                                530,
                                                645
                                            ],
                                            "type": "inline_equation",
                                            "content": "i"
                                        },
                                        {
                                            "bbox": [
                                                104,
                                                608,
                                                530,
                                                645
                                            ],
                                            "type": "text",
                                            "content": " omitted). After Konidaris et al. (2011)."
                                        }
                                    ]
                                }
                            ],
                            "index": 3,
                            "type": "image_caption"
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        104,
                        660,
                        531,
                        728
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                660,
                                531,
                                728
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        660,
                                        531,
                                        728
                                    ],
                                    "type": "text",
                                    "content": "When using Fourier cosine features with a learning algorithm such as (9.7), semigradient "
                                },
                                {
                                    "bbox": [
                                        104,
                                        660,
                                        531,
                                        728
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathrm{TD}(0)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        660,
                                        531,
                                        728
                                    ],
                                    "type": "text",
                                    "content": ", or semi- gradient Sarsa, it may be helpful to use a different step- size parameter for each feature. If "
                                },
                                {
                                    "bbox": [
                                        104,
                                        660,
                                        531,
                                        728
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\alpha"
                                },
                                {
                                    "bbox": [
                                        104,
                                        660,
                                        531,
                                        728
                                    ],
                                    "type": "text",
                                    "content": " is the basic step- size parameter, then Konidaris, Osentoski, and Thomas (2011) suggest setting the step- size parameter for feature "
                                },
                                {
                                    "bbox": [
                                        104,
                                        660,
                                        531,
                                        728
                                    ],
                                    "type": "inline_equation",
                                    "content": "x_{i}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        660,
                                        531,
                                        728
                                    ],
                                    "type": "text",
                                    "content": " to "
                                },
                                {
                                    "bbox": [
                                        104,
                                        660,
                                        531,
                                        728
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\alpha_{i} = \\alpha /\\sqrt{(c_{1}^{i})^{2} + \\cdots + (c_{k}^{i})^{2}}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        660,
                                        531,
                                        728
                                    ],
                                    "type": "text",
                                    "content": " (except when each "
                                },
                                {
                                    "bbox": [
                                        104,
                                        660,
                                        531,
                                        728
                                    ],
                                    "type": "inline_equation",
                                    "content": "c_{j}^{i} = 0"
                                },
                                {
                                    "bbox": [
                                        104,
                                        660,
                                        531,
                                        728
                                    ],
                                    "type": "text",
                                    "content": ", in which case "
                                },
                                {
                                    "bbox": [
                                        104,
                                        660,
                                        531,
                                        728
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\alpha_{i} = \\alpha"
                                },
                                {
                                    "bbox": [
                                        104,
                                        660,
                                        531,
                                        728
                                    ],
                                    "type": "text",
                                    "content": ")."
                                }
                            ]
                        }
                    ],
                    "index": 4
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 16
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        64,
                        141,
                        490,
                        206
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                141,
                                490,
                                206
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        141,
                                        490,
                                        206
                                    ],
                                    "type": "text",
                                    "content": "Fourier cosine features with Sarsa can produce good performance compared to several other collections of basis functions, including polynomial and radial basis functions. Not surprisingly, however, Fourier features have trouble with discontinuities because it is difficult to avoid \"ringing\" around points of discontinuity unless very high frequency basis functions are included."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        64,
                        208,
                        490,
                        394
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                208,
                                490,
                                394
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        208,
                                        490,
                                        394
                                    ],
                                    "type": "text",
                                    "content": "The number of features in the order- "
                                },
                                {
                                    "bbox": [
                                        64,
                                        208,
                                        490,
                                        394
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        64,
                                        208,
                                        490,
                                        394
                                    ],
                                    "type": "text",
                                    "content": " Fourier basis grows exponentially with the dimension of the state space, but if that dimension is small enough (e.g., "
                                },
                                {
                                    "bbox": [
                                        64,
                                        208,
                                        490,
                                        394
                                    ],
                                    "type": "inline_equation",
                                    "content": "k \\leq 5"
                                },
                                {
                                    "bbox": [
                                        64,
                                        208,
                                        490,
                                        394
                                    ],
                                    "type": "text",
                                    "content": "), then one can select "
                                },
                                {
                                    "bbox": [
                                        64,
                                        208,
                                        490,
                                        394
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        64,
                                        208,
                                        490,
                                        394
                                    ],
                                    "type": "text",
                                    "content": " so that all of the order- "
                                },
                                {
                                    "bbox": [
                                        64,
                                        208,
                                        490,
                                        394
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        64,
                                        208,
                                        490,
                                        394
                                    ],
                                    "type": "text",
                                    "content": " Fourier features can be used. This makes the selection of features more or less automatic. For high dimension state spaces, however, it is necessary to select a subset of these features. This can be done using prior beliefs about the nature of the function to be approximated, and some automated selection methods can be adapted to deal with the incremental and nonstationary nature of reinforcement learning. An advantage of Fourier basis features in this regard is that it is easy to select features by setting the "
                                },
                                {
                                    "bbox": [
                                        64,
                                        208,
                                        490,
                                        394
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{c}^i"
                                },
                                {
                                    "bbox": [
                                        64,
                                        208,
                                        490,
                                        394
                                    ],
                                    "type": "text",
                                    "content": " vectors to account for suspected interactions among the state variables and by limiting the values in the "
                                },
                                {
                                    "bbox": [
                                        64,
                                        208,
                                        490,
                                        394
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{c}^j"
                                },
                                {
                                    "bbox": [
                                        64,
                                        208,
                                        490,
                                        394
                                    ],
                                    "type": "text",
                                    "content": " vectors so that the approximation can filter out high frequency components considered to be noise. On the other hand, because Fourier features are non- zero over the entire state space (with the few zeros excepted), they represent global properties of states, which can make it difficult to find good ways to represent local properties."
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        64,
                        395,
                        490,
                        434
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                395,
                                490,
                                434
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        395,
                                        490,
                                        434
                                    ],
                                    "type": "text",
                                    "content": "Figure 9.5 shows learning curves comparing the Fourier and polynomial bases on the 1000- state random walk example. In general, we do not recommend using polynomials for online learning."
                                },
                                {
                                    "bbox": [
                                        64,
                                        395,
                                        490,
                                        434
                                    ],
                                    "type": "inline_equation",
                                    "content": "^2"
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "type": "image",
                    "bbox": [
                        93,
                        449,
                        413,
                        625
                    ],
                    "blocks": [
                        {
                            "bbox": [
                                93,
                                449,
                                413,
                                625
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        93,
                                        449,
                                        413,
                                        625
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                93,
                                                449,
                                                413,
                                                625
                                            ],
                                            "type": "image",
                                            "image_path": "f969f817e7cb663a109ea15204e67aba2bc254fb5252c9e8de3bf048092b37d9.jpg"
                                        }
                                    ]
                                }
                            ],
                            "index": 3,
                            "type": "image_body"
                        },
                        {
                            "bbox": [
                                64,
                                639,
                                490,
                                700
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        64,
                                        639,
                                        490,
                                        700
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                64,
                                                639,
                                                490,
                                                700
                                            ],
                                            "type": "text",
                                            "content": "Figure 9.5: Fourier basis vs polynomials on the 1000-state random walk. Shown are learning curves for the gradient Monte Carlo method with Fourier and polynomial bases of order 5, 10, and 20. The step-size parameters were roughly optimized for each case: "
                                        },
                                        {
                                            "bbox": [
                                                64,
                                                639,
                                                490,
                                                700
                                            ],
                                            "type": "inline_equation",
                                            "content": "\\alpha = 0.0001"
                                        },
                                        {
                                            "bbox": [
                                                64,
                                                639,
                                                490,
                                                700
                                            ],
                                            "type": "text",
                                            "content": " for the polynomial basis and "
                                        },
                                        {
                                            "bbox": [
                                                64,
                                                639,
                                                490,
                                                700
                                            ],
                                            "type": "inline_equation",
                                            "content": "\\alpha = 0.00005"
                                        },
                                        {
                                            "bbox": [
                                                64,
                                                639,
                                                490,
                                                700
                                            ],
                                            "type": "text",
                                            "content": " for the Fourier basis. The performance measure (y-axis) is the root mean square value error (9.1)."
                                        }
                                    ]
                                }
                            ],
                            "index": 4,
                            "type": "image_caption"
                        }
                    ],
                    "index": 3
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 17
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        104,
                        138,
                        248,
                        154
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                138,
                                248,
                                154
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        138,
                                        248,
                                        154
                                    ],
                                    "type": "text",
                                    "content": "9.5.3 Coarse Coding"
                                }
                            ]
                        }
                    ],
                    "index": 0,
                    "level": 1
                },
                {
                    "bbox": [
                        104,
                        164,
                        342,
                        363
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                164,
                                342,
                                363
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        164,
                                        342,
                                        363
                                    ],
                                    "type": "text",
                                    "content": "Consider a task in which the natural representation of the state set is a continuous twodimensional space. One kind of representation for this case is made up of features corresponding to circles in state space, as shown to the right. If the state is inside a circle, then the corresponding feature has the value 1 and is said to be present; otherwise the feature is 0 and is said to be absent. This kind of 1- 0- valued feature is called a binary feature. Given a state, which binary features are present indicate within which circles the state lies, and thus coarsely code for its location. Representing a state with features that overlap in this way (although they need not be circles or binary) is known as coarse coding."
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "type": "image",
                    "bbox": [
                        348,
                        180,
                        529,
                        332
                    ],
                    "blocks": [
                        {
                            "bbox": [
                                348,
                                180,
                                529,
                                332
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        348,
                                        180,
                                        529,
                                        332
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                348,
                                                180,
                                                529,
                                                332
                                            ],
                                            "type": "image",
                                            "image_path": "f1029f106f9184d6766800e225fe8700752cf527754ef2ead6632ec1b26ce287.jpg"
                                        }
                                    ]
                                }
                            ],
                            "index": 2,
                            "type": "image_body"
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        104,
                        365,
                        340,
                        443
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                365,
                                340,
                                443
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        365,
                                        340,
                                        443
                                    ],
                                    "type": "text",
                                    "content": "Assuming linear gradient- descent function approximation, consider the effect of the size and density of the circles. Corresponding to each circle is a single weight (a component of "
                                },
                                {
                                    "bbox": [
                                        104,
                                        365,
                                        340,
                                        443
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        365,
                                        340,
                                        443
                                    ],
                                    "type": "text",
                                    "content": " ) that is affected by learning. If we train at one state, a point in the space, then the weights of all circles"
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        348,
                        341,
                        530,
                        427
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                348,
                                341,
                                530,
                                427
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        348,
                                        341,
                                        530,
                                        427
                                    ],
                                    "type": "text",
                                    "content": "Figure 9.6: Coarse coding. Generalization from state "
                                },
                                {
                                    "bbox": [
                                        348,
                                        341,
                                        530,
                                        427
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        348,
                                        341,
                                        530,
                                        427
                                    ],
                                    "type": "text",
                                    "content": " to state "
                                },
                                {
                                    "bbox": [
                                        348,
                                        341,
                                        530,
                                        427
                                    ],
                                    "type": "inline_equation",
                                    "content": "s^{\\prime}"
                                },
                                {
                                    "bbox": [
                                        348,
                                        341,
                                        530,
                                        427
                                    ],
                                    "type": "text",
                                    "content": " depends on the number of their features whose receptive fields (in this case, circles) overlap. These states have one feature in common, so there will be slight generalization between them."
                                }
                            ]
                        }
                    ],
                    "index": 4
                },
                {
                    "bbox": [
                        104,
                        445,
                        530,
                        511
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                445,
                                530,
                                511
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        445,
                                        530,
                                        511
                                    ],
                                    "type": "text",
                                    "content": "intersecting that state will be affected. Thus, by (9.8), the approximate value function will be affected at all states within the union of the circles, with a greater effect the more circles a point has \"in common\" with the state, as shown in Figure 9.6. If the circles are small, then the generalization will be over a short distance, as in Figure 9.7 (left), whereas if they are large, it will be over a large distance, as in Figure 9.7 (middle). Moreover,"
                                }
                            ]
                        }
                    ],
                    "index": 5
                },
                {
                    "type": "image",
                    "bbox": [
                        95,
                        545,
                        530,
                        686
                    ],
                    "blocks": [
                        {
                            "bbox": [
                                95,
                                545,
                                530,
                                686
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        95,
                                        545,
                                        530,
                                        686
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                95,
                                                545,
                                                530,
                                                686
                                            ],
                                            "type": "image",
                                            "image_path": "b7584941992a77eac0ada617f4e264cc59cf7d1e8c64ed6900d0fed72d459dd2.jpg"
                                        }
                                    ]
                                }
                            ],
                            "index": 6,
                            "type": "image_body"
                        },
                        {
                            "bbox": [
                                104,
                                699,
                                530,
                                736
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        104,
                                        699,
                                        530,
                                        736
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                104,
                                                699,
                                                530,
                                                736
                                            ],
                                            "type": "text",
                                            "content": "Figure 9.7: Generalization in linear function approximation methods is determined by the sizes and shapes of the features' receptive fields. All three of these cases have roughly the same number and density of features."
                                        }
                                    ]
                                }
                            ],
                            "index": 7,
                            "type": "image_caption"
                        }
                    ],
                    "index": 6
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 18
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        64,
                        141,
                        489,
                        181
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                141,
                                489,
                                181
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        141,
                                        489,
                                        181
                                    ],
                                    "type": "text",
                                    "content": "the shape of the features will determine the nature of the generalization. For example, if they are not strictly circular, but are elongated in one direction, then generalization will be similarly affected, as in Figure 9.7 (right)."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        64,
                        182,
                        489,
                        261
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                182,
                                489,
                                261
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        182,
                                        489,
                                        261
                                    ],
                                    "type": "text",
                                    "content": "Features with large receptive fields give broad generalization, but might also seem to limit the learned function to a coarse approximation, unable to make discriminations much finer than the width of the receptive fields. Happily, this is not the case. Initial generalization from one point to another is indeed controlled by the size and shape of the receptive fields, but actually, the finest discrimination ultimately possible, is controlled more by the total number of features."
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        64,
                        266,
                        490,
                        479
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                266,
                                490,
                                479
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        266,
                                        490,
                                        479
                                    ],
                                    "type": "text",
                                    "content": "Example 9.3: Coarseness of Coarse Coding This example illustrates the effect on learning of the size of the receptive fields in coarse coding. Linear function approximation based on coarse coding and (9.7) was used to learn a one- dimensional square- wave function (shown at the top of Figure 9.8). The values of this function were used as the targets, "
                                },
                                {
                                    "bbox": [
                                        64,
                                        266,
                                        490,
                                        479
                                    ],
                                    "type": "inline_equation",
                                    "content": "U_{t}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        266,
                                        490,
                                        479
                                    ],
                                    "type": "text",
                                    "content": ". With just one dimension, the receptive fields were intervals rather than circles. Learning was repeated with three different sizes of the intervals: narrow, medium, and broad, as shown at the bottom of the figure. All three cases had the same density of features, about 50 over the extent of the function being learned. Training examples were generated uniformly at random over this extent. The step- size parameter was "
                                },
                                {
                                    "bbox": [
                                        64,
                                        266,
                                        490,
                                        479
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\alpha = \\frac{0.2}{n}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        266,
                                        490,
                                        479
                                    ],
                                    "type": "text",
                                    "content": ", where "
                                },
                                {
                                    "bbox": [
                                        64,
                                        266,
                                        490,
                                        479
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        64,
                                        266,
                                        490,
                                        479
                                    ],
                                    "type": "text",
                                    "content": " is the number of features that were present at one time. Figure 9.8 shows the functions learned in all three cases over the course of learning. Note that the width of the features had a strong effect early in learning. With broad features, the generalization tended to be broad; with narrow features, only the close neighbors of each trained point were changed, causing the function learned to be more bumpy. However, the final function learned was affected only slightly by the width of the features. Receptive field shape tends to have a strong effect on generalization but little effect on asymptotic solution quality."
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "type": "image",
                    "bbox": [
                        92,
                        498,
                        461,
                        701
                    ],
                    "blocks": [
                        {
                            "bbox": [
                                92,
                                498,
                                461,
                                701
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        92,
                                        498,
                                        461,
                                        701
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                92,
                                                498,
                                                461,
                                                701
                                            ],
                                            "type": "image",
                                            "image_path": "e5e480cc6d2e09cc99bb552a26643632f712fdbbf1fe5e4f1a39e7534903c80d.jpg"
                                        }
                                    ]
                                }
                            ],
                            "index": 3,
                            "type": "image_body"
                        },
                        {
                            "bbox": [
                                64,
                                712,
                                489,
                                737
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        64,
                                        712,
                                        489,
                                        737
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                64,
                                                712,
                                                489,
                                                737
                                            ],
                                            "type": "text",
                                            "content": "Figure 9.8: Example of feature width's strong effect on initial generalization (first row) and weak effect on asymptotic accuracy (last row)."
                                        }
                                    ]
                                }
                            ],
                            "index": 4,
                            "type": "image_caption"
                        }
                    ],
                    "index": 3
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 19
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        104,
                        138,
                        229,
                        154
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                138,
                                229,
                                154
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        138,
                                        229,
                                        154
                                    ],
                                    "type": "text",
                                    "content": "9.5.4 Tile Coding"
                                }
                            ]
                        }
                    ],
                    "index": 0,
                    "level": 1
                },
                {
                    "bbox": [
                        104,
                        162,
                        530,
                        202
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                162,
                                530,
                                202
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        162,
                                        530,
                                        202
                                    ],
                                    "type": "text",
                                    "content": "Tile coding is a form of coarse coding for multi- dimensional continuous spaces that is flexible and computationally efficient. It may be the most practical feature representation for modern sequential digital computers."
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        104,
                        203,
                        530,
                        323
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                203,
                                530,
                                323
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        203,
                                        530,
                                        323
                                    ],
                                    "type": "text",
                                    "content": "In the coding the receptive fields of the features are grouped into partitions of the state space. Each such partition is called a tiling, and each element of the partition is called a tile. For example, the simplest tiling of a two- dimensional state space is a uniform grid such as that shown on the left side of Figure 9.9. The tiles or receptive field here are squares rather than the circles in Figure 9.6. If just this single tiling were used, then the state indicated by the white spot would be represented by the single feature whose tile it falls within; generalization would be complete to all states within the same tile and nonexistent to states outside it. With just one tiling, we would not have coarse coding but just a case of state aggregation."
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "type": "image",
                    "bbox": [
                        96,
                        335,
                        536,
                        491
                    ],
                    "blocks": [
                        {
                            "bbox": [
                                96,
                                335,
                                536,
                                491
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        96,
                                        335,
                                        536,
                                        491
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                96,
                                                335,
                                                536,
                                                491
                                            ],
                                            "type": "image",
                                            "image_path": "776c41bb3936c6f9204ab61fbcce8c0f49dbc5fdc349693ade1e162da1fb6ed0.jpg"
                                        }
                                    ]
                                }
                            ],
                            "index": 3,
                            "type": "image_body"
                        },
                        {
                            "bbox": [
                                102,
                                501,
                                530,
                                526
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        102,
                                        501,
                                        530,
                                        526
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                102,
                                                501,
                                                530,
                                                526
                                            ],
                                            "type": "text",
                                            "content": "Figure 9.9: Multiple, overlapping grid-tilings on a limited two-dimensional space. These tilings are offset from one another by a uniform amount in each dimension."
                                        }
                                    ]
                                }
                            ],
                            "index": 4,
                            "type": "image_caption"
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        104,
                        539,
                        530,
                        672
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                539,
                                530,
                                672
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        539,
                                        530,
                                        672
                                    ],
                                    "type": "text",
                                    "content": "To get the strengths of coarse coding requires overlapping receptive fields, and by definition the tiles of a partition do not overlap. To get true coarse coding with tile coding, multiple tilings are used, each offset by a fraction of a tile width. A simple case with four tilings is shown on the right side of Figure 9.9. Every state, such as that indicated by the white spot, falls in exactly one tile in each of the four tilings. These four tiles correspond to four features that become active when the state occurs. Specifically, the feature vector "
                                },
                                {
                                    "bbox": [
                                        104,
                                        539,
                                        530,
                                        672
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{x}(s)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        539,
                                        530,
                                        672
                                    ],
                                    "type": "text",
                                    "content": " has one component for each tile in each tiling. In this example there are "
                                },
                                {
                                    "bbox": [
                                        104,
                                        539,
                                        530,
                                        672
                                    ],
                                    "type": "inline_equation",
                                    "content": "4 \\times 4 \\times 4 = 64"
                                },
                                {
                                    "bbox": [
                                        104,
                                        539,
                                        530,
                                        672
                                    ],
                                    "type": "text",
                                    "content": " components, all of which will be 0 except for the four corresponding to the tiles that "
                                },
                                {
                                    "bbox": [
                                        104,
                                        539,
                                        530,
                                        672
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        104,
                                        539,
                                        530,
                                        672
                                    ],
                                    "type": "text",
                                    "content": " falls within. Figure 9.10 shows the advantage of multiple offset tilings (coarse coding) over a single tiling on the 1000- state random walk example."
                                }
                            ]
                        }
                    ],
                    "index": 5
                },
                {
                    "bbox": [
                        104,
                        674,
                        530,
                        727
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                674,
                                530,
                                727
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        674,
                                        530,
                                        727
                                    ],
                                    "type": "text",
                                    "content": "An immediate practical advantage of tile coding is that, because it works with partitions, the overall number of features that are active at one time is the same for any state. Exactly one feature is present in each tiling, so the total number of features present is always the same as the number of tilings. This allows the step- size parameter, "
                                },
                                {
                                    "bbox": [
                                        104,
                                        674,
                                        530,
                                        727
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\alpha"
                                },
                                {
                                    "bbox": [
                                        104,
                                        674,
                                        530,
                                        727
                                    ],
                                    "type": "text",
                                    "content": ", to"
                                }
                            ]
                        }
                    ],
                    "index": 6
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 20
        },
        {
            "para_blocks": [
                {
                    "type": "image",
                    "bbox": [
                        133,
                        139,
                        372,
                        293
                    ],
                    "blocks": [
                        {
                            "bbox": [
                                133,
                                139,
                                372,
                                293
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        133,
                                        139,
                                        372,
                                        293
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                133,
                                                139,
                                                372,
                                                293
                                            ],
                                            "type": "image",
                                            "image_path": "279cf935ec6beacdd232291439213594620a25371d9b7a6c01ee7ba6cccf388a.jpg"
                                        }
                                    ]
                                }
                            ],
                            "index": 0,
                            "type": "image_body"
                        },
                        {
                            "bbox": [
                                64,
                                305,
                                489,
                                378
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        64,
                                        305,
                                        489,
                                        378
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                64,
                                                305,
                                                489,
                                                378
                                            ],
                                            "type": "text",
                                            "content": "Figure 9.10: Why we use coarse coding. Shown are learning curves on the 1000-state random walk example for the gradient Monte Carlo algorithm with a single tiling and with multiple tilings. The space of 1000 states was treated as a single continuous dimension, covered with tiles each 200 states wide. The multiple tilings were offset from each other by 4 states. The step-size parameter was set so that the initial learning rate in the two cases was the same, "
                                        },
                                        {
                                            "bbox": [
                                                64,
                                                305,
                                                489,
                                                378
                                            ],
                                            "type": "inline_equation",
                                            "content": "\\alpha = 0.0001"
                                        },
                                        {
                                            "bbox": [
                                                64,
                                                305,
                                                489,
                                                378
                                            ],
                                            "type": "text",
                                            "content": " for the single tiling and "
                                        },
                                        {
                                            "bbox": [
                                                64,
                                                305,
                                                489,
                                                378
                                            ],
                                            "type": "inline_equation",
                                            "content": "\\alpha = 0.0001 / 50"
                                        },
                                        {
                                            "bbox": [
                                                64,
                                                305,
                                                489,
                                                378
                                            ],
                                            "type": "text",
                                            "content": " for the 50 tilings."
                                        }
                                    ]
                                }
                            ],
                            "index": 1,
                            "type": "image_caption"
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        64,
                        405,
                        489,
                        511
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                405,
                                489,
                                511
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        405,
                                        489,
                                        511
                                    ],
                                    "type": "text",
                                    "content": "be set in an easy, intuitive way. For example, choosing "
                                },
                                {
                                    "bbox": [
                                        64,
                                        405,
                                        489,
                                        511
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\alpha = \\frac{1}{s}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        405,
                                        489,
                                        511
                                    ],
                                    "type": "text",
                                    "content": ", where "
                                },
                                {
                                    "bbox": [
                                        64,
                                        405,
                                        489,
                                        511
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        64,
                                        405,
                                        489,
                                        511
                                    ],
                                    "type": "text",
                                    "content": " is the number of tilings, results in exact one- trial learning. If the example "
                                },
                                {
                                    "bbox": [
                                        64,
                                        405,
                                        489,
                                        511
                                    ],
                                    "type": "inline_equation",
                                    "content": "s \\mapsto v"
                                },
                                {
                                    "bbox": [
                                        64,
                                        405,
                                        489,
                                        511
                                    ],
                                    "type": "text",
                                    "content": " is trained on, then whatever the prior estimate, "
                                },
                                {
                                    "bbox": [
                                        64,
                                        405,
                                        489,
                                        511
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{v} (s, \\mathbf{w}_t)"
                                },
                                {
                                    "bbox": [
                                        64,
                                        405,
                                        489,
                                        511
                                    ],
                                    "type": "text",
                                    "content": ", the new estimate will be "
                                },
                                {
                                    "bbox": [
                                        64,
                                        405,
                                        489,
                                        511
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{v} (s, \\mathbf{w}_{t + 1}) = v"
                                },
                                {
                                    "bbox": [
                                        64,
                                        405,
                                        489,
                                        511
                                    ],
                                    "type": "text",
                                    "content": ". Usually one wishes to change more slowly than this, to allow for generalization and stochastic variation in target outputs. For example, one might choose "
                                },
                                {
                                    "bbox": [
                                        64,
                                        405,
                                        489,
                                        511
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\alpha = \\frac{1}{10n}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        405,
                                        489,
                                        511
                                    ],
                                    "type": "text",
                                    "content": ", in which case the estimate for the trained state would move one- tenth of the way to the target in one update, and neighboring states will be moved less, proportional to the number of tiles they have in common."
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        64,
                        513,
                        489,
                        580
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                513,
                                489,
                                580
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        513,
                                        489,
                                        580
                                    ],
                                    "type": "text",
                                    "content": "Tile coding also gains computational advantages from its use of binary feature vectors. Because each component is either 0 or 1, the weighted sum making up the approximate value function (9.8) is almost trivial to compute. Rather than performing "
                                },
                                {
                                    "bbox": [
                                        64,
                                        513,
                                        489,
                                        580
                                    ],
                                    "type": "inline_equation",
                                    "content": "d"
                                },
                                {
                                    "bbox": [
                                        64,
                                        513,
                                        489,
                                        580
                                    ],
                                    "type": "text",
                                    "content": " multiplications and additions, one simply computes the indices of the "
                                },
                                {
                                    "bbox": [
                                        64,
                                        513,
                                        489,
                                        580
                                    ],
                                    "type": "inline_equation",
                                    "content": "n \\ll d"
                                },
                                {
                                    "bbox": [
                                        64,
                                        513,
                                        489,
                                        580
                                    ],
                                    "type": "text",
                                    "content": " active features and then adds up the "
                                },
                                {
                                    "bbox": [
                                        64,
                                        513,
                                        489,
                                        580
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        64,
                                        513,
                                        489,
                                        580
                                    ],
                                    "type": "text",
                                    "content": " corresponding components of the weight vector."
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        64,
                        580,
                        489,
                        740
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                580,
                                489,
                                740
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        580,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": "Generalization occurs to states other than the one trained if those states fall within any of the same tiles, proportional to the number of tiles in common. Even the choice of how to offset the tilings from each other affects generalization. If they are offset uniformly in each dimension, as they were in Figure 9.9, then different states can generalize in qualitatively different ways, as shown in the upper half of Figure 9.11. Each of the eight subfigures show the pattern of generalization from a trained state to nearby points. In this example there are eight tilings, thus 64 subregions within a tile that generalize distinctly, but all according to one of these eight patterns. Note how uniform offsets result in a strong effect along the diagonal in many patterns. These artifacts can be avoided if the tilings are offset asymmetrically, as shown in the lower half of the figure. These lower generalization patterns are better because they are all well centered on the trained state with no obvious asymmetries."
                                }
                            ]
                        }
                    ],
                    "index": 4
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 21
        },
        {
            "para_blocks": [
                {
                    "type": "image",
                    "bbox": [
                        101,
                        134,
                        538,
                        477
                    ],
                    "blocks": [
                        {
                            "bbox": [
                                101,
                                134,
                                538,
                                477
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        101,
                                        134,
                                        538,
                                        477
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                101,
                                                134,
                                                538,
                                                477
                                            ],
                                            "type": "image",
                                            "image_path": "d7f42e08266d63d51ee67217331104c30ba36f8706972a2586da8e28fe7f22d9.jpg"
                                        }
                                    ]
                                }
                            ],
                            "index": 0,
                            "type": "image_body"
                        },
                        {
                            "bbox": [
                                104,
                                485,
                                530,
                                547
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        104,
                                        485,
                                        530,
                                        547
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                104,
                                                485,
                                                530,
                                                547
                                            ],
                                            "type": "text",
                                            "content": "Figure 9.11: Why tile asymmetrical offsets are preferred in tile coding. Shown is the strength of generalization from a trained state, indicated by the small black plus, to nearby states, for the case of eight tilings. If the tilings are uniformly offset (above), then there are diagonal artifacts and substantial variations in the generalization, whereas with asymmetrically offset tilings the generalization is more spherical and homogeneous."
                                        }
                                    ]
                                }
                            ],
                            "index": 1,
                            "type": "image_caption"
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        104,
                        580,
                        531,
                        712
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                580,
                                531,
                                712
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        531,
                                        712
                                    ],
                                    "type": "text",
                                    "content": "Tilings in all cases are offset from each other by a fraction of a tile width in each dimension. If "
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        531,
                                        712
                                    ],
                                    "type": "inline_equation",
                                    "content": "w"
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        531,
                                        712
                                    ],
                                    "type": "text",
                                    "content": " denotes the tile width and "
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        531,
                                        712
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        531,
                                        712
                                    ],
                                    "type": "text",
                                    "content": " the number of tilings, then "
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        531,
                                        712
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\frac{w}{n}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        531,
                                        712
                                    ],
                                    "type": "text",
                                    "content": " is a fundamental unit. Within small squares "
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        531,
                                        712
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\frac{w}{n}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        531,
                                        712
                                    ],
                                    "type": "text",
                                    "content": " on a side, all states activate the same tiles, have the same feature representation, and the same approximated value. If a state is moved by "
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        531,
                                        712
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\frac{w}{n}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        531,
                                        712
                                    ],
                                    "type": "text",
                                    "content": " in any cartesian direction, the feature representation changes by one component/tile. Uniformly offset tilings are offset from each other by exactly this unit distance. For a two- dimensional space, we say that each tiling is offset by the displacement vector "
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        531,
                                        712
                                    ],
                                    "type": "inline_equation",
                                    "content": "(1,1)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        531,
                                        712
                                    ],
                                    "type": "text",
                                    "content": ", meaning that it is offset from the previous tiling by "
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        531,
                                        712
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\frac{w}{n}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        531,
                                        712
                                    ],
                                    "type": "text",
                                    "content": " times this vector. In these terms, the asymmetrically offset tilings shown in the lower part of Figure 9.11 are offset by a displacement vector of "
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        531,
                                        712
                                    ],
                                    "type": "inline_equation",
                                    "content": "(1,3)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        531,
                                        712
                                    ],
                                    "type": "text",
                                    "content": "."
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        104,
                        714,
                        530,
                        740
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                714,
                                530,
                                740
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        714,
                                        530,
                                        740
                                    ],
                                    "type": "text",
                                    "content": "Extensive studies have been made of the effect of different displacement vectors on the generalization of tile coding (Parks and Militzer, 1991; An, 1991; An, Miller and Parks,"
                                }
                            ]
                        }
                    ],
                    "index": 3
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 22
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        64,
                        140,
                        489,
                        273
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                140,
                                489,
                                273
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "text",
                                    "content": "1991; Miller, An, Glanz and Carter, 1990), assessing their homegeneity and tendency toward diagonal artifacts like those seen for the "
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "inline_equation",
                                    "content": "(1,1)"
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "text",
                                    "content": " displacement vectors. Based on this work, Miller and Glanz (1996) recommend using displacement vectors consisting of the first odd integers. In particular, for a continuous space of dimension "
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "inline_equation",
                                    "content": "k"
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "text",
                                    "content": ", a good choice is to use the first odd integers "
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "inline_equation",
                                    "content": "(1,3,5,7,\\ldots ,2k - 1)"
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "text",
                                    "content": ", with "
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "text",
                                    "content": " (the number of tilings) set to an integer power of 2 greater than or equal to "
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "inline_equation",
                                    "content": "4k"
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "text",
                                    "content": ". This is what we have done to produce the tilings in the lower half of Figure 9.11, in which "
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "inline_equation",
                                    "content": "k = 2"
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "text",
                                    "content": ", "
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "inline_equation",
                                    "content": "n = 2^{3} \\geq 4k"
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "text",
                                    "content": ", and the displacement vector is "
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "inline_equation",
                                    "content": "(1,3)"
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "text",
                                    "content": ". In a three- dimensional case, the first four tilings would be offset in total from a base position by "
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "inline_equation",
                                    "content": "(0,0,0)"
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "text",
                                    "content": ", "
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "inline_equation",
                                    "content": "(1,3,5)"
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "text",
                                    "content": ", "
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "inline_equation",
                                    "content": "(2,6,10)"
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "text",
                                    "content": ", and "
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "inline_equation",
                                    "content": "(3,9,15)"
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "text",
                                    "content": ". Open- source software that can efficiently make tilings like this for any "
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "inline_equation",
                                    "content": "k"
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        273
                                    ],
                                    "type": "text",
                                    "content": " is readily available."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        64,
                        274,
                        489,
                        447
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                274,
                                489,
                                447
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        274,
                                        489,
                                        447
                                    ],
                                    "type": "text",
                                    "content": "In choosing a tiling strategy, one has to pick the number of the tilings and the shape of the tiles. The number of tilings, along with the size of the tiles, determines the resolution or fineness of the asymptotic approximation, as in general coarse coding and illustrated in Figure 9.8. The shape of the tiles will determine the nature of generalization as in Figure 9.7. Square tiles will generalize roughly equally in each dimension as indicated in Figure 9.11 (lower). Tiles that are elongated along one dimension, such as the stripe tilings in Figure 9.12 (middle), will promote generalization along that dimension. The tilings in Figure 9.12 (middle) are also denser and thinner on the left, promoting discrimination along the horizontal dimension at lower values along that dimension. The diagonal stripe tiling in Figure 9.12 (right) will promote generalization along one diagonal. In higher dimensions, axis- aligned stripes correspond to ignoring some of the dimensions in some of the tilings, that is, to hyperplanar slices. Irregular tilings such as shown in Figure 9.12 (left) are also possible, though rare in practice and beyond the standard software."
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "type": "image",
                    "bbox": [
                        119,
                        463,
                        211,
                        554
                    ],
                    "blocks": [
                        {
                            "bbox": [
                                119,
                                463,
                                211,
                                554
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        119,
                                        463,
                                        211,
                                        554
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                119,
                                                463,
                                                211,
                                                554
                                            ],
                                            "type": "image",
                                            "image_path": "bd65207930ffaaecee0943e9f8a0861d1dc3da6381e2d603245e1539d0003bff.jpg"
                                        }
                                    ]
                                }
                            ],
                            "index": 2,
                            "type": "image_body"
                        },
                        {
                            "bbox": [
                                150,
                                559,
                                189,
                                570
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        150,
                                        559,
                                        189,
                                        570
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                150,
                                                559,
                                                189,
                                                570
                                            ],
                                            "type": "text",
                                            "content": "Irregular"
                                        }
                                    ]
                                }
                            ],
                            "index": 3,
                            "type": "image_caption"
                        }
                    ],
                    "index": 2
                },
                {
                    "type": "image",
                    "bbox": [
                        230,
                        463,
                        320,
                        554
                    ],
                    "blocks": [
                        {
                            "bbox": [
                                230,
                                463,
                                320,
                                554
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        230,
                                        463,
                                        320,
                                        554
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                230,
                                                463,
                                                320,
                                                554
                                            ],
                                            "type": "image",
                                            "image_path": "a2ab7645c9824503b4c141d4082800dbe53ca603f57c5eb3c236d7e45d584598.jpg"
                                        }
                                    ]
                                }
                            ],
                            "index": 4,
                            "type": "image_body"
                        },
                        {
                            "bbox": [
                                255,
                                559,
                                305,
                                570
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        255,
                                        559,
                                        305,
                                        570
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                255,
                                                559,
                                                305,
                                                570
                                            ],
                                            "type": "text",
                                            "content": "Log stripes"
                                        }
                                    ]
                                }
                            ],
                            "index": 5,
                            "type": "image_caption"
                        }
                    ],
                    "index": 4
                },
                {
                    "type": "image",
                    "bbox": [
                        342,
                        463,
                        433,
                        554
                    ],
                    "blocks": [
                        {
                            "bbox": [
                                342,
                                463,
                                433,
                                554
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        342,
                                        463,
                                        433,
                                        554
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                342,
                                                463,
                                                433,
                                                554
                                            ],
                                            "type": "image",
                                            "image_path": "5380c30bfec7b0ff3d87f16f4c7b6a89d2f3214936003c1899522d04de3b600e.jpg"
                                        }
                                    ]
                                }
                            ],
                            "index": 6,
                            "type": "image_body"
                        },
                        {
                            "bbox": [
                                358,
                                559,
                                429,
                                570
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        358,
                                        559,
                                        429,
                                        570
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                358,
                                                559,
                                                429,
                                                570
                                            ],
                                            "type": "text",
                                            "content": "Diagonal stripes  Figure 9.12: Tilings need not be grids. They can be arbitrarily shaped and non-uniform, while still in many cases being computationally efficient to compute."
                                        }
                                    ]
                                }
                            ],
                            "index": 7,
                            "type": "image_caption"
                        }
                    ],
                    "index": 6
                },
                {
                    "bbox": [
                        64,
                        620,
                        489,
                        740
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                620,
                                489,
                                740
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        620,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": "In practice, it is often desirable to use different shaped tiles in different tilings. For example, one might use some vertical stripe tilings and some horizontal stripe tilings. This would encourage generalization along either dimension. However, with stripe tilings alone it is not possible to learn that a particular conjunction of horizontal and vertical coordinates has a distinctive value (whatever is learned for it will bleed into states with the same horizontal and vertical coordinates). For this one needs the conjunctive rectangular tiles such as originally shown in Figure 9.9. With multiple tilings—some horizontal, some vertical, and some conjunctive—one can get everything: a preference for generalizing along each dimension, yet the ability to learn specific values for conjunctions (see Sutton,"
                                }
                            ]
                        }
                    ],
                    "index": 8
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 23
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        104,
                        141,
                        530,
                        180
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                141,
                                530,
                                180
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        141,
                                        530,
                                        180
                                    ],
                                    "type": "text",
                                    "content": "1996 for examples). The choice of tilings determines generalization, and until this choice can be effectively automated, it is important that tile coding enables the choice to be made flexibly and in a way that makes sense to people."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        104,
                        181,
                        530,
                        222
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                181,
                                530,
                                222
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        181,
                                        530,
                                        222
                                    ],
                                    "type": "text",
                                    "content": "Another useful trick for reducing memory requirements is hashing—a consistent pseudorandom collapsing of a large tiling into a much smaller set of tiles. Hashing produces tiles consisting of noncontiguous, disjoint regions randomly spread throughout the state space, but that still form an exhaustive partition. For example,"
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        104,
                        222,
                        407,
                        354
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                222,
                                407,
                                354
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        222,
                                        407,
                                        354
                                    ],
                                    "type": "text",
                                    "content": "one tile might consist of the four subtiles shown to the right. Through hashing, memory requirements are often reduced by large factors with little loss of performance. This is possible because high resolution is needed in only a small fraction of the state space. Hashing frees us from the curse of dimensionality in the sense that memory requirements need not be exponential in the number of dimensions, but need merely match the real demands of the task. Open- source implementations of tile coding commonly include efficient hashing."
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "type": "image",
                    "bbox": [
                        424,
                        229,
                        528,
                        335
                    ],
                    "blocks": [
                        {
                            "bbox": [
                                424,
                                229,
                                528,
                                335
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        424,
                                        229,
                                        528,
                                        335
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                424,
                                                229,
                                                528,
                                                335
                                            ],
                                            "type": "image",
                                            "image_path": "d1f76f6a76524048f462c45960cfa3a70ab8db6fafbf68ceea183662200c687b.jpg"
                                        }
                                    ]
                                }
                            ],
                            "index": 3,
                            "type": "image_body"
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        104,
                        358,
                        530,
                        412
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                358,
                                530,
                                412
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        358,
                                        530,
                                        412
                                    ],
                                    "type": "text",
                                    "content": "Exercise 9.4 Suppose we believe that one of two state dimensions is more likely to have an effect on the value function than is the other, that generalization should be primarily across this dimension rather than along it. What kind of tilings could be used to take advantage of this prior knowledge?"
                                }
                            ]
                        }
                    ],
                    "index": 4
                },
                {
                    "bbox": [
                        104,
                        428,
                        300,
                        443
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                428,
                                300,
                                443
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        428,
                                        300,
                                        443
                                    ],
                                    "type": "text",
                                    "content": "9.5.5 Radial Basis Functions"
                                }
                            ]
                        }
                    ],
                    "index": 5,
                    "level": 1
                },
                {
                    "bbox": [
                        104,
                        452,
                        530,
                        532
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                452,
                                530,
                                532
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        452,
                                        530,
                                        532
                                    ],
                                    "type": "text",
                                    "content": "Radial basis functions (RBFs) are the natural generalization of coarse coding to continuous- valued features. Rather than each feature being either 0 or 1, it can be anything in the interval "
                                },
                                {
                                    "bbox": [
                                        104,
                                        452,
                                        530,
                                        532
                                    ],
                                    "type": "inline_equation",
                                    "content": "[0,1]"
                                },
                                {
                                    "bbox": [
                                        104,
                                        452,
                                        530,
                                        532
                                    ],
                                    "type": "text",
                                    "content": ", reflecting various degrees to which the feature is present. A typical RBF feature, "
                                },
                                {
                                    "bbox": [
                                        104,
                                        452,
                                        530,
                                        532
                                    ],
                                    "type": "inline_equation",
                                    "content": "x_{i}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        452,
                                        530,
                                        532
                                    ],
                                    "type": "text",
                                    "content": ", has a Gaussian (bell- shaped) response "
                                },
                                {
                                    "bbox": [
                                        104,
                                        452,
                                        530,
                                        532
                                    ],
                                    "type": "inline_equation",
                                    "content": "x_{i}(s)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        452,
                                        530,
                                        532
                                    ],
                                    "type": "text",
                                    "content": " dependent only on the distance between the state, "
                                },
                                {
                                    "bbox": [
                                        104,
                                        452,
                                        530,
                                        532
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        104,
                                        452,
                                        530,
                                        532
                                    ],
                                    "type": "text",
                                    "content": ", and the feature's prototypical or center state, "
                                },
                                {
                                    "bbox": [
                                        104,
                                        452,
                                        530,
                                        532
                                    ],
                                    "type": "inline_equation",
                                    "content": "c_{i}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        452,
                                        530,
                                        532
                                    ],
                                    "type": "text",
                                    "content": ", and relative to the feature's width, "
                                },
                                {
                                    "bbox": [
                                        104,
                                        452,
                                        530,
                                        532
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\sigma_{i}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        452,
                                        530,
                                        532
                                    ],
                                    "type": "text",
                                    "content": "."
                                }
                            ]
                        }
                    ],
                    "index": 6
                },
                {
                    "bbox": [
                        132,
                        542,
                        268,
                        571
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                132,
                                542,
                                268,
                                571
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        132,
                                        542,
                                        268,
                                        571
                                    ],
                                    "type": "interline_equation",
                                    "content": "x_{i}(s) \\doteq \\exp \\left(-\\frac{||s - c_{i}||^{2}}{2\\sigma_{i}^{2}}\\right).",
                                    "image_path": "8eaa1901016a40a7b0c52e3586fb0ded71de6eafaaa65b9e140e1ad0eb663390.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 7
                },
                {
                    "bbox": [
                        104,
                        580,
                        530,
                        619
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                580,
                                530,
                                619
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        530,
                                        619
                                    ],
                                    "type": "text",
                                    "content": "The norm or distance metric of course can be chosen in whatever way seems most appropriate to the states and task at hand. The figure below shows a one- dimensional example with a Euclidean distance metric."
                                }
                            ]
                        }
                    ],
                    "index": 8
                },
                {
                    "type": "image",
                    "bbox": [
                        196,
                        631,
                        437,
                        703
                    ],
                    "blocks": [
                        {
                            "bbox": [
                                196,
                                631,
                                437,
                                703
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        196,
                                        631,
                                        437,
                                        703
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                196,
                                                631,
                                                437,
                                                703
                                            ],
                                            "type": "image",
                                            "image_path": "77f37a5fb88b881fad9a902039789753decca2972f99e11d7ebb175b8320a17d.jpg"
                                        }
                                    ]
                                }
                            ],
                            "index": 9,
                            "type": "image_body"
                        },
                        {
                            "bbox": [
                                195,
                                708,
                                438,
                                720
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        195,
                                        708,
                                        438,
                                        720
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                195,
                                                708,
                                                438,
                                                720
                                            ],
                                            "type": "text",
                                            "content": "Figure 9.13: One-dimensional radial basis functions."
                                        }
                                    ]
                                }
                            ],
                            "index": 10,
                            "type": "image_caption"
                        }
                    ],
                    "index": 9
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 24
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        64,
                        141,
                        489,
                        260
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                141,
                                489,
                                260
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        141,
                                        489,
                                        260
                                    ],
                                    "type": "text",
                                    "content": "The primary advantage of RBFs over binary features is that they produce approximate functions that vary smoothly and are differentiable. Although this is appealing, in most cases it has no practical significance. Nevertheless, extensive studies have been made of graded response functions such as RBFs in the context of tile coding (An, 1991; Miller et al., 1991; An et al., 1991; Lane, Handelman and Gelfand, 1992). All of these methods require substantial additional computational complexity (over tile coding) and often reduce performance when there are more than two state dimensions. In high dimensions the edges of tiles are much more important, and it has proven difficult to obtain well controlled graded tile activations near the edges."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        64,
                        261,
                        490,
                        354
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                261,
                                490,
                                354
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        261,
                                        490,
                                        354
                                    ],
                                    "type": "text",
                                    "content": "An RBF network is a linear function approximator using RBFs for its features. Learning is defined by equations (9.7) and (9.8), exactly as in other linear function approximators. In addition, some learning methods for RBF networks change the centers and widths of the features as well, bringing them into the realm of nonlinear function approximators. Nonlinear methods may be able to fit target functions much more precisely. The downside to RBF networks, and to nonlinear RBF networks especially, is greater computational complexity and, often, more manual tuning before learning is robust and efficient."
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        64,
                        376,
                        428,
                        394
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                376,
                                428,
                                394
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        376,
                                        428,
                                        394
                                    ],
                                    "type": "text",
                                    "content": "9.6 Selecting Step-Size Parameters Manually"
                                }
                            ]
                        }
                    ],
                    "index": 2,
                    "level": 1
                },
                {
                    "bbox": [
                        64,
                        406,
                        489,
                        472
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                406,
                                489,
                                472
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        406,
                                        489,
                                        472
                                    ],
                                    "type": "text",
                                    "content": "Most SGD methods require the designer to select an appropriate step- size parameter "
                                },
                                {
                                    "bbox": [
                                        64,
                                        406,
                                        489,
                                        472
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\alpha"
                                },
                                {
                                    "bbox": [
                                        64,
                                        406,
                                        489,
                                        472
                                    ],
                                    "type": "text",
                                    "content": ". Ideally this selection would be automated, and in some cases it has been, but for most cases it is still common practice to set it manually. To do this, and to better understand the algorithms, it is useful to develop some intuitive sense of the role of the step- size parameter. Can we say in general how it should be set?"
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        64,
                        474,
                        490,
                        618
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                474,
                                490,
                                618
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        474,
                                        490,
                                        618
                                    ],
                                    "type": "text",
                                    "content": "Theoretical considerations are unfortunately of little help. The theory of stochastic approximation gives us conditions (2.7) on a slowly decreasing step- size sequence that are sufficient to guarantee convergence, but these tend to result in learning that is too slow. The classical choice "
                                },
                                {
                                    "bbox": [
                                        64,
                                        474,
                                        490,
                                        618
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\alpha_{t} = 1 / t"
                                },
                                {
                                    "bbox": [
                                        64,
                                        474,
                                        490,
                                        618
                                    ],
                                    "type": "text",
                                    "content": ", which produces sample averages in tabular MC methods, is not appropriate for TD methods, for nonstationary problems, or for any method using function approximation. For linear methods, there are recursive least- squares methods that set an optimal matrix step size, and these methods can be extended to temporal- difference learning as in the LSTD method described in Section 9.8, but these require "
                                },
                                {
                                    "bbox": [
                                        64,
                                        474,
                                        490,
                                        618
                                    ],
                                    "type": "inline_equation",
                                    "content": "O(d^{2})"
                                },
                                {
                                    "bbox": [
                                        64,
                                        474,
                                        490,
                                        618
                                    ],
                                    "type": "text",
                                    "content": " step- size parameters, or "
                                },
                                {
                                    "bbox": [
                                        64,
                                        474,
                                        490,
                                        618
                                    ],
                                    "type": "inline_equation",
                                    "content": "t"
                                },
                                {
                                    "bbox": [
                                        64,
                                        474,
                                        490,
                                        618
                                    ],
                                    "type": "text",
                                    "content": "- times more parameters than we are learning. For this reason we rule them out for use on large problems where function approximation is most needed."
                                }
                            ]
                        }
                    ],
                    "index": 4
                },
                {
                    "bbox": [
                        64,
                        621,
                        489,
                        740
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                621,
                                489,
                                740
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        621,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": "To get some intuitive feel for how to set the step- size parameter manually, it is best to go back momentarily to the tabular case. There we can understand that a step size of "
                                },
                                {
                                    "bbox": [
                                        64,
                                        621,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\alpha = 1"
                                },
                                {
                                    "bbox": [
                                        64,
                                        621,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " will result in a complete elimination of the sample error after one target (see (2.4) with a step size of one). As discussed on page 201, we usually want to learn slower than this. In the tabular case, a step size of "
                                },
                                {
                                    "bbox": [
                                        64,
                                        621,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\alpha = \\frac{1}{10}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        621,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " would take about 10 experiences to converge approximately to their mean target, and if we wanted to learn in 100 experiences we would use "
                                },
                                {
                                    "bbox": [
                                        64,
                                        621,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\alpha = \\frac{1}{100}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        621,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": ". In general, if "
                                },
                                {
                                    "bbox": [
                                        64,
                                        621,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\alpha = \\frac{1}{\\tau}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        621,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": ", then the tabular estimate for a state will approach the mean of its targets, with the most recent targets having the greatest effect, after about "
                                },
                                {
                                    "bbox": [
                                        64,
                                        621,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\tau"
                                },
                                {
                                    "bbox": [
                                        64,
                                        621,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " experiences with the state."
                                }
                            ]
                        }
                    ],
                    "index": 5
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 25
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        104,
                        140,
                        530,
                        220
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                140,
                                530,
                                220
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        140,
                                        530,
                                        220
                                    ],
                                    "type": "text",
                                    "content": "With general function approximation there is not such a clear notion of number of experiences with a state, as each state may be similar to and dissimilar from all the others to various degrees. However, there is a similar rule that gives similar behavior in the case of linear function approximation. Suppose you wanted to learn in about "
                                },
                                {
                                    "bbox": [
                                        104,
                                        140,
                                        530,
                                        220
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\tau"
                                },
                                {
                                    "bbox": [
                                        104,
                                        140,
                                        530,
                                        220
                                    ],
                                    "type": "text",
                                    "content": " experiences with substantially the same feature vector. A good rule of thumb for setting the step- size parameter of linear SGD methods is then"
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        132,
                        230,
                        528,
                        249
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                132,
                                230,
                                528,
                                249
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        132,
                                        230,
                                        528,
                                        249
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\alpha \\doteq \\left(\\tau \\mathbb{E}\\big[\\mathbf{x}^{\\top}\\mathbf{x}\\big]\\right)^{-1}, \\tag{9.19}",
                                    "image_path": "cf073e55e17d787df9d72169283b566bfc3aa6071650e14ea396176e21e1f8ef.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        104,
                        260,
                        529,
                        299
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                260,
                                529,
                                299
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        260,
                                        529,
                                        299
                                    ],
                                    "type": "text",
                                    "content": "where "
                                },
                                {
                                    "bbox": [
                                        104,
                                        260,
                                        529,
                                        299
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{x}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        260,
                                        529,
                                        299
                                    ],
                                    "type": "text",
                                    "content": " is a random feature vector chosen from the same distribution as input vectors will be in the SGD. This method works best if the feature vectors do not vary greatly in length; ideally "
                                },
                                {
                                    "bbox": [
                                        104,
                                        260,
                                        529,
                                        299
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{x}^{\\top}\\mathbf{x}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        260,
                                        529,
                                        299
                                    ],
                                    "type": "text",
                                    "content": " is a constant."
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        104,
                        303,
                        530,
                        450
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                303,
                                530,
                                450
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        303,
                                        530,
                                        450
                                    ],
                                    "type": "text",
                                    "content": "Exercise 9.5 Suppose you are using tile coding to transform a seven- dimensional continuous state space into binary feature vectors to estimate a state value function "
                                },
                                {
                                    "bbox": [
                                        104,
                                        303,
                                        530,
                                        450
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{v} (s,\\mathbf{w})\\approx v_{\\pi}(s)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        303,
                                        530,
                                        450
                                    ],
                                    "type": "text",
                                    "content": ". You believe that the dimensions do not interact strongly, so you decide to use eight tilings of each dimension separately (stripe tilings), for "
                                },
                                {
                                    "bbox": [
                                        104,
                                        303,
                                        530,
                                        450
                                    ],
                                    "type": "inline_equation",
                                    "content": "7\\times 8 = 56"
                                },
                                {
                                    "bbox": [
                                        104,
                                        303,
                                        530,
                                        450
                                    ],
                                    "type": "text",
                                    "content": " tilings. In addition, in case there are some pairwise interactions between the dimensions, you also take all "
                                },
                                {
                                    "bbox": [
                                        104,
                                        303,
                                        530,
                                        450
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\binom{7}{2} = 21"
                                },
                                {
                                    "bbox": [
                                        104,
                                        303,
                                        530,
                                        450
                                    ],
                                    "type": "text",
                                    "content": " pairs of dimensions and tile each pair conjunctively with rectangular tiles. You make two tilings for each pair of dimensions, making a grand total of "
                                },
                                {
                                    "bbox": [
                                        104,
                                        303,
                                        530,
                                        450
                                    ],
                                    "type": "inline_equation",
                                    "content": "21\\times 2 + 56 = 98"
                                },
                                {
                                    "bbox": [
                                        104,
                                        303,
                                        530,
                                        450
                                    ],
                                    "type": "text",
                                    "content": " tilings. Given these feature vectors, you suspect that you still have to average out some noise, so you decide that you want learning to be gradual, taking about 10 presentations with the same feature vector before learning nears its asymptote. What step- size parameter "
                                },
                                {
                                    "bbox": [
                                        104,
                                        303,
                                        530,
                                        450
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\alpha"
                                },
                                {
                                    "bbox": [
                                        104,
                                        303,
                                        530,
                                        450
                                    ],
                                    "type": "text",
                                    "content": " should you use? Why?"
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        104,
                        453,
                        530,
                        482
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                453,
                                530,
                                482
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        453,
                                        530,
                                        482
                                    ],
                                    "type": "text",
                                    "content": "Exercise 9.6 If "
                                },
                                {
                                    "bbox": [
                                        104,
                                        453,
                                        530,
                                        482
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\tau = 1"
                                },
                                {
                                    "bbox": [
                                        104,
                                        453,
                                        530,
                                        482
                                    ],
                                    "type": "text",
                                    "content": " and "
                                },
                                {
                                    "bbox": [
                                        104,
                                        453,
                                        530,
                                        482
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{x}(S_t)^{\\top}\\mathbf{x}(S_t) = \\mathbb{E}\\big[\\mathbf{x}^{\\top}\\mathbf{x}\\big]"
                                },
                                {
                                    "bbox": [
                                        104,
                                        453,
                                        530,
                                        482
                                    ],
                                    "type": "text",
                                    "content": ", prove that (9.19) together with (9.7) and linear function approximation results in the error being reduced to zero in one update."
                                }
                            ]
                        }
                    ],
                    "index": 4
                },
                {
                    "bbox": [
                        104,
                        503,
                        426,
                        541
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                503,
                                426,
                                541
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        503,
                                        426,
                                        541
                                    ],
                                    "type": "text",
                                    "content": "9.7 Nonlinear Function Approximation: Artificial Neural Networks"
                                }
                            ]
                        }
                    ],
                    "index": 5,
                    "level": 1
                },
                {
                    "bbox": [
                        104,
                        553,
                        530,
                        646
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                553,
                                530,
                                646
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        553,
                                        530,
                                        646
                                    ],
                                    "type": "text",
                                    "content": "Artificial neural networks (ANNs) are widely used for nonlinear function approximation. An ANN is a network of interconnected units that have some of the properties of neurons, the main components of nervous systems. ANNs have a long history, with the latest advances in training deeply- layered ANNs (deep learning) being responsible for some of the most impressive abilities of machine learning systems, including reinforcement learning systems. In Chapter 16 we describe several impressive examples of reinforcement learning systems that use ANN function approximation."
                                }
                            ]
                        }
                    ],
                    "index": 6
                },
                {
                    "bbox": [
                        104,
                        647,
                        529,
                        740
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                647,
                                529,
                                740
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        647,
                                        529,
                                        740
                                    ],
                                    "type": "text",
                                    "content": "Figure 9.14 shows a generic feedforward ANN, meaning that there are no loops in the network, that is, there are no paths within the network by which a unit's output can influence its input. The network in the figure has an output layer consisting of two output units, an input layer with four input units, and two \"hidden layers\": layers that are neither input nor output layers. A real- valued weight is associated with each link. A weight roughly corresponds to the efficacy of a synaptic connection in a real neural network (see Section 15.1). If an ANN has at least one loop in its connections, it is a recurrent rather"
                                }
                            ]
                        }
                    ],
                    "index": 7
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 26
        },
        {
            "para_blocks": [
                {
                    "type": "image",
                    "bbox": [
                        153,
                        130,
                        405,
                        328
                    ],
                    "blocks": [
                        {
                            "bbox": [
                                153,
                                130,
                                405,
                                328
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        153,
                                        130,
                                        405,
                                        328
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                153,
                                                130,
                                                405,
                                                328
                                            ],
                                            "type": "image",
                                            "image_path": "aeef861abcaa4bb5187246197196d7111fba6a839317f3522d1df4e80899c89b.jpg"
                                        }
                                    ]
                                }
                            ],
                            "index": 0,
                            "type": "image_body"
                        },
                        {
                            "bbox": [
                                63,
                                334,
                                489,
                                359
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        63,
                                        334,
                                        489,
                                        359
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                63,
                                                334,
                                                489,
                                                359
                                            ],
                                            "type": "text",
                                            "content": "Figure 9.14: A generic feedforward ANN with four input units, two output units, and two hidden layers."
                                        }
                                    ]
                                }
                            ],
                            "index": 1,
                            "type": "image_caption"
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        64,
                        391,
                        489,
                        418
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                391,
                                489,
                                418
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        391,
                                        489,
                                        418
                                    ],
                                    "type": "text",
                                    "content": "than a feedforward ANN. Although both feedforward and recurrent ANNs have been used in reinforcement learning, here we look only at the simpler feedforward case."
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        64,
                        420,
                        489,
                        539
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                420,
                                489,
                                539
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        420,
                                        489,
                                        539
                                    ],
                                    "type": "text",
                                    "content": "The units (the circles in Figure 9.14) are typically semi- linear units, meaning that they compute a weighted sum of their input signals and then apply to the result a nonlinear function, called the activation function, to produce the unit's output, or activation. Different activation functions are used, but they are typically S- shaped, or sigmoid, functions such as the logistic function "
                                },
                                {
                                    "bbox": [
                                        64,
                                        420,
                                        489,
                                        539
                                    ],
                                    "type": "inline_equation",
                                    "content": "f(x) = 1 / (1 + e^{- x})"
                                },
                                {
                                    "bbox": [
                                        64,
                                        420,
                                        489,
                                        539
                                    ],
                                    "type": "text",
                                    "content": ", though sometimes the rectifier nonlinearity "
                                },
                                {
                                    "bbox": [
                                        64,
                                        420,
                                        489,
                                        539
                                    ],
                                    "type": "inline_equation",
                                    "content": "f(x) = \\max (0,x)"
                                },
                                {
                                    "bbox": [
                                        64,
                                        420,
                                        489,
                                        539
                                    ],
                                    "type": "text",
                                    "content": " is used. A step function like "
                                },
                                {
                                    "bbox": [
                                        64,
                                        420,
                                        489,
                                        539
                                    ],
                                    "type": "inline_equation",
                                    "content": "f(x) = 1"
                                },
                                {
                                    "bbox": [
                                        64,
                                        420,
                                        489,
                                        539
                                    ],
                                    "type": "text",
                                    "content": " if "
                                },
                                {
                                    "bbox": [
                                        64,
                                        420,
                                        489,
                                        539
                                    ],
                                    "type": "inline_equation",
                                    "content": "x \\geq \\theta"
                                },
                                {
                                    "bbox": [
                                        64,
                                        420,
                                        489,
                                        539
                                    ],
                                    "type": "text",
                                    "content": ", and 0 otherwise, results in a binary unit with threshold "
                                },
                                {
                                    "bbox": [
                                        64,
                                        420,
                                        489,
                                        539
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\theta"
                                },
                                {
                                    "bbox": [
                                        64,
                                        420,
                                        489,
                                        539
                                    ],
                                    "type": "text",
                                    "content": ". The units in a network's input layer are somewhat different in having their activations set to externally- supplied values that are the inputs to the function the network is approximating."
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        64,
                        540,
                        489,
                        686
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                540,
                                489,
                                686
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        540,
                                        489,
                                        686
                                    ],
                                    "type": "text",
                                    "content": "The activation of each output unit of a feedforward ANN is a nonlinear function of the activation patterns over the network's input units. The functions are parameterized by the network's connection weights. An ANN with no hidden layers can represent only a very small fraction of the possible input- output functions. However an ANN with a single hidden layer containing a large enough finite number of sigmoid units can approximate any continuous function on a compact region of the network's input space to any degree of accuracy (Cybenko, 1989). This is also true for other nonlinear activation functions that satisfy mild conditions, but nonlinearity is essential: if all the units in a multi- layer feedforward ANN have linear activation functions, the entire network is equivalent to a network with no hidden layers (because linear functions of linear functions are themselves linear)."
                                }
                            ]
                        }
                    ],
                    "index": 4
                },
                {
                    "bbox": [
                        64,
                        687,
                        489,
                        740
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                687,
                                489,
                                740
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        687,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": "Despite this \"universal approximation\" property of one- hidden- layer ANNs, both experience and theory show that approximating the complex functions needed for many artificial intelligence tasks is made easier—indeed may require—abstractions that are hierarchical compositions of many layers of lower- level abstractions, that is, abstractions"
                                }
                            ]
                        }
                    ],
                    "index": 5
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 27
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        104,
                        141,
                        530,
                        206
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                141,
                                530,
                                206
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        141,
                                        530,
                                        206
                                    ],
                                    "type": "text",
                                    "content": "produced by deep architectures such as ANNs with many hidden layers. (See Bengio, 2009, for a thorough review.) The successive layers of a deep ANN compute increasingly abstract representations of the network's \"raw\" input, with each unit providing a feature contributing to a hierarchical representation of the overall input- output function of the network."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        104,
                        208,
                        530,
                        421
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                208,
                                530,
                                421
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        208,
                                        530,
                                        421
                                    ],
                                    "type": "text",
                                    "content": "Training the hidden layers of an ANN is therefore a way to automatically create features appropriate for a given problem so that hierarchical representations can be produced without relying exclusively on hand- crafted features. This has been an enduring challenge for artificial intelligence and explains why learning algorithms for ANNs with hidden layers have received so much attention over the years. ANNs typically learn by a stochastic gradient method (Section 9.3). Each weight is adjusted in a direction aimed at improving the network's overall performance as measured by an objective function to be either minimized or maximized. In the most common supervised learning case, the objective function is the expected error, or loss, over a set of labeled training examples. In reinforcement learning, ANNs can use TD errors to learn value functions, or they can aim to maximize expected reward as in a gradient bandit (Section 2.8) or a policy- gradient algorithm (Chapter 13). In all of these cases it is necessary to estimate how a change in each connection weight would influence the network's overall performance, in other words, to estimate the partial derivative of an objective function with respect to each weight, given the current values of all the network's weights. The gradient is the vector of these partial derivatives."
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        104,
                        421,
                        530,
                        554
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                421,
                                530,
                                554
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        421,
                                        530,
                                        554
                                    ],
                                    "type": "text",
                                    "content": "The most successful way to do this for ANNs with hidden layers (provided the units have differentiable activation functions) is the backpropagation algorithm, which consists of alternating forward and backward passes through the network. Each forward pass computes the activation of each unit given the current activations of the network's input units. After each forward pass, a backward pass efficiently computes a partial derivative for each weight. (As in other stochastic gradient learning algorithms, the vector of these partial derivatives is an estimate of the true gradient.) In Section 15.10 we discuss methods for training ANNs with hidden layers that use reinforcement learning principles instead of backpropagation. These methods are less efficient than the backpropagation algorithm, but they may be closer to how real neural networks learn."
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        104,
                        555,
                        530,
                        728
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                555,
                                530,
                                728
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        555,
                                        530,
                                        728
                                    ],
                                    "type": "text",
                                    "content": "The backpropagation algorithm can produce good results for shallow networks having 1 or 2 hidden layers, but it may not work well for deeper ANNs. In fact, training a network with "
                                },
                                {
                                    "bbox": [
                                        104,
                                        555,
                                        530,
                                        728
                                    ],
                                    "type": "inline_equation",
                                    "content": "k + 1"
                                },
                                {
                                    "bbox": [
                                        104,
                                        555,
                                        530,
                                        728
                                    ],
                                    "type": "text",
                                    "content": " hidden layers can actually result in poorer performance than training a network with "
                                },
                                {
                                    "bbox": [
                                        104,
                                        555,
                                        530,
                                        728
                                    ],
                                    "type": "inline_equation",
                                    "content": "k"
                                },
                                {
                                    "bbox": [
                                        104,
                                        555,
                                        530,
                                        728
                                    ],
                                    "type": "text",
                                    "content": " hidden layers, even though the deeper network can represent all the functions that the shallower network can (Bengio, 2009). Explaining results like these is not easy, but several factors are important. First, the large number of weights in a typical deep ANN makes it difficult to avoid the problem of overfitting, that is, the problem of failing to generalize correctly to cases on which the network has not been trained. Second, backpropagation does not work well for deep ANNs because the partial derivatives computed by its backward passes either decay rapidly toward the input side of the network, making learning by deep layers extremely slow, or the partial derivatives grow rapidly toward the input side of the network, making learning unstable. Methods for dealing with these problems are largely responsible for many impressive recent results"
                                }
                            ]
                        }
                    ],
                    "index": 3
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 28
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        65,
                        141,
                        267,
                        154
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                65,
                                141,
                                267,
                                154
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        65,
                                        141,
                                        267,
                                        154
                                    ],
                                    "type": "text",
                                    "content": "achieved by systems that use deep ANNs."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        64,
                        156,
                        490,
                        287
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                156,
                                490,
                                287
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        156,
                                        490,
                                        287
                                    ],
                                    "type": "text",
                                    "content": "achieved by systems that use deep ANNs.Overfitting is a problem for any function approximation method that adjusts functions with many degrees of freedom on the basis of limited training data. It is less of a problem for online reinforcement learning that does not rely on limited training sets, but generalizing effectively is still an important issue. Overfitting is a problem for ANNs in general, but especially so for deep ANNs because they tend to have very large numbers of weights. Many methods have been developed for reducing overfitting. These include stopping training when performance begins to decrease on validation data different from the training data (cross validation), modifying the objective function to discourage complexity of the approximation (regularization), and introducing dependencies among the weights to reduce the number of degrees of freedom (e.g., weight sharing)."
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        64,
                        289,
                        490,
                        447
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                289,
                                490,
                                447
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        289,
                                        490,
                                        447
                                    ],
                                    "type": "text",
                                    "content": "A particularly effective method for reducing overfitting by deep ANNs is the dropout method introduced by Srivastava, Hinton, Krizhevsky, Sutskever, and Salakhutdinov (2014). During training, units are randomly removed from the network (dropped out) along with their connections. This can be thought of as training a large number of \"thinned\" networks. Combining the results of these thinned networks at test time is a way to improve generalization performance. The dropout method efficiently approximates this combination by multiplying each outgoing weight of a unit by the probability that that unit was retained during training. Srivastava et al. found that this method significantly improves generalization performance. It encourages individual hidden units to learn features that work well with random collections of other features. This increases the versatility of the features formed by the hidden units so that the network does not overly specialize to rarely- occurring cases."
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        64,
                        450,
                        490,
                        634
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                450,
                                490,
                                634
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        450,
                                        490,
                                        634
                                    ],
                                    "type": "text",
                                    "content": "Hinton, Osindero, and Tefh (2006) took a major step toward solving the problem of training the deep layers of a deep ANN in their work with deep belief networks, layered networks closely related to the deep ANNs discussed here. In their method, the deepest layers are trained one at a time using an unsupervised learning algorithm. Without relying on the overall objective function, unsupervised learning can extract features that capture statistical regularities of the input stream. The deepest layer is trained first, then with input provided by this trained layer, the next deepest layer is trained, and so on, until the weights in all, or many, of the network's layers are set to values that now act as initial values for supervised learning. The network is then fine- tuned by backpropagation with respect to the overall objective function. Studies show that this approach generally works much better than backpropagation with weights initialized with random values. The better performance of networks trained with weights initialized this way could be due to many factors, but one idea is that this method places the network in a region of weight space from which a gradient- based algorithm can make good progress."
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        64,
                        636,
                        490,
                        729
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                636,
                                490,
                                729
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        636,
                                        490,
                                        729
                                    ],
                                    "type": "text",
                                    "content": "Batch normalization (Ioffe and Szegedy, 2015) is another technique that makes it easier to train deep ANNs. It has long been known that ANN learning is easier if the network input is normalized, for example, by adjusting each input variable to have zero mean and unit variance. Batch normalization for training deep ANNs normalizes the output of deep layers before they feed into the following layer. Ioffe and Szegedy (2015) used statistics from subsets, or \"mini- batches,\" of training examples to normalize these between- layer signals to improve the learning rate of deep ANNs."
                                }
                            ]
                        }
                    ],
                    "index": 4
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 29
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        104,
                        141,
                        530,
                        286
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                141,
                                530,
                                286
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        141,
                                        530,
                                        286
                                    ],
                                    "type": "text",
                                    "content": "Another technique useful for training deep ANNs is deep residual learning (He, Zhang, Ren, and Sun, 2016). Sometimes it is easier to learn how a function differs from the identity function than to learn the function itself. Then adding this difference, or residual function, to the input produces the desired function. In deep ANNs, a block of layers can be made to learn a residual function simply by adding shortcut, or skip, connections around the block. These connections add the input to the block to its output, and no additional weights are needed. He et al. (2016) evaluated this method using deep convolutional networks with skip connections around every pair of adjacent layers, finding substantial improvement over networks without the skip connections on benchmark image classification tasks. Both batch normalization and deep residual learning were used in the reinforcement learning application to the game of Go that we describe in Chapter 16."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        104,
                        288,
                        531,
                        380
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                288,
                                531,
                                380
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        288,
                                        531,
                                        380
                                    ],
                                    "type": "text",
                                    "content": "A type of deep ANN that has proven to be very successful in applications, including impressive reinforcement learning applications (Chapter 16), is the deep convolutional network. This type of network is specialized for processing high- dimensional data arranged in spatial arrays, such as images. It was inspired by how early visual processing works in the brain (LeCun, Bottou, Bengio and Haffner, 1998). Because of its special architecture, a deep convolutional network can be trained by backpropagation without resorting to methods like those described above to train the deep layers."
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        104,
                        382,
                        531,
                        527
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                382,
                                531,
                                527
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        382,
                                        531,
                                        527
                                    ],
                                    "type": "text",
                                    "content": "Figure 9.15 illustrates the architecture of a deep convolutional network. This instance, from LeCun et al. (1998), was designed to recognize hand- written characters. It consists of alternating convolutional and subsampling layers, followed by several fully connected final layers. Each convolutional layer produces a number of feature maps. A feature map is a pattern of activity over an array of units, where each unit performs the same operation on data in its receptive field, which is the part of the data it \"sees\" from the preceding layer (or from the external input in the case of the first convolutional layer). The units of a feature map are identical to one another except that their receptive fields, which are all the same size and shape, are shifted to different locations on the arrays of incoming data. Units in the same feature map share the same weights. This means that a feature map detects the same feature no matter where it is located in the input"
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "type": "image",
                    "bbox": [
                        99,
                        558,
                        518,
                        690
                    ],
                    "blocks": [
                        {
                            "bbox": [
                                99,
                                558,
                                518,
                                690
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        99,
                                        558,
                                        518,
                                        690
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                99,
                                                558,
                                                518,
                                                690
                                            ],
                                            "type": "image",
                                            "image_path": "58b1f1ade25d6f89d97d32f451e49c7e17e1be36e97181578563152cc1157f2d.jpg"
                                        }
                                    ]
                                }
                            ],
                            "index": 3,
                            "type": "image_body"
                        },
                        {
                            "bbox": [
                                104,
                                699,
                                530,
                                737
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        104,
                                        699,
                                        530,
                                        737
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                104,
                                                699,
                                                530,
                                                737
                                            ],
                                            "type": "text",
                                            "content": "Figure 9.15: Deep Convolutional Network. Republished with permission of Proceedings of the IEEE, from Gradient-based learning applied to document recognition, LeCun, Bottou, Bengio, and Haffner, volume 86, 1998; permission conveyed through Copyright Clearance Center, Inc."
                                        }
                                    ]
                                }
                            ],
                            "index": 4,
                            "type": "image_caption"
                        }
                    ],
                    "index": 3
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 30
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        64,
                        140,
                        489,
                        207
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                140,
                                489,
                                207
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        207
                                    ],
                                    "type": "text",
                                    "content": "array. In the network in Figure 9.15, for example, the first convolutional layer produces 6 feature maps, each consisting of "
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        207
                                    ],
                                    "type": "inline_equation",
                                    "content": "28 \\times 28"
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        207
                                    ],
                                    "type": "text",
                                    "content": " units. Each unit in each feature map has a "
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        207
                                    ],
                                    "type": "inline_equation",
                                    "content": "5 \\times 5"
                                },
                                {
                                    "bbox": [
                                        64,
                                        140,
                                        489,
                                        207
                                    ],
                                    "type": "text",
                                    "content": " receptive field, and these receptive fields overlap (in this case by four columns and four rows). Consequently, each of the 6 feature maps is specified by just 25 adjustable weights."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        64,
                        208,
                        490,
                        340
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                208,
                                490,
                                340
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        208,
                                        490,
                                        340
                                    ],
                                    "type": "text",
                                    "content": "The subsampling layers of a deep convolutional network reduce the spatial resolution of the feature maps. Each feature map in a subsampling layer consists of units that average over a receptive field of units in the feature maps of the preceding convolutional layer. For example, each unit in each of the 6 feature maps in the first subsampling layer of the network of Figure 9.15 averages over a "
                                },
                                {
                                    "bbox": [
                                        64,
                                        208,
                                        490,
                                        340
                                    ],
                                    "type": "inline_equation",
                                    "content": "2 \\times 2"
                                },
                                {
                                    "bbox": [
                                        64,
                                        208,
                                        490,
                                        340
                                    ],
                                    "type": "text",
                                    "content": " non- overlapping receptive field over one of the feature maps produced by the first convolutional layer, resulting in six "
                                },
                                {
                                    "bbox": [
                                        64,
                                        208,
                                        490,
                                        340
                                    ],
                                    "type": "inline_equation",
                                    "content": "14 \\times 14"
                                },
                                {
                                    "bbox": [
                                        64,
                                        208,
                                        490,
                                        340
                                    ],
                                    "type": "text",
                                    "content": " feature maps. Subsampling layers reduce the network's sensitivity to the spatial locations of the features detected, that is, they help make the network's responses spatially invariant. This is useful because a feature detected at one place in an image is likely to be useful at other places as well."
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        64,
                        341,
                        489,
                        421
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                341,
                                489,
                                421
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        341,
                                        489,
                                        421
                                    ],
                                    "type": "text",
                                    "content": "Advances in the design and training of ANNs- of which we have only mentioned a few- - all contribute to reinforcement learning. Although current reinforcement learning theory is mostly limited to methods using tabular or linear function approximation methods, the impressive performances of notable reinforcement learning applications owe much of their success to nonlinear function approximation by multi- layer ANNs. We discuss several of these applications in Chapter 16. ."
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        64,
                        444,
                        246,
                        462
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                444,
                                246,
                                462
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        444,
                                        246,
                                        462
                                    ],
                                    "type": "text",
                                    "content": "9.8 Least-Squares TD"
                                }
                            ]
                        }
                    ],
                    "index": 3,
                    "level": 1
                },
                {
                    "bbox": [
                        64,
                        474,
                        489,
                        527
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                474,
                                489,
                                527
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        474,
                                        489,
                                        527
                                    ],
                                    "type": "text",
                                    "content": "All the methods we have discussed so far in this chapter have required computation per time step proportional to the number of parameters. With more computation, however, one can do better. In this section we present a method for linear function approximation that is arguably the best that can be done for this case."
                                }
                            ]
                        }
                    ],
                    "index": 4
                },
                {
                    "bbox": [
                        64,
                        527,
                        489,
                        555
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                527,
                                489,
                                555
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        527,
                                        489,
                                        555
                                    ],
                                    "type": "text",
                                    "content": "As we established in Section 9.4 TD(0) with linear function approximation converges asymptotically (for appropriately decreasing step sizes) to the TD fixed point:"
                                }
                            ]
                        }
                    ],
                    "index": 5
                },
                {
                    "bbox": [
                        91,
                        567,
                        161,
                        580
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                91,
                                567,
                                161,
                                580
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        91,
                                        567,
                                        161,
                                        580
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\mathbf{w}_{\\mathrm{TD}} = \\mathbf{A}^{-1}\\mathbf{b},",
                                    "image_path": "ae1b68bd9df0a5d7f8f32cdac8c81c8db064df70bc8de1ad42af66bc4f42cca7.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 6
                },
                {
                    "bbox": [
                        63,
                        592,
                        94,
                        604
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                63,
                                592,
                                94,
                                604
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        63,
                                        592,
                                        94,
                                        604
                                    ],
                                    "type": "text",
                                    "content": "where"
                                }
                            ]
                        }
                    ],
                    "index": 7
                },
                {
                    "bbox": [
                        91,
                        618,
                        336,
                        633
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                91,
                                618,
                                336,
                                633
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        91,
                                        618,
                                        336,
                                        633
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\begin{array}{r}{\\mathbf{A}\\doteq \\mathbb{E}\\big[\\mathbf{x}_{t}(\\mathbf{x}_{t} - \\gamma \\mathbf{x}_{t + 1})^{\\top}\\big]\\qquad \\mathrm{and}\\qquad \\mathbf{b}\\doteq \\mathbb{E}[R_{t + 1}\\mathbf{x}_{t}].} \\end{array}",
                                    "image_path": "deeb7a9579c01ef9157c236e7d6b2204386a20e4bfef0bf74dae8ed45e79919b.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 8
                },
                {
                    "bbox": [
                        64,
                        642,
                        489,
                        696
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                642,
                                489,
                                696
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        642,
                                        489,
                                        696
                                    ],
                                    "type": "text",
                                    "content": "Why, one might ask, must we compute this solution iteratively? This is wasteful of data! Could one not do better by computing estimates of "
                                },
                                {
                                    "bbox": [
                                        64,
                                        642,
                                        489,
                                        696
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{A}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        642,
                                        489,
                                        696
                                    ],
                                    "type": "text",
                                    "content": " and "
                                },
                                {
                                    "bbox": [
                                        64,
                                        642,
                                        489,
                                        696
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{b}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        642,
                                        489,
                                        696
                                    ],
                                    "type": "text",
                                    "content": " , and then directly computing the TD fixed point? The Least- Squares "
                                },
                                {
                                    "bbox": [
                                        64,
                                        642,
                                        489,
                                        696
                                    ],
                                    "type": "inline_equation",
                                    "content": "T D"
                                },
                                {
                                    "bbox": [
                                        64,
                                        642,
                                        489,
                                        696
                                    ],
                                    "type": "text",
                                    "content": " algorithm, commonly known as "
                                },
                                {
                                    "bbox": [
                                        64,
                                        642,
                                        489,
                                        696
                                    ],
                                    "type": "inline_equation",
                                    "content": "L S T D"
                                },
                                {
                                    "bbox": [
                                        64,
                                        642,
                                        489,
                                        696
                                    ],
                                    "type": "text",
                                    "content": " , does exactly this. It forms the natural estimates"
                                }
                            ]
                        }
                    ],
                    "index": 9
                },
                {
                    "bbox": [
                        91,
                        706,
                        489,
                        743
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                91,
                                706,
                                489,
                                743
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        91,
                                        706,
                                        489,
                                        743
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\widehat{\\mathbf{A}}_{t}\\doteq \\sum_{k = 0}^{t - 1}\\mathbf{x}_{k}(\\mathbf{x}_{k} - \\gamma \\mathbf{x}_{k + 1})^{\\top} + \\epsilon \\mathbf{I}\\quad \\mathrm{and}\\quad \\widehat{\\mathbf{b}}_{t}\\doteq \\sum_{k = 0}^{t - 1}R_{k + 1}\\mathbf{x}_{k}, \\tag{9.20}",
                                    "image_path": "6d7cb8fc482aee0921817346035b0e370d92e12101977b6739db3381e42ced5e.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 10
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 31
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        104,
                        139,
                        530,
                        207
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                139,
                                530,
                                207
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        139,
                                        530,
                                        207
                                    ],
                                    "type": "text",
                                    "content": "where "
                                },
                                {
                                    "bbox": [
                                        104,
                                        139,
                                        530,
                                        207
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{I}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        139,
                                        530,
                                        207
                                    ],
                                    "type": "text",
                                    "content": " is the identity matrix, and "
                                },
                                {
                                    "bbox": [
                                        104,
                                        139,
                                        530,
                                        207
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\epsilon \\mathbf{I}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        139,
                                        530,
                                        207
                                    ],
                                    "type": "text",
                                    "content": ", for some small "
                                },
                                {
                                    "bbox": [
                                        104,
                                        139,
                                        530,
                                        207
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\epsilon > 0"
                                },
                                {
                                    "bbox": [
                                        104,
                                        139,
                                        530,
                                        207
                                    ],
                                    "type": "text",
                                    "content": ", ensures that "
                                },
                                {
                                    "bbox": [
                                        104,
                                        139,
                                        530,
                                        207
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{\\mathbf{A}}_t"
                                },
                                {
                                    "bbox": [
                                        104,
                                        139,
                                        530,
                                        207
                                    ],
                                    "type": "text",
                                    "content": " is always invertible. It might seem that these estimates should both be divided by "
                                },
                                {
                                    "bbox": [
                                        104,
                                        139,
                                        530,
                                        207
                                    ],
                                    "type": "inline_equation",
                                    "content": "t"
                                },
                                {
                                    "bbox": [
                                        104,
                                        139,
                                        530,
                                        207
                                    ],
                                    "type": "text",
                                    "content": ", and indeed they should; as defined here, these are really estimates of "
                                },
                                {
                                    "bbox": [
                                        104,
                                        139,
                                        530,
                                        207
                                    ],
                                    "type": "inline_equation",
                                    "content": "t"
                                },
                                {
                                    "bbox": [
                                        104,
                                        139,
                                        530,
                                        207
                                    ],
                                    "type": "text",
                                    "content": " times "
                                },
                                {
                                    "bbox": [
                                        104,
                                        139,
                                        530,
                                        207
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{A}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        139,
                                        530,
                                        207
                                    ],
                                    "type": "text",
                                    "content": " and "
                                },
                                {
                                    "bbox": [
                                        104,
                                        139,
                                        530,
                                        207
                                    ],
                                    "type": "inline_equation",
                                    "content": "t"
                                },
                                {
                                    "bbox": [
                                        104,
                                        139,
                                        530,
                                        207
                                    ],
                                    "type": "text",
                                    "content": " times "
                                },
                                {
                                    "bbox": [
                                        104,
                                        139,
                                        530,
                                        207
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{b}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        139,
                                        530,
                                        207
                                    ],
                                    "type": "text",
                                    "content": ". However, the extra "
                                },
                                {
                                    "bbox": [
                                        104,
                                        139,
                                        530,
                                        207
                                    ],
                                    "type": "inline_equation",
                                    "content": "t"
                                },
                                {
                                    "bbox": [
                                        104,
                                        139,
                                        530,
                                        207
                                    ],
                                    "type": "text",
                                    "content": " factors cancel out when LSTD uses these estimates to estimate the TD fixed point as"
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        131,
                        213,
                        528,
                        230
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                131,
                                213,
                                528,
                                230
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        131,
                                        213,
                                        528,
                                        230
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\mathbf{w}_t \\doteq \\hat{\\mathbf{A}}_t^{-1} \\hat{\\mathbf{b}}_t. \\tag{9.21}",
                                    "image_path": "09c768bcc1df790f756f5ee32d75d123f9a6bed468adf6dad5f804bfd66d8b81.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        104,
                        239,
                        530,
                        279
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                239,
                                530,
                                279
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        239,
                                        530,
                                        279
                                    ],
                                    "type": "text",
                                    "content": "This algorithm is the most data efficient form of linear "
                                },
                                {
                                    "bbox": [
                                        104,
                                        239,
                                        530,
                                        279
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathrm{TD}(0)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        239,
                                        530,
                                        279
                                    ],
                                    "type": "text",
                                    "content": ", but it is also more expensive computationally. Recall that semi- gradient "
                                },
                                {
                                    "bbox": [
                                        104,
                                        239,
                                        530,
                                        279
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathrm{TD}(0)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        239,
                                        530,
                                        279
                                    ],
                                    "type": "text",
                                    "content": " requires memory and per- step computation that is only "
                                },
                                {
                                    "bbox": [
                                        104,
                                        239,
                                        530,
                                        279
                                    ],
                                    "type": "inline_equation",
                                    "content": "O(d)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        239,
                                        530,
                                        279
                                    ],
                                    "type": "text",
                                    "content": "."
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        104,
                        280,
                        530,
                        376
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                280,
                                530,
                                376
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        280,
                                        530,
                                        376
                                    ],
                                    "type": "text",
                                    "content": "How complex is LSTD? As it is written above the complexity seems to increase with "
                                },
                                {
                                    "bbox": [
                                        104,
                                        280,
                                        530,
                                        376
                                    ],
                                    "type": "inline_equation",
                                    "content": "t"
                                },
                                {
                                    "bbox": [
                                        104,
                                        280,
                                        530,
                                        376
                                    ],
                                    "type": "text",
                                    "content": ", but the two approximations in (9.20) could be implemented incrementally using the techniques we have covered earlier (e.g., in Chapter 2) so that they can be done in constant time per step. Even so, the update for "
                                },
                                {
                                    "bbox": [
                                        104,
                                        280,
                                        530,
                                        376
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{\\mathbf{A}}_t"
                                },
                                {
                                    "bbox": [
                                        104,
                                        280,
                                        530,
                                        376
                                    ],
                                    "type": "text",
                                    "content": " would involve an outer product (a column vector times a row vector) and thus would be a matrix update; its computational complexity would be "
                                },
                                {
                                    "bbox": [
                                        104,
                                        280,
                                        530,
                                        376
                                    ],
                                    "type": "inline_equation",
                                    "content": "O(d^2)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        280,
                                        530,
                                        376
                                    ],
                                    "type": "text",
                                    "content": ", and of course the memory required to hold the "
                                },
                                {
                                    "bbox": [
                                        104,
                                        280,
                                        530,
                                        376
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{\\mathbf{A}}_t"
                                },
                                {
                                    "bbox": [
                                        104,
                                        280,
                                        530,
                                        376
                                    ],
                                    "type": "text",
                                    "content": " matrix would be "
                                },
                                {
                                    "bbox": [
                                        104,
                                        280,
                                        530,
                                        376
                                    ],
                                    "type": "inline_equation",
                                    "content": "O(d^2)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        280,
                                        530,
                                        376
                                    ],
                                    "type": "text",
                                    "content": "."
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        104,
                        377,
                        530,
                        432
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                377,
                                530,
                                432
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        377,
                                        530,
                                        432
                                    ],
                                    "type": "text",
                                    "content": "A potentially greater problem is that our final computation (9.21) uses the inverse of "
                                },
                                {
                                    "bbox": [
                                        104,
                                        377,
                                        530,
                                        432
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{\\mathbf{A}}_t"
                                },
                                {
                                    "bbox": [
                                        104,
                                        377,
                                        530,
                                        432
                                    ],
                                    "type": "text",
                                    "content": ", and the computational complexity of a general inverse computation is "
                                },
                                {
                                    "bbox": [
                                        104,
                                        377,
                                        530,
                                        432
                                    ],
                                    "type": "inline_equation",
                                    "content": "O(d^3)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        377,
                                        530,
                                        432
                                    ],
                                    "type": "text",
                                    "content": ". Fortunately, an inverse of a matrix of our special form—a sum of outer products—can also be updated incrementally with only "
                                },
                                {
                                    "bbox": [
                                        104,
                                        377,
                                        530,
                                        432
                                    ],
                                    "type": "inline_equation",
                                    "content": "O(d^2)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        377,
                                        530,
                                        432
                                    ],
                                    "type": "text",
                                    "content": " computations, as"
                                }
                            ]
                        }
                    ],
                    "index": 4
                },
                {
                    "bbox": [
                        130,
                        439,
                        528,
                        503
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                130,
                                439,
                                528,
                                503
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        130,
                                        439,
                                        528,
                                        503
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\begin{array}{r l} & {\\hat{\\mathbf{A}}_{t}^{-1} = \\left(\\hat{\\mathbf{A}}_{t - 1} + \\mathbf{x}_{t - 1}(\\mathbf{x}_{t - 1} - \\gamma \\mathbf{x}_{t})^{\\top}\\right)^{-1}}\\\\ & {\\qquad = \\hat{\\mathbf{A}}_{t - 1}^{-1} - \\frac{\\hat{\\mathbf{A}}_{t - 1}^{-1}\\mathbf{x}_{t - 1}(\\mathbf{x}_{t - 1} - \\gamma\\mathbf{x}_{t})^{\\top}\\hat{\\mathbf{A}}_{t - 1}^{-1}}{1 + (\\mathbf{x}_{t - 1} - \\gamma\\mathbf{x}_{t})^{\\top}\\hat{\\mathbf{A}}_{t - 1}^{-1}\\mathbf{x}_{t - 1}},} \\end{array} \\tag{from (9.20)",
                                    "image_path": "2969c4e90b6eaf1657df8898ab883c5e5d3e584968fb02dac01f7fda7409be94.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 5
                },
                {
                    "bbox": [
                        104,
                        511,
                        530,
                        579
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                511,
                                530,
                                579
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        511,
                                        530,
                                        579
                                    ],
                                    "type": "text",
                                    "content": "for "
                                },
                                {
                                    "bbox": [
                                        104,
                                        511,
                                        530,
                                        579
                                    ],
                                    "type": "inline_equation",
                                    "content": "t > 0"
                                },
                                {
                                    "bbox": [
                                        104,
                                        511,
                                        530,
                                        579
                                    ],
                                    "type": "text",
                                    "content": ", with "
                                },
                                {
                                    "bbox": [
                                        104,
                                        511,
                                        530,
                                        579
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{\\mathbf{A}}_0 \\doteq \\epsilon \\mathbf{I}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        511,
                                        530,
                                        579
                                    ],
                                    "type": "text",
                                    "content": ". Although the identity (9.22), known as the Sherman- Morrison formula, is superficially complicated, it involves only vector- matrix and vector- vector multiplications and thus is only "
                                },
                                {
                                    "bbox": [
                                        104,
                                        511,
                                        530,
                                        579
                                    ],
                                    "type": "inline_equation",
                                    "content": "O(d^2)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        511,
                                        530,
                                        579
                                    ],
                                    "type": "text",
                                    "content": ". Thus we can store the inverse matrix "
                                },
                                {
                                    "bbox": [
                                        104,
                                        511,
                                        530,
                                        579
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{\\mathbf{A}}_t^{- 1}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        511,
                                        530,
                                        579
                                    ],
                                    "type": "text",
                                    "content": ", maintain it with (9.22), and then use it in (9.21), all with only "
                                },
                                {
                                    "bbox": [
                                        104,
                                        511,
                                        530,
                                        579
                                    ],
                                    "type": "inline_equation",
                                    "content": "O(d^2)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        511,
                                        530,
                                        579
                                    ],
                                    "type": "text",
                                    "content": " memory and per- step computation. The complete algorithm is given in the box on the next page."
                                }
                            ]
                        }
                    ],
                    "index": 6
                },
                {
                    "bbox": [
                        104,
                        580,
                        530,
                        726
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                580,
                                530,
                                726
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        530,
                                        726
                                    ],
                                    "type": "text",
                                    "content": "Of course, "
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        530,
                                        726
                                    ],
                                    "type": "inline_equation",
                                    "content": "O(d^2)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        530,
                                        726
                                    ],
                                    "type": "text",
                                    "content": " is still significantly more expensive than the "
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        530,
                                        726
                                    ],
                                    "type": "inline_equation",
                                    "content": "O(d)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        530,
                                        726
                                    ],
                                    "type": "text",
                                    "content": " of semi- gradient TD. Whether the greater data efficiency of LSTD is worth this computational expense depends on how large "
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        530,
                                        726
                                    ],
                                    "type": "inline_equation",
                                    "content": "d"
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        530,
                                        726
                                    ],
                                    "type": "text",
                                    "content": " is, how important it is to learn quickly, and the expense of other parts of the system. The fact that LSTD requires no step- size parameter is sometimes also touted, but the advantage of this is probably overstated. LSTD does not require a step size, but it does requires "
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        530,
                                        726
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\epsilon"
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        530,
                                        726
                                    ],
                                    "type": "text",
                                    "content": "; if "
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        530,
                                        726
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\epsilon"
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        530,
                                        726
                                    ],
                                    "type": "text",
                                    "content": " is chosen too small the sequence of inverses can vary wildly, and if "
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        530,
                                        726
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\epsilon"
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        530,
                                        726
                                    ],
                                    "type": "text",
                                    "content": " is chosen too large then learning is slowed. In addition, LSTD's lack of a step- size parameter means that it never forgets. This is sometimes desirable, but it is problematic if the target policy "
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        530,
                                        726
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\pi"
                                },
                                {
                                    "bbox": [
                                        104,
                                        580,
                                        530,
                                        726
                                    ],
                                    "type": "text",
                                    "content": " changes as it does in reinforcement learning and GPI. In control applications, LSTD typically has to be combined with some other mechanism to induce forgetting, mooting any initial advantage of not requiring a step- size parameter."
                                }
                            ]
                        }
                    ],
                    "index": 7
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 32
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        76,
                        140,
                        370,
                        156
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                76,
                                140,
                                370,
                                156
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        76,
                                        140,
                                        370,
                                        156
                                    ],
                                    "type": "text",
                                    "content": "LSTD for estimating "
                                },
                                {
                                    "bbox": [
                                        76,
                                        140,
                                        370,
                                        156
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{v} = \\mathbf{w}^{\\top}\\mathbf{x}(\\cdot)\\approx v_{\\pi}"
                                },
                                {
                                    "bbox": [
                                        76,
                                        140,
                                        370,
                                        156
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{\\nabla}O(d^{2})"
                                },
                                {
                                    "bbox": [
                                        76,
                                        140,
                                        370,
                                        156
                                    ],
                                    "type": "text",
                                    "content": " version)"
                                }
                            ]
                        }
                    ],
                    "index": 0,
                    "level": 1
                },
                {
                    "bbox": [
                        77,
                        164,
                        416,
                        191
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                77,
                                164,
                                416,
                                191
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        77,
                                        164,
                                        416,
                                        191
                                    ],
                                    "type": "text",
                                    "content": "Input: feature representation "
                                },
                                {
                                    "bbox": [
                                        77,
                                        164,
                                        416,
                                        191
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{x}:S^{+}\\to \\mathbb{R}^{d}"
                                },
                                {
                                    "bbox": [
                                        77,
                                        164,
                                        416,
                                        191
                                    ],
                                    "type": "text",
                                    "content": " such that "
                                },
                                {
                                    "bbox": [
                                        77,
                                        164,
                                        416,
                                        191
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{x}(t e r m i n a l) = \\mathbf{0}"
                                },
                                {
                                    "bbox": [
                                        77,
                                        164,
                                        416,
                                        191
                                    ],
                                    "type": "text",
                                    "content": " Algorithm parameter: small "
                                },
                                {
                                    "bbox": [
                                        77,
                                        164,
                                        416,
                                        191
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\epsilon >0"
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        76,
                        198,
                        475,
                        229
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                76,
                                198,
                                475,
                                229
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        76,
                                        198,
                                        475,
                                        229
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\begin{array}{r}\\widehat{\\mathbf{A}}^{- 1}\\leftarrow \\epsilon^{- 1}\\mathbf{I} \\end{array}"
                                },
                                {
                                    "bbox": [
                                        76,
                                        198,
                                        475,
                                        229
                                    ],
                                    "type": "text",
                                    "content": " A "
                                },
                                {
                                    "bbox": [
                                        76,
                                        198,
                                        475,
                                        229
                                    ],
                                    "type": "inline_equation",
                                    "content": "d\\ast d"
                                },
                                {
                                    "bbox": [
                                        76,
                                        198,
                                        475,
                                        229
                                    ],
                                    "type": "text",
                                    "content": " matrix "
                                },
                                {
                                    "bbox": [
                                        76,
                                        198,
                                        475,
                                        229
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\hat{\\mathbf{b}}\\gets \\mathbf{0}"
                                },
                                {
                                    "bbox": [
                                        76,
                                        198,
                                        475,
                                        229
                                    ],
                                    "type": "text",
                                    "content": " A "
                                },
                                {
                                    "bbox": [
                                        76,
                                        198,
                                        475,
                                        229
                                    ],
                                    "type": "inline_equation",
                                    "content": "d"
                                },
                                {
                                    "bbox": [
                                        76,
                                        198,
                                        475,
                                        229
                                    ],
                                    "type": "text",
                                    "content": " - dimensional vector"
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        78,
                        229,
                        189,
                        241
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                78,
                                229,
                                189,
                                241
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        78,
                                        229,
                                        189,
                                        241
                                    ],
                                    "type": "text",
                                    "content": "Loop for each episode:"
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        91,
                        242,
                        198,
                        255
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                91,
                                242,
                                198,
                                255
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        91,
                                        242,
                                        198,
                                        255
                                    ],
                                    "type": "text",
                                    "content": "Initialize "
                                },
                                {
                                    "bbox": [
                                        91,
                                        242,
                                        198,
                                        255
                                    ],
                                    "type": "inline_equation",
                                    "content": "S"
                                },
                                {
                                    "bbox": [
                                        91,
                                        242,
                                        198,
                                        255
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{x}\\gets \\mathbf{x}(S)"
                                }
                            ]
                        }
                    ],
                    "index": 4
                },
                {
                    "bbox": [
                        91,
                        256,
                        238,
                        268
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                91,
                                256,
                                238,
                                268
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        91,
                                        256,
                                        238,
                                        268
                                    ],
                                    "type": "text",
                                    "content": "Loop for each step of episode:"
                                }
                            ]
                        }
                    ],
                    "index": 5
                },
                {
                    "bbox": [
                        105,
                        269,
                        407,
                        373
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                105,
                                269,
                                407,
                                373
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        105,
                                        269,
                                        407,
                                        373
                                    ],
                                    "type": "text",
                                    "content": "Choose and take action "
                                },
                                {
                                    "bbox": [
                                        105,
                                        269,
                                        407,
                                        373
                                    ],
                                    "type": "inline_equation",
                                    "content": "A\\sim \\pi (\\cdot |S)"
                                },
                                {
                                    "bbox": [
                                        105,
                                        269,
                                        407,
                                        373
                                    ],
                                    "type": "text",
                                    "content": " , observe "
                                },
                                {
                                    "bbox": [
                                        105,
                                        269,
                                        407,
                                        373
                                    ],
                                    "type": "inline_equation",
                                    "content": "R,S^{\\prime};\\mathbf{x}^{\\prime}\\gets \\mathbf{x}(S^{\\prime})"
                                },
                                {
                                    "bbox": [
                                        105,
                                        269,
                                        407,
                                        373
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\begin{array}{r l} & {\\mathbf{v}\\leftarrow \\widehat{\\mathbf{A}}^{- 1}\\overset {\\top}{(\\mathbf{x}} - \\gamma \\mathbf{x}^{\\prime})}\\\\ & {\\widehat{\\mathbf{A}}^{- 1}\\leftarrow \\widehat{\\mathbf{A}}^{- 1} - (\\widehat{\\mathbf{A}}^{- 1}\\mathbf{x})\\mathbf{v}^{\\top} / (1 + \\mathbf{v}^{\\top}\\mathbf{x})}\\\\ & {\\widehat{\\mathbf{b}}\\leftarrow \\widehat{\\mathbf{b}} +R\\mathbf{x}}\\\\ & {\\mathbf{w}\\leftarrow \\widehat{\\mathbf{A}}^{- 1}\\widehat{\\mathbf{b}}}\\\\ & {S\\leftarrow S^{\\prime};\\mathbf{x}\\leftarrow \\mathbf{x}^{\\prime}} \\end{array}"
                                },
                                {
                                    "bbox": [
                                        105,
                                        269,
                                        407,
                                        373
                                    ],
                                    "type": "text",
                                    "content": " until "
                                },
                                {
                                    "bbox": [
                                        105,
                                        269,
                                        407,
                                        373
                                    ],
                                    "type": "inline_equation",
                                    "content": "S^{\\prime}"
                                },
                                {
                                    "bbox": [
                                        105,
                                        269,
                                        407,
                                        373
                                    ],
                                    "type": "text",
                                    "content": " is terminal"
                                }
                            ]
                        }
                    ],
                    "index": 6
                },
                {
                    "bbox": [
                        64,
                        421,
                        420,
                        440
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                421,
                                420,
                                440
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        421,
                                        420,
                                        440
                                    ],
                                    "type": "text",
                                    "content": "9.9 Memory-based Function Approximation"
                                }
                            ]
                        }
                    ],
                    "index": 7,
                    "level": 1
                },
                {
                    "bbox": [
                        64,
                        459,
                        490,
                        565
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                459,
                                490,
                                565
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        459,
                                        490,
                                        565
                                    ],
                                    "type": "text",
                                    "content": "So far we have discussed the parametric approach to approximating value functions. In this approach, a learning algorithm adjusts the parameters of a functional form intended to approximate the value function over a problem's entire state space. Each update, "
                                },
                                {
                                    "bbox": [
                                        64,
                                        459,
                                        490,
                                        565
                                    ],
                                    "type": "inline_equation",
                                    "content": "s\\mapsto g"
                                },
                                {
                                    "bbox": [
                                        64,
                                        459,
                                        490,
                                        565
                                    ],
                                    "type": "text",
                                    "content": " , is a training example used by the learning algorithm to change the parameters with the aim of reducing the approximation error. After the update, the training example can be discarded (although it might be saved to be used again). When an approximate value of a state (which we will call the query state) is needed, the function is simply evaluated at that state using the latest parameters produced by the learning algorithm."
                                }
                            ]
                        }
                    ],
                    "index": 8
                },
                {
                    "bbox": [
                        64,
                        567,
                        490,
                        646
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                567,
                                490,
                                646
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        567,
                                        490,
                                        646
                                    ],
                                    "type": "text",
                                    "content": "Memory- based function approximation methods are very different. They simply save training examples in memory as they arrive (or at least save a subset of the examples) without updating any parameters. Then, whenever a query state's value estimate is needed, a set of examples is retrieved from memory and used to compute a value estimate for the query state. This approach is sometimes called lazy learning because processing training examples is postponed until the system is queried to provide an output."
                                }
                            ]
                        }
                    ],
                    "index": 9
                },
                {
                    "bbox": [
                        64,
                        647,
                        490,
                        740
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                647,
                                490,
                                740
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        647,
                                        490,
                                        740
                                    ],
                                    "type": "text",
                                    "content": "Memory- based function approximation methods are prime examples of nonparametric methods. Unlike parametric methods, the approximating function's form is not limited to a fixed parameterized class of functions, such as linear functions or polynomials, but is instead determined by the training examples themselves, together with some means for combining them to output estimated values for query states. As more training examples accumulate in memory, one expects nonparametric methods to produce increasingly accurate approximations of any target function."
                                }
                            ]
                        }
                    ],
                    "index": 10
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 33
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        104,
                        141,
                        530,
                        260
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                141,
                                530,
                                260
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        141,
                                        530,
                                        260
                                    ],
                                    "type": "text",
                                    "content": "There are many different memory- based methods depending on how the stored training examples are selected and how they are used to respond to a query. Here, we focus on local- learning methods that approximate a value function only locally in the neighborhood of the current query state. These methods retrieve a set of training examples from memory whose states are judged to be the most relevant to the query state, where relevance usually depends on the distance between states: the closer a training example's state is to the query state, the more relevant it is considered to be, where distance can be defined in many different ways. After the query state is given a value, the local approximation is discarded."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        104,
                        261,
                        530,
                        433
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                261,
                                530,
                                433
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        261,
                                        530,
                                        433
                                    ],
                                    "type": "text",
                                    "content": "The simplest example of the memory- based approach is the nearest neighbor method, which simply finds the example in memory whose state is closest to the query state and returns that example's value as the approximate value of the query state. In other words, if the query state is "
                                },
                                {
                                    "bbox": [
                                        104,
                                        261,
                                        530,
                                        433
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        104,
                                        261,
                                        530,
                                        433
                                    ],
                                    "type": "text",
                                    "content": ", and "
                                },
                                {
                                    "bbox": [
                                        104,
                                        261,
                                        530,
                                        433
                                    ],
                                    "type": "inline_equation",
                                    "content": "s' \\mapsto g"
                                },
                                {
                                    "bbox": [
                                        104,
                                        261,
                                        530,
                                        433
                                    ],
                                    "type": "text",
                                    "content": " is the example in memory in which "
                                },
                                {
                                    "bbox": [
                                        104,
                                        261,
                                        530,
                                        433
                                    ],
                                    "type": "inline_equation",
                                    "content": "s'"
                                },
                                {
                                    "bbox": [
                                        104,
                                        261,
                                        530,
                                        433
                                    ],
                                    "type": "text",
                                    "content": " is the closest state to "
                                },
                                {
                                    "bbox": [
                                        104,
                                        261,
                                        530,
                                        433
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        104,
                                        261,
                                        530,
                                        433
                                    ],
                                    "type": "text",
                                    "content": ", then "
                                },
                                {
                                    "bbox": [
                                        104,
                                        261,
                                        530,
                                        433
                                    ],
                                    "type": "inline_equation",
                                    "content": "g"
                                },
                                {
                                    "bbox": [
                                        104,
                                        261,
                                        530,
                                        433
                                    ],
                                    "type": "text",
                                    "content": " is returned as the approximate value of "
                                },
                                {
                                    "bbox": [
                                        104,
                                        261,
                                        530,
                                        433
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        104,
                                        261,
                                        530,
                                        433
                                    ],
                                    "type": "text",
                                    "content": ". Slightly more complicated are weighted average methods that retrieve a set of nearest neighbor examples and return a weighted average of their target values, where the weights generally decrease with increasing distance between their states and the query state. Locally weighted regression is similar, but it fits a surface to the values of a set of nearest states by means of a parametric approximation method that minimizes a weighted error measure like (9.1), where the weights depend on distances from the query state. The value returned is the evaluation of the locally- fitted surface at the query state, after which the local approximation surface is discarded."
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        104,
                        435,
                        530,
                        593
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                435,
                                530,
                                593
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        435,
                                        530,
                                        593
                                    ],
                                    "type": "text",
                                    "content": "Being nonparametric, memory- based methods have the advantage over parametric methods of not limiting approximations to pre- specified functional forms. This allows accuracy to improve as more data accumulates. Memory- based local approximation methods have other properties that make them well suited for reinforcement learning. Because trajectory sampling is of such importance in reinforcement learning, as discussed in Section 8.6, memory- based local methods can focus function approximation on local neighborhoods of states (or state- action pairs) visited in real or simulated trajectories. There may be no need for global approximation because many areas of the state space will never (or almost never) be reached. In addition, memory- based methods allow an agent's experience to have a relatively immediate affect on value estimates in the neighborhood of the current state, in contrast with a parametric method's need to incrementally adjust parameters of a global approximation."
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        104,
                        596,
                        530,
                        715
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                596,
                                530,
                                715
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        596,
                                        530,
                                        715
                                    ],
                                    "type": "text",
                                    "content": "Avoiding global approximation is also a way to address the curse of dimensionality. For example, for a state space with "
                                },
                                {
                                    "bbox": [
                                        104,
                                        596,
                                        530,
                                        715
                                    ],
                                    "type": "inline_equation",
                                    "content": "k"
                                },
                                {
                                    "bbox": [
                                        104,
                                        596,
                                        530,
                                        715
                                    ],
                                    "type": "text",
                                    "content": " dimensions, a tabular method storing a global approximation requires memory exponential in "
                                },
                                {
                                    "bbox": [
                                        104,
                                        596,
                                        530,
                                        715
                                    ],
                                    "type": "inline_equation",
                                    "content": "k"
                                },
                                {
                                    "bbox": [
                                        104,
                                        596,
                                        530,
                                        715
                                    ],
                                    "type": "text",
                                    "content": ". On the other hand, in storing examples for a memory- based method, each example requires memory proportional to "
                                },
                                {
                                    "bbox": [
                                        104,
                                        596,
                                        530,
                                        715
                                    ],
                                    "type": "inline_equation",
                                    "content": "k"
                                },
                                {
                                    "bbox": [
                                        104,
                                        596,
                                        530,
                                        715
                                    ],
                                    "type": "text",
                                    "content": ", and the memory required to store, say, "
                                },
                                {
                                    "bbox": [
                                        104,
                                        596,
                                        530,
                                        715
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        104,
                                        596,
                                        530,
                                        715
                                    ],
                                    "type": "text",
                                    "content": " examples is linear in "
                                },
                                {
                                    "bbox": [
                                        104,
                                        596,
                                        530,
                                        715
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        104,
                                        596,
                                        530,
                                        715
                                    ],
                                    "type": "text",
                                    "content": ". Nothing is exponential in "
                                },
                                {
                                    "bbox": [
                                        104,
                                        596,
                                        530,
                                        715
                                    ],
                                    "type": "inline_equation",
                                    "content": "k"
                                },
                                {
                                    "bbox": [
                                        104,
                                        596,
                                        530,
                                        715
                                    ],
                                    "type": "text",
                                    "content": " or "
                                },
                                {
                                    "bbox": [
                                        104,
                                        596,
                                        530,
                                        715
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        104,
                                        596,
                                        530,
                                        715
                                    ],
                                    "type": "text",
                                    "content": ". Of course, the critical remaining issue is whether a memory- based method can answer queries quickly enough to be useful to an agent. A related concern is how speed degrades as the size of the memory grows. Finding nearest neighbors in a large database can take too long to be practical in many applications."
                                }
                            ]
                        }
                    ],
                    "index": 3
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 34
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        64,
                        141,
                        489,
                        260
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                141,
                                489,
                                260
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        141,
                                        489,
                                        260
                                    ],
                                    "type": "text",
                                    "content": "Proponents of memory- based methods have developed ways to accelerate the nearest neighbor search. Using parallel computers or special purpose hardware is one approach; another is the use of special multi- dimensional data structures to store the training data. One data structure studied for this application is the "
                                },
                                {
                                    "bbox": [
                                        64,
                                        141,
                                        489,
                                        260
                                    ],
                                    "type": "inline_equation",
                                    "content": "k"
                                },
                                {
                                    "bbox": [
                                        64,
                                        141,
                                        489,
                                        260
                                    ],
                                    "type": "text",
                                    "content": "- d tree (short for "
                                },
                                {
                                    "bbox": [
                                        64,
                                        141,
                                        489,
                                        260
                                    ],
                                    "type": "inline_equation",
                                    "content": "k"
                                },
                                {
                                    "bbox": [
                                        64,
                                        141,
                                        489,
                                        260
                                    ],
                                    "type": "text",
                                    "content": "- dimensional tree), which recursively splits a "
                                },
                                {
                                    "bbox": [
                                        64,
                                        141,
                                        489,
                                        260
                                    ],
                                    "type": "inline_equation",
                                    "content": "k"
                                },
                                {
                                    "bbox": [
                                        64,
                                        141,
                                        489,
                                        260
                                    ],
                                    "type": "text",
                                    "content": "- dimensional space into regions arranged as nodes of a binary tree. Depending on the amount of data and how it is distributed over the state space, nearest- neighbor search using "
                                },
                                {
                                    "bbox": [
                                        64,
                                        141,
                                        489,
                                        260
                                    ],
                                    "type": "inline_equation",
                                    "content": "k"
                                },
                                {
                                    "bbox": [
                                        64,
                                        141,
                                        489,
                                        260
                                    ],
                                    "type": "text",
                                    "content": "- d trees can quickly eliminate large regions of the space in the search for neighbors, making the searches feasible in some problems where naive searches would take too long."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        64,
                        261,
                        489,
                        354
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                261,
                                489,
                                354
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        261,
                                        489,
                                        354
                                    ],
                                    "type": "text",
                                    "content": "Locally weighted regression additionally requires fast ways to do the local regression computations which have to be repeated to answer each query. Researchers have developed many ways to address these problems, including methods for forgetting entries in order to keep the size of the database within bounds. The Bibliographic and Historical Comments section at the end of this chapter points to some of the relevant literature, including a selection of papers describing applications of memory- based learning to reinforcement learning."
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        64,
                        373,
                        416,
                        391
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                373,
                                416,
                                391
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        373,
                                        416,
                                        391
                                    ],
                                    "type": "text",
                                    "content": "9.10 Kernel-based Function Approximation"
                                }
                            ]
                        }
                    ],
                    "index": 2,
                    "level": 1
                },
                {
                    "bbox": [
                        64,
                        403,
                        489,
                        522
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                403,
                                489,
                                522
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        403,
                                        489,
                                        522
                                    ],
                                    "type": "text",
                                    "content": "Memory- based methods such as the weighted average and locally weighted regression methods described above depend on assigning weights to examples "
                                },
                                {
                                    "bbox": [
                                        64,
                                        403,
                                        489,
                                        522
                                    ],
                                    "type": "inline_equation",
                                    "content": "s' \\to g"
                                },
                                {
                                    "bbox": [
                                        64,
                                        403,
                                        489,
                                        522
                                    ],
                                    "type": "text",
                                    "content": " in the database depending on the distance between "
                                },
                                {
                                    "bbox": [
                                        64,
                                        403,
                                        489,
                                        522
                                    ],
                                    "type": "inline_equation",
                                    "content": "s'"
                                },
                                {
                                    "bbox": [
                                        64,
                                        403,
                                        489,
                                        522
                                    ],
                                    "type": "text",
                                    "content": " and a query states "
                                },
                                {
                                    "bbox": [
                                        64,
                                        403,
                                        489,
                                        522
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        64,
                                        403,
                                        489,
                                        522
                                    ],
                                    "type": "text",
                                    "content": ". The function that assigns these weights is called a kernel function, or simply a kernel. In the weighted average and locally weighted regressions methods, for example, a kernel function "
                                },
                                {
                                    "bbox": [
                                        64,
                                        403,
                                        489,
                                        522
                                    ],
                                    "type": "inline_equation",
                                    "content": "k: \\mathbb{R} \\to \\mathbb{R}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        403,
                                        489,
                                        522
                                    ],
                                    "type": "text",
                                    "content": " assigns weights to distances between states. More generally, weights do not have to depend on distances; they can depend on some other measure of similarity between states. In this case, "
                                },
                                {
                                    "bbox": [
                                        64,
                                        403,
                                        489,
                                        522
                                    ],
                                    "type": "inline_equation",
                                    "content": "k: \\mathbb{S} \\times \\mathbb{S} \\to \\mathbb{R}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        403,
                                        489,
                                        522
                                    ],
                                    "type": "text",
                                    "content": ", so that "
                                },
                                {
                                    "bbox": [
                                        64,
                                        403,
                                        489,
                                        522
                                    ],
                                    "type": "inline_equation",
                                    "content": "k(s, s')"
                                },
                                {
                                    "bbox": [
                                        64,
                                        403,
                                        489,
                                        522
                                    ],
                                    "type": "text",
                                    "content": " is the weight given to data about "
                                },
                                {
                                    "bbox": [
                                        64,
                                        403,
                                        489,
                                        522
                                    ],
                                    "type": "inline_equation",
                                    "content": "s'"
                                },
                                {
                                    "bbox": [
                                        64,
                                        403,
                                        489,
                                        522
                                    ],
                                    "type": "text",
                                    "content": " in its influence on answering queries about "
                                },
                                {
                                    "bbox": [
                                        64,
                                        403,
                                        489,
                                        522
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        64,
                                        403,
                                        489,
                                        522
                                    ],
                                    "type": "text",
                                    "content": "."
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        64,
                        524,
                        489,
                        629
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                524,
                                489,
                                629
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        524,
                                        489,
                                        629
                                    ],
                                    "type": "text",
                                    "content": "Viewed slightly differently, "
                                },
                                {
                                    "bbox": [
                                        64,
                                        524,
                                        489,
                                        629
                                    ],
                                    "type": "inline_equation",
                                    "content": "k(s, s')"
                                },
                                {
                                    "bbox": [
                                        64,
                                        524,
                                        489,
                                        629
                                    ],
                                    "type": "text",
                                    "content": " is a measure of the strength of generalization from "
                                },
                                {
                                    "bbox": [
                                        64,
                                        524,
                                        489,
                                        629
                                    ],
                                    "type": "inline_equation",
                                    "content": "s'"
                                },
                                {
                                    "bbox": [
                                        64,
                                        524,
                                        489,
                                        629
                                    ],
                                    "type": "text",
                                    "content": " to "
                                },
                                {
                                    "bbox": [
                                        64,
                                        524,
                                        489,
                                        629
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        64,
                                        524,
                                        489,
                                        629
                                    ],
                                    "type": "text",
                                    "content": ". Kernel functions numerically express how relevant knowledge about any state is to any other state. As an example, the strengths of generalization for tile coding shown in Figure 9.11 correspond to different kernel functions resulting from uniform and asymmetrical tile offsets. Although tile coding does not explicitly use a kernel function in its operation, it generalizes according to one. In fact, as we discuss more below, the strength of generalization resulting from linear parametric function approximation can always be described by a kernel function."
                                }
                            ]
                        }
                    ],
                    "index": 4
                },
                {
                    "bbox": [
                        64,
                        631,
                        489,
                        697
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                631,
                                489,
                                697
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        631,
                                        489,
                                        697
                                    ],
                                    "type": "text",
                                    "content": "Kernel regression is the memory- based method that computes a kernel weighted average of the targets of all examples stored in memory, assigning the result to the query state. If "
                                },
                                {
                                    "bbox": [
                                        64,
                                        631,
                                        489,
                                        697
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathcal{D}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        631,
                                        489,
                                        697
                                    ],
                                    "type": "text",
                                    "content": " is the set of stored examples, and "
                                },
                                {
                                    "bbox": [
                                        64,
                                        631,
                                        489,
                                        697
                                    ],
                                    "type": "inline_equation",
                                    "content": "g(s')"
                                },
                                {
                                    "bbox": [
                                        64,
                                        631,
                                        489,
                                        697
                                    ],
                                    "type": "text",
                                    "content": " denotes the target for state "
                                },
                                {
                                    "bbox": [
                                        64,
                                        631,
                                        489,
                                        697
                                    ],
                                    "type": "inline_equation",
                                    "content": "s'"
                                },
                                {
                                    "bbox": [
                                        64,
                                        631,
                                        489,
                                        697
                                    ],
                                    "type": "text",
                                    "content": " in a stored example, then kernel regression approximates the target function, in this case a value function depending on "
                                },
                                {
                                    "bbox": [
                                        64,
                                        631,
                                        489,
                                        697
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathcal{D}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        631,
                                        489,
                                        697
                                    ],
                                    "type": "text",
                                    "content": ", as"
                                }
                            ]
                        }
                    ],
                    "index": 5
                },
                {
                    "bbox": [
                        92,
                        702,
                        489,
                        730
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                92,
                                702,
                                489,
                                730
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        92,
                                        702,
                                        489,
                                        730
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\hat{v} (s, \\mathcal{D}) = \\sum_{s' \\in \\mathcal{D}} k(s, s') g(s'). \\tag{9.23}",
                                    "image_path": "75ceb21c13002b7b972f24e07703a0ea6ff6248e178bc80f699ee2ad6d116751.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 6
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 35
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        104,
                        141,
                        529,
                        180
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                141,
                                529,
                                180
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        141,
                                        529,
                                        180
                                    ],
                                    "type": "text",
                                    "content": "The weighted average method described above is a special case in which "
                                },
                                {
                                    "bbox": [
                                        104,
                                        141,
                                        529,
                                        180
                                    ],
                                    "type": "inline_equation",
                                    "content": "k(s,s^{\\prime})"
                                },
                                {
                                    "bbox": [
                                        104,
                                        141,
                                        529,
                                        180
                                    ],
                                    "type": "text",
                                    "content": " is non- zero only when "
                                },
                                {
                                    "bbox": [
                                        104,
                                        141,
                                        529,
                                        180
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        104,
                                        141,
                                        529,
                                        180
                                    ],
                                    "type": "text",
                                    "content": " and "
                                },
                                {
                                    "bbox": [
                                        104,
                                        141,
                                        529,
                                        180
                                    ],
                                    "type": "inline_equation",
                                    "content": "s^{\\prime}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        141,
                                        529,
                                        180
                                    ],
                                    "type": "text",
                                    "content": " are close to one another so that the sum need not be computed over all of "
                                },
                                {
                                    "bbox": [
                                        104,
                                        141,
                                        529,
                                        180
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathcal{D}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        141,
                                        529,
                                        180
                                    ],
                                    "type": "text",
                                    "content": "."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        104,
                        181,
                        530,
                        328
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                181,
                                530,
                                328
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        181,
                                        530,
                                        328
                                    ],
                                    "type": "text",
                                    "content": "A common kernel is the Gaussian radial basis function (RBF) used in RBF function approximation as described in Section 9.5.5. In the method described there, RBFs are features whose centers and widths are either fixed from the start, with centers presumably concentrated in areas where many examples are expected to fall, or are adjusted in some way during learning. Barring methods that adjust centers and widths, this is a linear parametric method whose parameters are the weights of each RBF, which are typically learned by stochastic gradient, or semi- gradient, descent. The form of the approximation is a linear combination of the pre- determined RBFs. Kernel regression with an RBF kernel differs from this in two ways. First, it is memory- based: the RBFs are centered on the states of the stored examples. Second, it is nonparametric: there are no parameters to learn; the response to a query is given by (9.23)."
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        104,
                        329,
                        530,
                        408
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                329,
                                530,
                                408
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        329,
                                        530,
                                        408
                                    ],
                                    "type": "text",
                                    "content": "Of course, many issues have to be addressed for practical implementation of kernel regression, issues that are beyond the scope of our brief discussion. However, it turns out that any linear parametric regression method like those we described in Section 9.4, with states represented by feature vectors "
                                },
                                {
                                    "bbox": [
                                        104,
                                        329,
                                        530,
                                        408
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{x}(s) = (x_{1}(s),x_{2}(s),\\ldots ,x_{d}(s))^{\\top}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        329,
                                        530,
                                        408
                                    ],
                                    "type": "text",
                                    "content": ", can be recast as kernel regression where "
                                },
                                {
                                    "bbox": [
                                        104,
                                        329,
                                        530,
                                        408
                                    ],
                                    "type": "inline_equation",
                                    "content": "k(s,s^{\\prime})"
                                },
                                {
                                    "bbox": [
                                        104,
                                        329,
                                        530,
                                        408
                                    ],
                                    "type": "text",
                                    "content": " is the inner product of the feature vector representations of "
                                },
                                {
                                    "bbox": [
                                        104,
                                        329,
                                        530,
                                        408
                                    ],
                                    "type": "inline_equation",
                                    "content": "s"
                                },
                                {
                                    "bbox": [
                                        104,
                                        329,
                                        530,
                                        408
                                    ],
                                    "type": "text",
                                    "content": " and "
                                },
                                {
                                    "bbox": [
                                        104,
                                        329,
                                        530,
                                        408
                                    ],
                                    "type": "inline_equation",
                                    "content": "s^{\\prime}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        329,
                                        530,
                                        408
                                    ],
                                    "type": "text",
                                    "content": "; that is"
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        132,
                        428,
                        528,
                        443
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                132,
                                428,
                                528,
                                443
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        132,
                                        428,
                                        528,
                                        443
                                    ],
                                    "type": "interline_equation",
                                    "content": "k(s,s^{\\prime}) = \\mathbf{x}(s)^{\\top}\\mathbf{x}(s^{\\prime}). \\tag{9.24}",
                                    "image_path": "ee1627e7184a83b2ffd73dd4343bb985673a77de1cd99592e051864fbf02aac6.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        104,
                        465,
                        529,
                        505
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                465,
                                529,
                                505
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        465,
                                        529,
                                        505
                                    ],
                                    "type": "text",
                                    "content": "Kernel regression with this kernel function produces the same approximation that a linear parametric method would if it used these feature vectors and learned with the same training data."
                                }
                            ]
                        }
                    ],
                    "index": 4
                },
                {
                    "bbox": [
                        104,
                        506,
                        530,
                        692
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                506,
                                530,
                                692
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        506,
                                        530,
                                        692
                                    ],
                                    "type": "text",
                                    "content": "We skip the mathematical justification for this, which can be found in any modern machine learning text, such as Bishop (2006), and simply point out an important implication. Instead of constructing features for linear parametric function approximators, one can instead construct kernel functions directly without referring at all to feature vectors. Not all kernel functions can be expressed as inner products of feature vectors as in (9.24), but a kernel function that can be expressed like this can offer significant advantages over the equivalent parametric method. For many sets of feature vectors, (9.24) has a compact functional form that can be evaluated without any computation taking place in the "
                                },
                                {
                                    "bbox": [
                                        104,
                                        506,
                                        530,
                                        692
                                    ],
                                    "type": "inline_equation",
                                    "content": "d"
                                },
                                {
                                    "bbox": [
                                        104,
                                        506,
                                        530,
                                        692
                                    ],
                                    "type": "text",
                                    "content": "- dimensional feature space. In these cases, kernel regression is much less complex than directly using a linear parametric method with states represented by these feature vectors. This is the so- called \"kernel trick\" that allows effectively working in the high- dimension of an expansive feature space while actually working only with the set of stored training examples. The kernel trick is the basis of many machine learning methods, and researchers have shown how it can sometimes benefit reinforcement learning."
                                }
                            ]
                        }
                    ],
                    "index": 5
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 36
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        64,
                        137,
                        423,
                        174
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                137,
                                423,
                                174
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        137,
                                        423,
                                        174
                                    ],
                                    "type": "text",
                                    "content": "9.11 Looking Deeper at On-policy Learning: Interest and Emphasis"
                                }
                            ]
                        }
                    ],
                    "index": 0,
                    "level": 1
                },
                {
                    "bbox": [
                        64,
                        190,
                        489,
                        309
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                190,
                                489,
                                309
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        190,
                                        489,
                                        309
                                    ],
                                    "type": "text",
                                    "content": "The algorithms we have considered so far in this chapter have treated all the states encountered equally, as if they were all equally important. In some cases, however, we are more interested in some states than others. In discounted episodic problems, for example, we may be more interested in accurately valuing early states in the episode than in later states where discounting may have made the rewards much less important to the value of the start state. Or, if an action- value function is being learned, it may be less important to accurately value poor actions whose value is much less than the greedy action. Function approximation resources are always limited, and if they were used in a more targeted way, then performance could be improved."
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        64,
                        311,
                        489,
                        416
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                311,
                                489,
                                416
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        311,
                                        489,
                                        416
                                    ],
                                    "type": "text",
                                    "content": "One reason we have treated all states encountered equally is that then we are updating according to the on- policy distribution, for which stronger theoretical results are available for semi- gradient methods. Recall that the on- policy distribution was defined as the distribution of states encountered in an MDP while following the target policy. Now we will generalize this concept significantly. Rather than having one on- policy distribution for the MDP, we will have many. All of them will have in common that they are a distribution of states encountered in trajectories while following the target policy, but they will vary in how the trajectories are, in a sense, initiated."
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        64,
                        418,
                        490,
                        564
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                418,
                                490,
                                564
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        564
                                    ],
                                    "type": "text",
                                    "content": "We now introduce some new concepts. First we introduce a non- negative scalar measure, a random variable "
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        564
                                    ],
                                    "type": "inline_equation",
                                    "content": "I_{t}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        564
                                    ],
                                    "type": "text",
                                    "content": " called interest, indicating the degree to which we are interested in accurately valuing the state (or state- action pair) at time "
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        564
                                    ],
                                    "type": "inline_equation",
                                    "content": "t"
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        564
                                    ],
                                    "type": "text",
                                    "content": " . If we don't care at all about the state, then the interest should be zero; if we fully care, it might be one, though it is formally allowed to take any non- negative value. The interest can be set in any causal way; for example, it may depend on the trajectory up to time "
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        564
                                    ],
                                    "type": "inline_equation",
                                    "content": "t"
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        564
                                    ],
                                    "type": "text",
                                    "content": " or the learned parameters at time "
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        564
                                    ],
                                    "type": "inline_equation",
                                    "content": "t"
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        564
                                    ],
                                    "type": "text",
                                    "content": " . The distribution "
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        564
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mu"
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        564
                                    ],
                                    "type": "text",
                                    "content": " in the "
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        564
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\overline{{\\mathrm{VE}}}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        564
                                    ],
                                    "type": "text",
                                    "content": " (9.1) is then defined as the distribution of states encountered while following the target policy, weighted by the interest. Second, we introduce another non- negative scalar random variable, the emphasis "
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        564
                                    ],
                                    "type": "inline_equation",
                                    "content": "M_{t}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        564
                                    ],
                                    "type": "text",
                                    "content": " . This scalar multiplies the learning update and thus emphasizes or de- emphasizes the learning done at time "
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        564
                                    ],
                                    "type": "inline_equation",
                                    "content": "t"
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        564
                                    ],
                                    "type": "text",
                                    "content": " . The general "
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        564
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        64,
                                        418,
                                        490,
                                        564
                                    ],
                                    "type": "text",
                                    "content": " - step learning rule, replacing (9.15), is"
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        77,
                        584,
                        489,
                        598
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                77,
                                584,
                                489,
                                598
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        77,
                                        584,
                                        489,
                                        598
                                    ],
                                    "type": "interline_equation",
                                    "content": "\\begin{array}{r}{\\mathbf{w}_{t + n}\\doteq \\mathbf{w}_{t + n - 1} + \\alpha M_{t}\\left[G_{t:t + n} - \\hat{v} (S_{t},\\mathbf{w}_{t + n - 1})\\right]\\nabla \\hat{v} (S_{t},\\mathbf{w}_{t + n - 1}),\\qquad 0\\leq t< T,} \\end{array} \\tag{9.25}",
                                    "image_path": "b44b7a9f8ec3c4b40a9f3bc12c9d34b8c3876109121f282a731217558027530a.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 4
                },
                {
                    "bbox": [
                        63,
                        618,
                        489,
                        645
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                63,
                                618,
                                489,
                                645
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        63,
                                        618,
                                        489,
                                        645
                                    ],
                                    "type": "text",
                                    "content": "with the "
                                },
                                {
                                    "bbox": [
                                        63,
                                        618,
                                        489,
                                        645
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        63,
                                        618,
                                        489,
                                        645
                                    ],
                                    "type": "text",
                                    "content": " - step return given by (9.16) and the emphasis determined recursively from the interest by:"
                                }
                            ]
                        }
                    ],
                    "index": 5
                },
                {
                    "bbox": [
                        91,
                        666,
                        489,
                        679
                    ],
                    "type": "interline_equation",
                    "lines": [
                        {
                            "bbox": [
                                91,
                                666,
                                489,
                                679
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        91,
                                        666,
                                        489,
                                        679
                                    ],
                                    "type": "interline_equation",
                                    "content": "M_{t} = I_{t} + \\gamma^{n}M_{t - n},\\qquad 0\\leq t< T, \\tag{9.26}",
                                    "image_path": "b461a19ed6fe3d7344daa250b62895e14fea1fa1095bd40335434812dd8aaaad.jpg"
                                }
                            ]
                        }
                    ],
                    "index": 6
                },
                {
                    "bbox": [
                        63,
                        699,
                        490,
                        740
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                63,
                                699,
                                490,
                                740
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        63,
                                        699,
                                        490,
                                        740
                                    ],
                                    "type": "text",
                                    "content": "with "
                                },
                                {
                                    "bbox": [
                                        63,
                                        699,
                                        490,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "M_{t}\\doteq 0"
                                },
                                {
                                    "bbox": [
                                        63,
                                        699,
                                        490,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " , for all "
                                },
                                {
                                    "bbox": [
                                        63,
                                        699,
                                        490,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "t< 0"
                                },
                                {
                                    "bbox": [
                                        63,
                                        699,
                                        490,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " . These equations are taken to include the Monte Carlo case, for which "
                                },
                                {
                                    "bbox": [
                                        63,
                                        699,
                                        490,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "G_{t:t + n} = G_{t}"
                                },
                                {
                                    "bbox": [
                                        63,
                                        699,
                                        490,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " , all the updates are made at end of the episode, "
                                },
                                {
                                    "bbox": [
                                        63,
                                        699,
                                        490,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "n = T - t"
                                },
                                {
                                    "bbox": [
                                        63,
                                        699,
                                        490,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " , and "
                                },
                                {
                                    "bbox": [
                                        63,
                                        699,
                                        490,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "M_{t} = I_{t}"
                                },
                                {
                                    "bbox": [
                                        63,
                                        699,
                                        490,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " ."
                                }
                            ]
                        }
                    ],
                    "index": 7
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 37
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        104,
                        141,
                        529,
                        167
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                141,
                                529,
                                167
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        141,
                                        529,
                                        167
                                    ],
                                    "type": "text",
                                    "content": "Example 9.4 illustrates how interest and emphasis can result in more accurate value estimates."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        117,
                        176,
                        324,
                        190
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                176,
                                324,
                                190
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        176,
                                        324,
                                        190
                                    ],
                                    "type": "text",
                                    "content": "Example 9.4: Interest and Emphasis"
                                }
                            ]
                        }
                    ],
                    "index": 1,
                    "level": 1
                },
                {
                    "bbox": [
                        117,
                        200,
                        517,
                        227
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                200,
                                517,
                                227
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        200,
                                        517,
                                        227
                                    ],
                                    "type": "text",
                                    "content": "To see the potential benefits of using interest and emphasis, consider the four- state Markov reward process shown below:"
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "type": "image",
                    "bbox": [
                        157,
                        239,
                        480,
                        308
                    ],
                    "blocks": [
                        {
                            "bbox": [
                                157,
                                239,
                                480,
                                308
                            ],
                            "lines": [
                                {
                                    "bbox": [
                                        157,
                                        239,
                                        480,
                                        308
                                    ],
                                    "spans": [
                                        {
                                            "bbox": [
                                                157,
                                                239,
                                                480,
                                                308
                                            ],
                                            "type": "image",
                                            "image_path": "e48764ba2dc962a6933eaa22e07284548ada9d9177569800b1a11aa08260f498.jpg"
                                        }
                                    ]
                                }
                            ],
                            "index": 3,
                            "type": "image_body"
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        117,
                        322,
                        517,
                        482
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                322,
                                517,
                                482
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        322,
                                        517,
                                        482
                                    ],
                                    "type": "text",
                                    "content": "Episodes start in the leftmost state, then transition one state to the right, with a reward of "
                                },
                                {
                                    "bbox": [
                                        117,
                                        322,
                                        517,
                                        482
                                    ],
                                    "type": "inline_equation",
                                    "content": "+1"
                                },
                                {
                                    "bbox": [
                                        117,
                                        322,
                                        517,
                                        482
                                    ],
                                    "type": "text",
                                    "content": ", on each step until the terminal state is reached. The true value of the first state is thus 4, of the second state 3, and so on as shown below each state. These are the true values; the estimated values can only approximate these because they are constrained by the parameterization. There are two components to the parameter vector "
                                },
                                {
                                    "bbox": [
                                        117,
                                        322,
                                        517,
                                        482
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w} = (w_{1},w_{2})^{\\top}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        322,
                                        517,
                                        482
                                    ],
                                    "type": "text",
                                    "content": ", and the parameterization is as written inside each state. The estimated values of the first two states are given by "
                                },
                                {
                                    "bbox": [
                                        117,
                                        322,
                                        517,
                                        482
                                    ],
                                    "type": "inline_equation",
                                    "content": "w_{1}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        322,
                                        517,
                                        482
                                    ],
                                    "type": "text",
                                    "content": " alone and thus must be the same even though their true values are different. Similarly, the estimated values of the third and fourth states are given by "
                                },
                                {
                                    "bbox": [
                                        117,
                                        322,
                                        517,
                                        482
                                    ],
                                    "type": "inline_equation",
                                    "content": "w_{2}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        322,
                                        517,
                                        482
                                    ],
                                    "type": "text",
                                    "content": " alone and must be the same even though their true values are different. Suppose that we are interested in accurately valuing only the leftmost state; we assign it an interest of 1 while all the other states are assigned an interest of 0, as indicated above the states."
                                }
                            ]
                        }
                    ],
                    "index": 4
                },
                {
                    "bbox": [
                        117,
                        484,
                        515,
                        604
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                484,
                                515,
                                604
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        484,
                                        515,
                                        604
                                    ],
                                    "type": "text",
                                    "content": "First consider applying gradient Monte Carlo algorithms to this problem. The algorithms presented earlier in this chapter that do not take into account interest and emphasis (in (9.7) and the box on page 202) will converge (for decreasing step sizes) to the parameter vector "
                                },
                                {
                                    "bbox": [
                                        117,
                                        484,
                                        515,
                                        604
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}_{\\infty} = (3.5,1.5)"
                                },
                                {
                                    "bbox": [
                                        117,
                                        484,
                                        515,
                                        604
                                    ],
                                    "type": "text",
                                    "content": ", which gives the first state—the only one we are interested in—a value of 3.5 (i.e., intermediate between the true values of the first and second states). The methods presented in this section that do use interest and emphasis, on the other hand, will learn the value of the first state exactly correctly; in, will converge to 4 while "
                                },
                                {
                                    "bbox": [
                                        117,
                                        484,
                                        515,
                                        604
                                    ],
                                    "type": "inline_equation",
                                    "content": "w_{2}"
                                },
                                {
                                    "bbox": [
                                        117,
                                        484,
                                        515,
                                        604
                                    ],
                                    "type": "text",
                                    "content": " will never be updated because the emphasis is zero in all states save the leftmost."
                                }
                            ]
                        }
                    ],
                    "index": 5
                },
                {
                    "bbox": [
                        117,
                        607,
                        515,
                        701
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                117,
                                607,
                                515,
                                701
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        117,
                                        607,
                                        515,
                                        701
                                    ],
                                    "type": "text",
                                    "content": "Now consider applying two- step semi- gradient TD methods. The methods from earlier in this chapter without interest and emphasis (in (9.15) and (9.16) and the box on page 209) will again converge to "
                                },
                                {
                                    "bbox": [
                                        117,
                                        607,
                                        515,
                                        701
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}_{\\infty} = (3.5,1.5)"
                                },
                                {
                                    "bbox": [
                                        117,
                                        607,
                                        515,
                                        701
                                    ],
                                    "type": "text",
                                    "content": ", while the methods with interest and emphasis converge to "
                                },
                                {
                                    "bbox": [
                                        117,
                                        607,
                                        515,
                                        701
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}_{\\infty} = (4,2)"
                                },
                                {
                                    "bbox": [
                                        117,
                                        607,
                                        515,
                                        701
                                    ],
                                    "type": "text",
                                    "content": ". The latter produces the exactly correct values for the first state and for the third state (which the first state bootstraps from) while never making any updates corresponding to the second or fourth states."
                                }
                            ]
                        }
                    ],
                    "index": 6
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 38
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        64,
                        137,
                        190,
                        154
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                137,
                                190,
                                154
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        137,
                                        190,
                                        154
                                    ],
                                    "type": "text",
                                    "content": "9.12 Summary"
                                }
                            ]
                        }
                    ],
                    "index": 0,
                    "level": 1
                },
                {
                    "bbox": [
                        64,
                        165,
                        490,
                        218
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                165,
                                490,
                                218
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        165,
                                        490,
                                        218
                                    ],
                                    "type": "text",
                                    "content": "Reinforcement learning systems must be capable of generalization if they are to be applicable to artificial intelligence or to large engineering applications. To achieve this, any of a broad range of existing methods for supervised- learning function approximation can be used simply by treating each update as a training example."
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        64,
                        219,
                        490,
                        312
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                219,
                                490,
                                312
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        219,
                                        490,
                                        312
                                    ],
                                    "type": "text",
                                    "content": "Perhaps the most suitable supervised learning methods are those using parameterized function approximation, in which the policy is parameterized by a weight vector w. Although the weight vector has many components, the state space is much larger still, and we must settle for an approximate solution. We defined the mean square value error, "
                                },
                                {
                                    "bbox": [
                                        64,
                                        219,
                                        490,
                                        312
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\overline{{\\mathrm{VE}}} (\\mathbf{w})"
                                },
                                {
                                    "bbox": [
                                        64,
                                        219,
                                        490,
                                        312
                                    ],
                                    "type": "text",
                                    "content": " , as a measure of the error in the values "
                                },
                                {
                                    "bbox": [
                                        64,
                                        219,
                                        490,
                                        312
                                    ],
                                    "type": "inline_equation",
                                    "content": "v_{\\pi_{\\mathbf{w}}}(s)"
                                },
                                {
                                    "bbox": [
                                        64,
                                        219,
                                        490,
                                        312
                                    ],
                                    "type": "text",
                                    "content": " for a weight vector w under the on- policy distribution, "
                                },
                                {
                                    "bbox": [
                                        64,
                                        219,
                                        490,
                                        312
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mu"
                                },
                                {
                                    "bbox": [
                                        64,
                                        219,
                                        490,
                                        312
                                    ],
                                    "type": "text",
                                    "content": " . The "
                                },
                                {
                                    "bbox": [
                                        64,
                                        219,
                                        490,
                                        312
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\overline{{\\mathrm{VE}}}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        219,
                                        490,
                                        312
                                    ],
                                    "type": "text",
                                    "content": " gives us a clear way to rank different value- function approximations in the on- policy case."
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        64,
                        314,
                        489,
                        432
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                314,
                                489,
                                432
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        314,
                                        489,
                                        432
                                    ],
                                    "type": "text",
                                    "content": "To find a good weight vector, the most popular methods are variations of stochastic gradient descent (SGD). In this chapter we have focused on the on- policy case with a fixed policy, also known as policy evaluation or prediction; a natural learning algorithm for this case is "
                                },
                                {
                                    "bbox": [
                                        64,
                                        314,
                                        489,
                                        432
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        64,
                                        314,
                                        489,
                                        432
                                    ],
                                    "type": "text",
                                    "content": " - step semi- gradient "
                                },
                                {
                                    "bbox": [
                                        64,
                                        314,
                                        489,
                                        432
                                    ],
                                    "type": "inline_equation",
                                    "content": "T D"
                                },
                                {
                                    "bbox": [
                                        64,
                                        314,
                                        489,
                                        432
                                    ],
                                    "type": "text",
                                    "content": " , which includes gradient Monte Carlo and semi- gradient TD(0) algorithms as the special cases when "
                                },
                                {
                                    "bbox": [
                                        64,
                                        314,
                                        489,
                                        432
                                    ],
                                    "type": "inline_equation",
                                    "content": "n = \\infty"
                                },
                                {
                                    "bbox": [
                                        64,
                                        314,
                                        489,
                                        432
                                    ],
                                    "type": "text",
                                    "content": " and "
                                },
                                {
                                    "bbox": [
                                        64,
                                        314,
                                        489,
                                        432
                                    ],
                                    "type": "inline_equation",
                                    "content": "n = 1"
                                },
                                {
                                    "bbox": [
                                        64,
                                        314,
                                        489,
                                        432
                                    ],
                                    "type": "text",
                                    "content": " respectively. Semi- gradient TD methods are not true gradient methods. In such bootstrapping methods (including DP), the weight vector appears in the update target, yet this is not taken into account in computing the gradient- thus they are semi- gradient methods. As such, they cannot rely on classical SGD results."
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        64,
                        433,
                        490,
                        645
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                433,
                                490,
                                645
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        433,
                                        490,
                                        645
                                    ],
                                    "type": "text",
                                    "content": "Nevertheless, good results can be obtained for semi- gradient methods in the special case of linear function approximation, in which the value estimates are sums of features times corresponding weights. The linear case is the most well understood theoretically and works well in practice when provided with appropriate features. Choosing the features is one of the most important ways of adding prior domain knowledge to reinforcement learning systems. They can be chosen as polynomials, but this case generalizes poorly in the online learning setting typically considered in reinforcement learning. Better is to choose features according the Fourier basis, or according to some form of coarse coding with sparse overlapping receptive fields. Tile coding is a form of coarse coding that is particularly computationally efficient and flexible. Radial basis functions are useful for one- or two- dimensional tasks in which a smoothly varying response is important. LSTD is the most data- efficient linear TD prediction method, but requires computation proportional to the square of the number of weights, whereas all the other methods are of complexity linear in the number of weights. Nonlinear methods include artificial neural networks trained by backpropagation and variations of SGD; these methods have become very popular in recent years under the name deep reinforcement learning."
                                }
                            ]
                        }
                    ],
                    "index": 4
                },
                {
                    "bbox": [
                        64,
                        647,
                        489,
                        740
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                647,
                                489,
                                740
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        647,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": "Linear semi- gradient "
                                },
                                {
                                    "bbox": [
                                        64,
                                        647,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        64,
                                        647,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " - step TD is guaranteed to converge under standard conditions, for all "
                                },
                                {
                                    "bbox": [
                                        64,
                                        647,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        64,
                                        647,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " , to a "
                                },
                                {
                                    "bbox": [
                                        64,
                                        647,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\overline{{\\mathrm{VE}}}"
                                },
                                {
                                    "bbox": [
                                        64,
                                        647,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " that is within a bound of the optimal error (achieved asymptotically by Monte Carlo methods). This bound is always tighter for higher "
                                },
                                {
                                    "bbox": [
                                        64,
                                        647,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        64,
                                        647,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " and approaches zero as "
                                },
                                {
                                    "bbox": [
                                        64,
                                        647,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "n\\to \\infty"
                                },
                                {
                                    "bbox": [
                                        64,
                                        647,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " . However, in practice very high "
                                },
                                {
                                    "bbox": [
                                        64,
                                        647,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        64,
                                        647,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " results in very slow learning, and some degree of bootstrapping ( "
                                },
                                {
                                    "bbox": [
                                        64,
                                        647,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "n< \\infty"
                                },
                                {
                                    "bbox": [
                                        64,
                                        647,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " ) is usually preferable, just as we saw in comparisons of tabular "
                                },
                                {
                                    "bbox": [
                                        64,
                                        647,
                                        489,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        64,
                                        647,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " - step methods in Chapter 7 and in comparisons of tabular TD and Monte Carlo methods in Chapter 6."
                                }
                            ]
                        }
                    ],
                    "index": 5
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 39
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        104,
                        141,
                        530,
                        207
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                141,
                                530,
                                207
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        141,
                                        530,
                                        207
                                    ],
                                    "type": "text",
                                    "content": "Exercise 9.7 One of the simplest artificial neural networks consists of a single semi- linear unit with a logistic nonlinearity. The need to handle approximate value functions of this form is common in games that end with either a win or a loss, in which case the value of a state can be interpreted as the probability of winning. Derive the learning algorithm for this case, from (9.7), such that no gradient notation appears."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        104,
                        211,
                        530,
                        290
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                211,
                                530,
                                290
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        211,
                                        530,
                                        290
                                    ],
                                    "type": "text",
                                    "content": "\\*Exercise 9.8 Arguably, the squared error used to derive (9.7) is inappropriate for the case treated in the preceding exercise, and the right error measure is the cross- entropy loss (which you can find on Wikipedia). Repeat the derivation in Section 9.3, using the cross- entropy loss instead of the squared error in (9.4), all the way to an explicit form with no gradient or logarithm notation in it. Is your final form more complex, or simpler, than that you obtained in the preceding exercise?"
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        104,
                        310,
                        415,
                        328
                    ],
                    "type": "title",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                310,
                                415,
                                328
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        310,
                                        415,
                                        328
                                    ],
                                    "type": "text",
                                    "content": "Bibliographical and Historical Remarks"
                                }
                            ]
                        }
                    ],
                    "index": 2,
                    "level": 1
                },
                {
                    "bbox": [
                        104,
                        340,
                        530,
                        405
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                340,
                                530,
                                405
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        340,
                                        530,
                                        405
                                    ],
                                    "type": "text",
                                    "content": "Generalization and function approximation have always been an integral part of reinforcement learning. Bertsekas and Tsitsiklis (1996), Bertsekas (2012), and Sugiyama et al. (2013) present the state of the art in function approximation in reinforcement learning. Some of the early work with function approximation in reinforcement learning is discussed at the end of this section."
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        104,
                        416,
                        530,
                        483
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                416,
                                530,
                                483
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        416,
                                        530,
                                        483
                                    ],
                                    "type": "text",
                                    "content": "9.3 Gradient- descent methods for minimizing mean square error in supervised learning are well known. Widrow and Hoff (1960) introduced the least- mean- square (LMS) algorithm, which is the prototypical incremental gradient- descent algorithm. Details of this and related algorithms are provided in many texts (e.g., Widrow and Stearns, 1985; Bishop, 1995; Duda and Hart, 1973)."
                                }
                            ]
                        }
                    ],
                    "index": 4
                },
                {
                    "bbox": [
                        143,
                        486,
                        530,
                        539
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                143,
                                486,
                                530,
                                539
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        143,
                                        486,
                                        530,
                                        539
                                    ],
                                    "type": "text",
                                    "content": "Semi- gradient TD(0) was first explored by Sutton (1984, 1988), as part of the linear TD(A) algorithm that we will treat in Chapter 12. The term \"semi- gradient\" to describe these bootstrapping methods is new to the second edition of this book."
                                }
                            ]
                        }
                    ],
                    "index": 5
                },
                {
                    "bbox": [
                        143,
                        544,
                        529,
                        610
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                143,
                                544,
                                529,
                                610
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        143,
                                        544,
                                        529,
                                        610
                                    ],
                                    "type": "text",
                                    "content": "The earliest use of state aggregation in reinforcement learning may have been Michie and Chambers's BOXES system (1968). The theory of state aggregation in reinforcement learning has been developed by Singh, Jaakkola, and Jordan (1995) and Tsitsiklis and Van Roy (1996). State aggregation has been used in dynamic programming from its earliest days (e.g., Bellman, 1957a)."
                                }
                            ]
                        }
                    ],
                    "index": 6
                },
                {
                    "bbox": [
                        104,
                        620,
                        530,
                        740
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                620,
                                530,
                                740
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        620,
                                        530,
                                        740
                                    ],
                                    "type": "text",
                                    "content": "9.4 Sutton (1988) proved convergence of linear TD(0) in the mean to the minimal VE solution for the case in which the feature vectors, "
                                },
                                {
                                    "bbox": [
                                        104,
                                        620,
                                        530,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\{\\mathbf{x}(s):s\\in \\mathcal{S}\\}"
                                },
                                {
                                    "bbox": [
                                        104,
                                        620,
                                        530,
                                        740
                                    ],
                                    "type": "text",
                                    "content": ", are linearly independent. Convergence with probability 1 was proved by several researchers at about the same time (Peng, 1993; Dayan and Sejnowski, 1994; Tsitsiklis, 1994; Gurvits, Lin, and Hanson, 1994). In addition, Jaakkola, Jordan, and Singh (1994) proved convergence under online updating. All of these results assumed linearly independent feature vectors, which implies at least as many components to "
                                },
                                {
                                    "bbox": [
                                        104,
                                        620,
                                        530,
                                        740
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathbf{w}_t"
                                },
                                {
                                    "bbox": [
                                        104,
                                        620,
                                        530,
                                        740
                                    ],
                                    "type": "text",
                                    "content": " as there are states. Convergence for the more important case of general (dependent) feature vectors was first shown by Dayan (1992). A significant"
                                }
                            ]
                        }
                    ],
                    "index": 7
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 40
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        104,
                        141,
                        489,
                        180
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                141,
                                489,
                                180
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        141,
                                        489,
                                        180
                                    ],
                                    "type": "text",
                                    "content": "generalization and strengthening of Dayan's result was proved by Tsitsiklis and Van Roy (1997). They proved the main result presented in this section, the bound on the asymptotic error of linear bootstrapping methods."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        64,
                        192,
                        489,
                        218
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                192,
                                489,
                                218
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        192,
                                        489,
                                        218
                                    ],
                                    "type": "text",
                                    "content": "9.5 Our presentation of the range of possibilities for linear function approximation is based on that by Barto (1990)."
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        64,
                        230,
                        489,
                        270
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                230,
                                489,
                                270
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        230,
                                        489,
                                        270
                                    ],
                                    "type": "text",
                                    "content": "9.5.2 Konidaris, Osentoski, and Thomas (2011) introduced the Fourier basis in a simple form suitable for reinforcement learning problems with multi- dimensional continuous state spaces and functions that do not have to be periodic."
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        64,
                        282,
                        489,
                        321
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                282,
                                489,
                                321
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        282,
                                        489,
                                        321
                                    ],
                                    "type": "text",
                                    "content": "9.5.3 The term coarse coding is due to Hinton (1984), and our Figure 9.6 is based on one of his figures. Waltz and Fu (1965) provide an early example of this type of function approximation in a reinforcement learning system."
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        64,
                        333,
                        490,
                        479
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                333,
                                490,
                                479
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        333,
                                        490,
                                        479
                                    ],
                                    "type": "text",
                                    "content": "9.5.4 Tile coding, including hashing, was introduced by Albus (1971, 1981). He described it in terms of his \"cerebellar model articulator controller,\" or CMAC, as tile coding is sometimes known in the literature. The term \"tile coding\" was new to the first edition of this book, though the idea of describing CMAC in these terms is taken from Watkins (1989). Tile coding has been used in many reinforcement learning systems (e.g., Shewchuk and Dean, 1990; Lin and Kim, 1991; Miller, Scalera, and Kim, 1994; Sofge and White, 1992; Tham, 1994; Sutton, 1996; Watkins, 1989) as well as in other types of learning control systems (e.g., Kraft and Campagna, 1990; Kraft, Miller, and Dietz, 1992). This section draws heavily on the work of Miller and Glanz (1996). General software for tile coding is available in several languages (e.g., see http://incompleteideas.net/tiles/tiles3. html)."
                                }
                            ]
                        }
                    ],
                    "index": 4
                },
                {
                    "bbox": [
                        64,
                        490,
                        489,
                        543
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                490,
                                489,
                                543
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        490,
                                        489,
                                        543
                                    ],
                                    "type": "text",
                                    "content": "9.5.5 Function approximation using radial basis functions has received wide attention ever since being related to ANNs by Broomhead and Lowe (1988). Powell (1987) reviewed earlier uses of RBFs, and Poggio and Girosi (1989, 1990) extensively developed and applied this approach."
                                }
                            ]
                        }
                    ],
                    "index": 5
                },
                {
                    "bbox": [
                        64,
                        556,
                        490,
                        661
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                556,
                                490,
                                661
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        556,
                                        490,
                                        661
                                    ],
                                    "type": "text",
                                    "content": "9.6 Automatic methods for adapting the step- size parameter include RMSprop (Tieleman and Hinton, 2012), Adam (Kingma and Ba, 2015), stochastic meta- descent methods such as Delta- Bar- Delta (Jacobs, 1988), its incremental generalization (Sutton, 1992b, c; Mahmood et al., 2012), and nonlinear generalizations (Schraudolph, 1999, 2002). Methods explicitly designed for reinforcement learning include Alphabound (Dabney and Barto, 2012), SID and NOSID (Dabney, 2014), TIDBD (Kearney et al., in preparation) and the application of stochastic meta- descent to policy gradient learning (Schraudolph, Yu, and Aberdeen, 2006)."
                                }
                            ]
                        }
                    ],
                    "index": 6
                },
                {
                    "bbox": [
                        64,
                        673,
                        489,
                        740
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                673,
                                489,
                                740
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        673,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": "9.7 The introduction of the threshold logic unit as an abstract model neuron by McCulloch and Pitts (1943) was the beginning of ANNs. The history of ANNs as learning methods for classification or regression has passed through several stages: roughly, the Perceptron (Rosenblatt, 1962) and ADALINE (ADaptive LINear Element) (Widrow and Hoff, 1960) stage of learning by single- layer ANNs, the"
                                }
                            ]
                        }
                    ],
                    "index": 7
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 41
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        145,
                        141,
                        530,
                        207
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                145,
                                141,
                                530,
                                207
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        145,
                                        141,
                                        530,
                                        207
                                    ],
                                    "type": "text",
                                    "content": "error- backpropagation stage (LeCun, 1985; Rumelhart, Hinton, and Williams, 1986) of learning by multi- layer ANNs, and the current deep- learning stage with its emphasis on representation learning (e.g., Bengio, Courville, and Vincent, 2012; Goodfellow, Bengio, and Courville, 2016). Examples of the many books on ANNs are Haykin (1994), Bishop (1995), and Ripley (2007)."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        144,
                        220,
                        530,
                        742
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                144,
                                220,
                                530,
                                742
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        144,
                                        220,
                                        530,
                                        742
                                    ],
                                    "type": "text",
                                    "content": "ANNs as function approximation for reinforcement learning goes back to the early work of Farley and Clark (1954), who used reinforcement- like learning to modify the weights of linear threshold functions representing policies. Widrow, Gupta, and Maitra (1973) presented a neuron- like linear threshold unit implementing a learning process they called learning with a critic or selective bootstrap adaptation, a reinforcement- learning variant of the ADALINE algorithm. Werbos (1987, 1994) developed an approach to prediction and control that uses ANNs trained by error backpropation to learn policies and value functions using TD- like algorithms. Barto, Sutton, and Brouwer (1981) and Barto and Sutton (1981b) extended the idea of an associative memory network (e.g., Kohonen, 1977; Anderson, Silverstein, Ritz, and Jones, 1977) to reinforcement learning. Barto, Anderson, and Sutton (1982) used a two- layer ANN to learn a nonlinear control policy, and emphasized the first layer's role of learning a suitable representation. Hampson (1983, 1989) was an early proponent of multilayer ANNs for learning value functions. Barto, Sutton, and Anderson (1983) presented an actor- critic algorithm in the form of an ANN learning to balance a simulated pole (see Sections 15.7 and 15.8). Barto and Anandan (1985) introduced a stochastic version of Widrow et al.'s (1973) selective bootstrap algorithm called the associative reward- penalty "
                                },
                                {
                                    "bbox": [
                                        144,
                                        220,
                                        530,
                                        742
                                    ],
                                    "type": "inline_equation",
                                    "content": "(A_{R - P})"
                                },
                                {
                                    "bbox": [
                                        144,
                                        220,
                                        530,
                                        742
                                    ],
                                    "type": "text",
                                    "content": " algorithm. Barto (1985, 1986) and Barto and Jordan (1987) described multi- layer ANNs consisting of "
                                },
                                {
                                    "bbox": [
                                        144,
                                        220,
                                        530,
                                        742
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathrm{A_{R - P}}"
                                },
                                {
                                    "bbox": [
                                        144,
                                        220,
                                        530,
                                        742
                                    ],
                                    "type": "text",
                                    "content": " units trained with a globally- broadcast reinforcement signal to learn classification rules that are not linearly separable. Barto (1985) discussed this approach to ANNs and how this type of learning rule is related to others in the literature at that time. (See Section 15.10 for additional discussion of this approach to training multi- layer ANNs.) Anderson (1986, 1987, 1989) evaluated numerous methods for training multilayer ANNs and showed that an actor- critic algorithm in which both the actor and critic were implemented by two- layer ANNs trained by error backpropagation outperformed single- layer ANNs in the pole- balancing and tower of Hanoi tasks. Williams (1986) described several ways that backpropagation and reinforcement learning can be combined for training ANNs. Gullapalli (1990) and Williams (1992) devised reinforcement learning algorithms for neuron- like units having continuous, rather than binary, outputs. Barto, Sutton, and Watkins (1990) argued that ANNs can play significant roles for approximating functions required for solving sequential decision problems. Williams (1992) related REINFORCE learning rules (Section 13.3) to the error backpropagation method for training multi- layer ANNs. Tesauro's TD- Gammon (Tesauro 1992, 1994; Section 16.1) influentially demonstrated the learning abilities of TD( "
                                },
                                {
                                    "bbox": [
                                        144,
                                        220,
                                        530,
                                        742
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\lambda"
                                },
                                {
                                    "bbox": [
                                        144,
                                        220,
                                        530,
                                        742
                                    ],
                                    "type": "text",
                                    "content": " ) algorithm with function approximation by multi- layer ANNs in learning to play backgammon. The AlphaGo, AlphaGo Zero, and AlphaZero programs of Silver et al. (2016, 2017a, b; Section 16.6) used reinforcement learning with"
                                }
                            ]
                        }
                    ],
                    "index": 1
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 42
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        104,
                        141,
                        490,
                        180
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                141,
                                490,
                                180
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        141,
                                        490,
                                        180
                                    ],
                                    "type": "text",
                                    "content": "deep convolutional ANNs in achieving impressive results with the game of Go. Schmidhuber (2015) reviews applications of ANNs in reinforcement learning, including applications of recurrent ANNs."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        64,
                        193,
                        490,
                        286
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                193,
                                490,
                                286
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        193,
                                        490,
                                        286
                                    ],
                                    "type": "text",
                                    "content": "9.8 LSTD is due to Bradtke and Barto (see Bradtke, 1993, 1994; Bradtke and Barto, 1996; Bradtke, Ydstie, and Barto, 1994), and was further developed by Boyan (1999, 2002), Nedić and Bertsekas (2003), and Yu (2010). The incremental update of the inverse matrix has been known at least since 1949 (Sherman and Morrison, 1949). An extension of least- squares methods to control was introduced by Lagoudakis and Parr (2003; Buşoniu, Lazaric, Ghavamzadeh, Munos, Babuška, and De Schutter, 2012)."
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        64,
                        298,
                        490,
                        537
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                298,
                                490,
                                537
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        298,
                                        490,
                                        537
                                    ],
                                    "type": "text",
                                    "content": "9.9 Our discussion of memory- based function approximation is largely based on the review of locally weighted learning by Atkeson, Moore, and Schaal (1997). Atkeson (1992) discussed the use of locally weighted regression in memory- based robot learning and supplied an extensive bibliography covering the history of the idea. Stanfill and Waltz (1986) influentially argued for the importance of memory based methods in artificial intelligence, especially in light of parallel architectures then becoming available, such as the Connection Machine. Baird and Klopf (1993) introduced a novel memory- based approach and used it as the function approximation method for Q- learning applied to the pole- balancing task. Schaal and Atkeson (1994) applied locally weighted regression to a robot juggling control problem, where it was used to learn a system model. Peng (1995) used the pole- balancing task to experiment with several nearest- neighbor methods for approximating value functions, policies, and environment models. Tadepalli and Ok (1996) obtained promising results with locally- weighted linear regression to learn a value function for a simulated automatic guided vehicle task. Bottou and Vapnik (1992) demonstrated surprising efficiency of several local learning algorithms compared to non- local algorithms in some pattern recognition tasks, discussing the impact of local learning on generalization."
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        104,
                        542,
                        490,
                        621
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                542,
                                490,
                                621
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        542,
                                        490,
                                        621
                                    ],
                                    "type": "text",
                                    "content": "Bentley (1975) introduced "
                                },
                                {
                                    "bbox": [
                                        104,
                                        542,
                                        490,
                                        621
                                    ],
                                    "type": "inline_equation",
                                    "content": "k"
                                },
                                {
                                    "bbox": [
                                        104,
                                        542,
                                        490,
                                        621
                                    ],
                                    "type": "text",
                                    "content": "- d trees and reported observing average running time of "
                                },
                                {
                                    "bbox": [
                                        104,
                                        542,
                                        490,
                                        621
                                    ],
                                    "type": "inline_equation",
                                    "content": "\\mathrm{O}(\\log n)"
                                },
                                {
                                    "bbox": [
                                        104,
                                        542,
                                        490,
                                        621
                                    ],
                                    "type": "text",
                                    "content": " for nearest neighbor search over "
                                },
                                {
                                    "bbox": [
                                        104,
                                        542,
                                        490,
                                        621
                                    ],
                                    "type": "inline_equation",
                                    "content": "n"
                                },
                                {
                                    "bbox": [
                                        104,
                                        542,
                                        490,
                                        621
                                    ],
                                    "type": "text",
                                    "content": " records. Friedman, Bentley, and Finkel (1977) clarified the algorithm for nearest neighbor search with "
                                },
                                {
                                    "bbox": [
                                        104,
                                        542,
                                        490,
                                        621
                                    ],
                                    "type": "inline_equation",
                                    "content": "k"
                                },
                                {
                                    "bbox": [
                                        104,
                                        542,
                                        490,
                                        621
                                    ],
                                    "type": "text",
                                    "content": "- d trees. Omohundro (1987) discussed efficiency gains possible with hierarchical data structures such as "
                                },
                                {
                                    "bbox": [
                                        104,
                                        542,
                                        490,
                                        621
                                    ],
                                    "type": "inline_equation",
                                    "content": "k"
                                },
                                {
                                    "bbox": [
                                        104,
                                        542,
                                        490,
                                        621
                                    ],
                                    "type": "text",
                                    "content": "- d- trees. Moore, Schneider, and Deng (1997) introduced the use of "
                                },
                                {
                                    "bbox": [
                                        104,
                                        542,
                                        490,
                                        621
                                    ],
                                    "type": "inline_equation",
                                    "content": "k"
                                },
                                {
                                    "bbox": [
                                        104,
                                        542,
                                        490,
                                        621
                                    ],
                                    "type": "text",
                                    "content": "- d trees for efficient locally weighted regression."
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        64,
                        634,
                        489,
                        740
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                634,
                                489,
                                740
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        634,
                                        489,
                                        740
                                    ],
                                    "type": "text",
                                    "content": "9.10 The origin of kernel regression is the method of potential functions of Aizerman, Braverman, and Rozonoer (1964). They likened the data to point electric charges of various signs and magnitudes distributed over space. The resulting electric potential over space produced by summing the potentials of the point charges corresponded to the interpolated surface. In this analogy, the kernel function is the potential of a point charge, which falls off as the reciprocal of the distance from the charge. Connell and Utgoff (1987) applied an actor- critic method to the pole- balancing task in which the critic approximated the value function"
                                }
                            ]
                        }
                    ],
                    "index": 4
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 43
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        143,
                        141,
                        529,
                        234
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                143,
                                141,
                                529,
                                234
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        143,
                                        141,
                                        529,
                                        234
                                    ],
                                    "type": "text",
                                    "content": "using kernel regression with an inverse- distance weighting. Predating widespread interest in kernel regression in machine learning, these authors did not use the term kernel, but referred to \"Shepard's method\" (Shepard, 1968). Other kernel- based approaches to reinforcement learning include those of Ormoneit and Sen (2002), Dieterich and Wang (2002), Xu, Xie, Hu, and Lu (2005), Taylor and Parr (2009), Barreto, Precup, and Pineau (2011), and Bhat, Farias, and Moallemi (2012)."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        104,
                        244,
                        498,
                        256
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                244,
                                498,
                                256
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        244,
                                        498,
                                        256
                                    ],
                                    "type": "text",
                                    "content": "9.11 For Emphatic- TD methods, see the bibliographical notes to Section 11.8."
                                }
                            ]
                        }
                    ],
                    "index": 1
                },
                {
                    "bbox": [
                        104,
                        273,
                        529,
                        366
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                273,
                                529,
                                366
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        273,
                                        529,
                                        366
                                    ],
                                    "type": "text",
                                    "content": "The earliest example we know of in which function approximation methods were used for learning value functions was Samuel's checkers player (1959, 1967). Samuel followed Shannon's (1950) suggestion that a value function did not have to be exact to be a useful guide to selecting moves in a game and that it might be approximated by a linear combination of features. In addition to linear function approximation, Samuel experimented with lookup tables and hierarchical lookup tables called signature tables (Griffith, 1966, 1974; Page, 1977; Biermann, Fairfield, and Beres, 1982)."
                                }
                            ]
                        }
                    ],
                    "index": 2
                },
                {
                    "bbox": [
                        104,
                        367,
                        529,
                        474
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                367,
                                529,
                                474
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        367,
                                        529,
                                        474
                                    ],
                                    "type": "text",
                                    "content": "At about the same time as Samuel's work, Bellman and Dreyfus (1959) proposed using function approximation methods with DP. (It is tempting to think that Bellman and Samuel had some influence on one another, but we know of no reference to the other in the work of either.) There is now a fairly extensive literature on function approximation methods and DP, such as multigrid methods and methods using splines and orthogonal polynomials (e.g., Bellman and Dreyfus, 1959; Bellman, Kalaba, and Kotkin, 1963; Daniel, 1976; Whitt, 1978; Reetz, 1977; Schweitzer and Seidmann, 1985; Chow and Tsitsiklis, 1991; Kushner and Dupuis, 1992; Rust, 1996)."
                                }
                            ]
                        }
                    ],
                    "index": 3
                },
                {
                    "bbox": [
                        104,
                        475,
                        529,
                        740
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                104,
                                475,
                                529,
                                740
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        104,
                                        475,
                                        529,
                                        740
                                    ],
                                    "type": "text",
                                    "content": "Holland's (1986) classifier system used a selective feature- match technique to generalize evaluation information across state- action pairs. Each classifier matched a subset of states having specified values for a subset of features, with the remaining features having arbitrary values (\"wild cards\"). These subsets were then used in a conventional state- aggregation approach to function approximation. Holland's idea was to use a genetic algorithm to evolve a set of classifiers that collectively would implement a useful action- value function. Holland's ideas influenced the early research of the authors on reinforcement learning, but we focused on different approaches to function approximation. As function approximators, classifiers are limited in several ways. First, they are state- aggregation methods, with concomitant limitations in scaling and in representing smooth functions efficiently. In addition, the matching rules of classifiers can implement only aggregation boundaries that are parallel to the feature axes. Perhaps the most important limitation of conventional classifier systems is that the classifiers are learned via the genetic algorithm, an evolutionary method. As we discussed in Chapter 1, there is available during learning much more detailed information about how to learn than can be used by evolutionary methods. This perspective led us to instead adapt supervised learning methods for use in reinforcement learning, specifically gradient- descent and ANN methods. These differences between Holland's approach and ours are not surprising because Holland's ideas were developed during a period when ANNs were generally regarded as being too weak in computational power to be useful, whereas our work was at the beginning of"
                                }
                            ]
                        }
                    ],
                    "index": 4
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 44
        },
        {
            "para_blocks": [
                {
                    "bbox": [
                        64,
                        141,
                        489,
                        167
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                141,
                                489,
                                167
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        141,
                                        489,
                                        167
                                    ],
                                    "type": "text",
                                    "content": "the period that saw widespread questioning of that conventional wisdom. There remain many opportunities for combining aspects of these different approaches."
                                }
                            ]
                        }
                    ],
                    "index": 0
                },
                {
                    "bbox": [
                        64,
                        169,
                        489,
                        248
                    ],
                    "type": "text",
                    "lines": [
                        {
                            "bbox": [
                                64,
                                169,
                                489,
                                248
                            ],
                            "spans": [
                                {
                                    "bbox": [
                                        64,
                                        169,
                                        489,
                                        248
                                    ],
                                    "type": "text",
                                    "content": "Christensen and Korf (1986) experimented with regression methods for modifying coefficients of linear value function approximations in the game of chess. Chapman and Kaelbling (1991) and Tan (1991) adapted decision- tree methods for learning value functions. Explanation- based learning methods have also been adapted for learning value functions, yielding compact representations (Yee, Saxena, Utgoff, and Barto, 1990; Dietterich and Flann, 1995)."
                                }
                            ]
                        }
                    ],
                    "index": 1
                }
            ],
            "discarded_blocks": [],
            "page_size": [
                595,
                842
            ],
            "page_idx": 45
        }
    ],
    "_backend": "vlm",
    "_version_name": "2.0.6"
}